[{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to dietaryindex","title":"Contributing to dietaryindex","text":"👍🎉 First , thanks taking time contribute! 🎉👍","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/CONTRIBUTING.html","id":"did-you-find-a-bug","dir":"","previous_headings":"","what":"Did you find a bug?","title":"Contributing to dietaryindex","text":"Ensure bug already reported searching GitHub Issues. ’re unable find open issue addressing problem, open new one. sure include title clear description, much relevant information possible. possible, use relevant templates create issue. Bug template","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/CONTRIBUTING.html","id":"do-you-intend-to-add-a-new-feature-change-an-existing-one-or-contribute-to-the-dietaryindex-in-other-ways","dir":"","previous_headings":"","what":"Do you intend to add a new feature, change an existing one, or contribute to the dietaryindex in other ways?","title":"Contributing to dietaryindex","text":"Suggest change sending email maintainer, James Jiada Zhan, jzha832@emory.edu. open issue GitHub collected positive feedback change. GitHub issues primarily intended bug reports fixes. Thanks! ❤️ ❤️ ❤️ James Jiada Zhan","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/case-study-1,2,3.html","id":"load-packages-and-data","dir":"Articles","previous_headings":"","what":"Load packages and data","title":"Case study_123","text":"","code":"library(ggplot2) library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(tidyr) library(dietaryindex) ## Loaded dietaryindex ## Thank you for using dietaryindex! ## Tutorials: https://github.com/jamesjiadazhan/dietaryindex ## Dietary index calculations vary by the research question of the analysis. Currently, dietaryindex only supports simple scoring algorithm methods for all dietary indexes. Please use dietaryindex responsibly according to your research question. For more information, please refer to this resource: https://epi.grants.cancer.gov/hei/tools.html. ## Cite us:  citation('dietaryindex') or ## Zhan JJ, Hodge RA, Dunlop AL, et al. Dietaryindex: a user-friendly and versatile R package for standardizing dietary pattern analysis in epidemiological and clinical studies. Am J Clin Nutr. Published online August 23, 2024. doi:10.1016/j.ajcnut.2024.08.021 # include COMPLEX SURVEY DESIGN ####################################### library(survey) ## Loading required package: grid ## Loading required package: Matrix ##  ## Attaching package: 'Matrix' ## The following objects are masked from 'package:tidyr': ##  ##     expand, pack, unpack ## Loading required package: survival ## Warning: package 'survival' was built under R version 4.3.3 ##  ## Attaching package: 'survey' ## The following object is masked from 'package:graphics': ##  ##     dotchart options(survey.lonely.psu = \"adjust\") #accounts for the lonely psu problem from subsetting survey data to small groups  # Load the data data(\"DASH_trial\") data(\"PREDIMED_trial\") data(\"NHANES_20172018\")  # set up working dictionary setwd(\"/Users/james/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Emory University - Ph.D./dietaryindex_package/NHANES_combined/dietaryindex_NHANES/data/NHANES_combined\")  # Load the NHANES data from 2005 to 2018 ## NHANES 2005-2006 load(\"NHANES_20052006.rda\") ## NHANES 2007-2008 load(\"NHANES_20072008.rda\") ## NHANES 2009-2010 load(\"NHANES_20092010.rda\") ## NHANES 2011-2012 load(\"NHANES_20112012.rda\") ## NHANES 2013-2014 load(\"NHANES_20132014.rda\") ## NHANES 2015-2016 load(\"NHANES_20152016.rda\")"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/case-study-1,2,3.html","id":"dietary-index-calculations","dir":"Articles","previous_headings":"","what":"Dietary index calculations","title":"Case study_123","text":"","code":"# DASHI from the DASH trial DASHI_DASH = DASHI(     SERV_DATA = DASH_trial,      RESPONDENTID = DASH_trial$Diet_Type,     TOTALKCAL_DASHI = DASH_trial$Kcal,      TOTAL_FAT_DASHI = DASH_trial$Totalfat_Percent,      SAT_FAT_DASHI = DASH_trial$Satfat_Percent,      PROTEIN_DASHI = DASH_trial$Protein_Percent,      CHOLESTEROL_DASHI = DASH_trial$Cholesterol,      FIBER_DASHI = DASH_trial$Fiber,      POTASSIUM_DASHI = DASH_trial$Potassium,      MAGNESIUM_DASHI = DASH_trial$Magnesium,      CALCIUM_DASHI = DASH_trial$Calcium,      SODIUM_DASHI = DASH_trial$Sodium)  # MEDI for the PREDIMED trial MEDI_PREDIMED = MEDI(   SERV_DATA = PREDIMED_trial,   RESPONDENTID = PREDIMED_trial$Diet_Type,   OLIVE_OIL_SERV_MEDI = PREDIMED_trial$Virgin_Oliveoil,   FRT_SERV_MEDI = PREDIMED_trial$Fruits,    VEG_SERV_MEDI = PREDIMED_trial$Vegetables,   LEGUMES_SERV_MEDI = PREDIMED_trial$Legumes,   NUTS_SERV_MEDI = PREDIMED_trial$Total_nuts,   FISH_SEAFOOD_SERV_MEDI = PREDIMED_trial$Fish_Seafood,   ALCOHOL_SERV_MEDI = PREDIMED_trial$Alcohol,   SSB_SERV_MEDI = PREDIMED_trial$Soda_Drinks,   SWEETS_SERV_MEDI = PREDIMED_trial$Sweets,   DISCRET_FAT_SERV_MEDI = PREDIMED_trial$Refined_Oliveoil,   REDPROC_MEAT_SERV_MEDI = PREDIMED_trial$Meat)  # set up survey design for NHANES data 2017-2018 day 1 and day 2 ## filter out the missing values for the weight variable WTDR2D ## select only persons aged two and older NHANES_20172018_design_d1d2 = NHANES_20172018$FPED %>%     filter(!is.na(WTDR2D)) %>%     filter(RIDAGEYR >= 2)  # filter only the individuals with reliable recall status for FPED, FPED_IND, NUTRIENT, NUTRIENT_IND, FPED2, FPED_IND2, NUTRIENT2, NUTRIENT_IND2 ## DAY 1: DR1DRSTZ == 1 ## DAY 2: DR2DRSTZ == 1 # also, filter out those kcal intake < 500 or > 5000 ## DAY 1: DR1TKCAL >= 500 & DR1TKCAL <= 5000 ## DAY 2: DR2TKCAL >= 500 & DR2TKCAL <= 5000 NHANES_20172018$FPED_IND = NHANES_20172018$FPED_IND %>%     filter(DR1DRSTZ == 1) NHANES_20172018$NUTRIENT_IND = NHANES_20172018$NUTRIENT_IND %>%     filter(DR1DRSTZ == 1) NHANES_20172018$FPED = NHANES_20172018$FPED %>%     filter(DR1DRSTZ == 1) NHANES_20172018$NUTRIENT = NHANES_20172018$NUTRIENT %>%     filter(DR1DRSTZ == 1) %>%     filter(DR1TKCAL >= 500 & DR1TKCAL <= 5000)  NHANES_20172018$FPED_IND2 = NHANES_20172018$FPED_IND2 %>%     filter(DR2DRSTZ == 1) NHANES_20172018$NUTRIENT_IND2 = NHANES_20172018$NUTRIENT_IND2 %>%     filter(DR2DRSTZ == 1) NHANES_20172018$FPED2 = NHANES_20172018$FPED2 %>%     filter(DR2DRSTZ == 1) NHANES_20172018$NUTRIENT2 = NHANES_20172018$NUTRIENT2 %>%     filter(DR2DRSTZ == 1) %>%     filter(DR2TKCAL >= 500 & DR2TKCAL <= 5000)  ## NHANES 2017-2018 # DASHI for day 1 and day 2 DASHI_NHANES = DASHI_NHANES_FPED(NUTRIENT_PATH=NHANES_20172018$NUTRIENT, NUTRIENT_PATH2=NHANES_20172018$NUTRIENT2)  # MEDI for day 1 and day 2 MEDI_NHANES = MEDI_NHANES_FPED(FPED_IND_PATH=NHANES_20172018$FPED_IND, NUTRIENT_IND_PATH=NHANES_20172018$NUTRIENT_IND, FPED_IND_PATH2=NHANES_20172018$FPED_IND2, NUTRIENT_IND_PATH2=NHANES_20172018$NUTRIENT_IND2) ## Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. ## Since no SWEETS code is provided, the default SSB code from 17-18 FNDDS file is used ## Since no FAT_OIL code is provided, the default FAT_OIL code from 17-18 FNDDS file is used ## Since no OLIVE_OIL code is provided, the default OLIVE_OIL code from 17-18 FNDDS file is used # DASH for day 1 and day 2 DASH_NHANES = DASH_NHANES_FPED(NHANES_20172018$FPED_IND, NHANES_20172018$NUTRIENT_IND, NHANES_20172018$FPED_IND2, NHANES_20172018$NUTRIENT_IND2) ## Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. ## Since no skim milk code is provided, the default skim milk code from 17-18 FNDDS file is used. ## Since no low-fat cheese code is provided, the default low-fat cheese code from 17-18 FNDDS file is used. ## Reminder: this DASH index uses quintiles to rank participants' food/drink serving sizes and then calculate DASH component scores, which may generate results that are specific to your study population but not comparable to other populations. # MED for day 1 and day 2 MED_NHANES = MED_NHANES_FPED(FPED_PATH=NHANES_20172018$FPED, NUTRIENT_PATH=NHANES_20172018$NUTRIENT, DEMO_PATH=NHANES_20172018$DEMO, FPED_PATH2=NHANES_20172018$FPED2, NUTRIENT_PATH2=NHANES_20172018$NUTRIENT2) ## Reminder: this MED index uses medians to rank participants' food/drink serving sizes and then calculate MED component scores, which may generate results that are specific to your study population but not comparable to other populations. # AHEI for day 1 and day 2 AHEI_NHANES = AHEI_NHANES_FPED(NHANES_20172018$FPED_IND, NHANES_20172018$NUTRIENT_IND, NHANES_20172018$FPED_IND2, NHANES_20172018$NUTRIENT_IND2) ## Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. ## Trans fat is not avaiable for NHANES, so it is not included in the AHEI score. # DII for day 1 and day 2 DII_NHANES = DII_NHANES_FPED(FPED_PATH=NHANES_20172018$FPED, NUTRIENT_PATH=NHANES_20172018$NUTRIENT, DEMO_PATH=NHANES_20172018$DEMO, FPED_PATH2=NHANES_20172018$FPED2, NUTRIENT_PATH2=NHANES_20172018$NUTRIENT2) ## VITD is included in the calculation in the first day of NHANES data. ## VITD is included in the calculation in the second day of NHANES data. ## Reminder: This function does not use all the original DII variables. Eugenol, garlic, ginger, onion, trans fat, turmeric, Green/black tea, Flavan-3-ol, Flavones, Flavonols, Flavonones, Anthocyanidins, Isoflavones, Pepper, Thyme/oregano, Rosemary are not included because they are not available in NHANES. ## Day 1 and Day 2 data are used for the calculation. # HEI2020 for day 1 and day 2 HEI2020_NHANES_1718 = HEI2020_NHANES_FPED(FPED_PATH=NHANES_20172018$FPED, NUTRIENT_PATH=NHANES_20172018$NUTRIENT, DEMO_PATH=NHANES_20172018$DEMO, FPED_PATH2=NHANES_20172018$FPED2, NUTRIENT_PATH2=NHANES_20172018$NUTRIENT2)  # Merge all the previous data frames into one data frame by SEQN NHANES_20172018_dietaryindex_d1d2 = inner_join(NHANES_20172018_design_d1d2, DASHI_NHANES, by = \"SEQN\") %>%     inner_join(MEDI_NHANES, by = \"SEQN\") %>%     inner_join(DASH_NHANES, by = \"SEQN\") %>%     inner_join(MED_NHANES, by = \"SEQN\") %>%     inner_join(AHEI_NHANES, by = \"SEQN\") %>%     inner_join(DII_NHANES, by = \"SEQN\") %>%     inner_join(HEI2020_NHANES_1718, by = \"SEQN\")  # set up survey design for NHANES data 2017-2018 day 1 and day 2 NHANES_design_1718_d1d2 <- svydesign(     id = ~SDMVPSU,      strata = ~SDMVSTRA,      weight = ~WTDR2D,      data = NHANES_20172018_dietaryindex_d1d2, #set up survey design on the full dataset #can restrict at time of analysis      nest = TRUE)   # generate the svymean object for DASHI_ALL DASHI_1718_svymean = svymean(~DASHI_ALL, design = NHANES_design_1718_d1d2, na.rm = TRUE) # extract the mean from the svymean object DASHI_1718_svymean_mean = DASHI_1718_svymean[[\"DASHI_ALL\"]]  # generate the svymean object for MEDI_ALL MEDI_1718_svymean = svymean(~MEDI_ALL, design = NHANES_design_1718_d1d2, na.rm = TRUE) # extract the mean from the svymean object MEDI_1718_svymean_mean = MEDI_1718_svymean[[\"MEDI_ALL\"]]  # generate the svymean object for DASH_ALL DASH_1718_svymean = svymean(~DASH_ALL, design = NHANES_design_1718_d1d2, na.rm = TRUE) # extract the mean from the svymean object DASH_1718_svymean_mean = DASH_1718_svymean[[\"DASH_ALL\"]]  # generate the svymean object for MED_ALL MED_1718_svymean = svymean(~MED_ALL, design = NHANES_design_1718_d1d2, na.rm = TRUE) # extract the mean from the svymean object MED_1718_svymean_mean = MED_1718_svymean[[\"MED_ALL\"]]  # generate the svymean object for AHEI_ALL AHEI_1718_svymean = svymean(~AHEI_ALL, design = NHANES_design_1718_d1d2, na.rm = TRUE) # extract the mean from the svymean object AHEI_1718_svymean_mean = AHEI_1718_svymean[[\"AHEI_ALL\"]]  # generate the svymean object for DII_ALL DII_1718_svymean = svymean(~DII_ALL, design = NHANES_design_1718_d1d2, na.rm = TRUE) # extract the mean from the svymean object DII_1718_svymean_mean = DII_1718_svymean[[\"DII_ALL\"]]  # generate the svymean object for HEI2020_ALL HEI2020_1718_svymean = svymean(~HEI2020_ALL, design = NHANES_design_1718_d1d2, na.rm = TRUE) # extract the mean from the svymean object HEI2020_1718_svymean_mean = HEI2020_1718_svymean[[\"HEI2020_ALL\"]]  # HEI2020 for day 1 ## 2017-2018 HEI2020_NHANES_1718_d1 = HEI2020_NHANES_FPED(FPED_PATH=NHANES_20172018$FPED, NUTRIENT_PATH=NHANES_20172018$NUTRIENT, DEMO_PATH=NHANES_20172018$DEMO) ## add year column HEI2020_NHANES_1718_d1 = HEI2020_NHANES_1718_d1 %>%     mutate(year = \"2017-2018\") # select only necessary columns from FPED data NHANES_20172018_FPED = NHANES_20172018$FPED %>%     select(SEQN, SDMVPSU, SDMVSTRA, WTDRD1) ## inner join with the NHANES 2017-2018 day 1 FPED data HEI2020_NHANES_1718_d1 = inner_join(NHANES_20172018_FPED, HEI2020_NHANES_1718_d1, by = \"SEQN\")  # perform data filtering for 2005-2016 NHANES data # filter only the individuals with reliable recall status for FPED, FPED_IND, NUTRIENT, NUTRIENT_IND, FPED2, FPED_IND2, NUTRIENT2, NUTRIENT_IND2 ## DAY 1: DR1DRSTZ == 1 # also, filter out those kcal intake < 500 or > 5000 ## DAY 1: DR1TKCAL >= 500 & DR1TKCAL <= 5000  ## 2015-2016 NHANES_20152016$FPED = NHANES_20152016$FPED %>%     filter(DR1DRSTZ == 1) NHANES_20152016$NUTRIENT = NHANES_20152016$NUTRIENT %>%     filter(DR1DRSTZ == 1) %>%     filter(DR1TKCAL >= 500 & DR1TKCAL <= 5000)  ## 2013-2014 NHANES_20132014$FPED = NHANES_20132014$FPED %>%     filter(DR1DRSTZ == 1) NHANES_20132014$NUTRIENT = NHANES_20132014$NUTRIENT %>%     filter(DR1DRSTZ == 1) %>%     filter(DR1TKCAL >= 500 & DR1TKCAL <= 5000)  ## 2011-2012 NHANES_20112012$FPED = NHANES_20112012$FPED %>%     filter(DR1DRSTZ == 1) NHANES_20112012$NUTRIENT = NHANES_20112012$NUTRIENT %>%     filter(DR1DRSTZ == 1) %>%     filter(DR1TKCAL >= 500 & DR1TKCAL <= 5000)  ## 2009-2010 NHANES_20092010$FPED = NHANES_20092010$FPED %>%     filter(DR1DRSTZ == 1) NHANES_20092010$NUTRIENT = NHANES_20092010$NUTRIENT %>%     filter(DR1DRSTZ == 1) %>%     filter(DR1TKCAL >= 500 & DR1TKCAL <= 5000)  ## 2007-2008 NHANES_20072008$FPED = NHANES_20072008$FPED %>%     filter(DR1DRSTZ == 1) NHANES_20072008$NUTRIENT = NHANES_20072008$NUTRIENT %>%     filter(DR1DRSTZ == 1) %>%     filter(DR1TKCAL >= 500 & DR1TKCAL <= 5000)  ## 2005-2006 NHANES_20052006$FPED = NHANES_20052006$FPED %>%     filter(DR1DRSTZ == 1) NHANES_20052006$NUTRIENT = NHANES_20052006$NUTRIENT %>%     filter(DR1DRSTZ == 1) %>%     filter(DR1TKCAL >= 500 & DR1TKCAL <= 5000)   ## 2015-2016 HEI2020_NHANES_1516_d1 = HEI2020_NHANES_FPED(FPED_PATH=NHANES_20152016$FPED, NUTRIENT_PATH=NHANES_20152016$NUTRIENT, DEMO_PATH=NHANES_20152016$DEMO) ## add year column HEI2020_NHANES_1516_d1 = HEI2020_NHANES_1516_d1 %>%     mutate(year = \"2015-2016\") # select only necessary columns from FPED data NHANES_20152016_FPED = NHANES_20152016$FPED %>%     select(SEQN, SDMVPSU, SDMVSTRA, WTDRD1) ## inner join with the NHANES 2015-2016 day 1 FPED data HEI2020_NHANES_1516_d1 = inner_join(NHANES_20152016_FPED, HEI2020_NHANES_1516_d1, by = \"SEQN\")  ## 2013-2014 HEI2020_NHANES_1314_d1 = HEI2020_NHANES_FPED(FPED_PATH=NHANES_20132014$FPED, NUTRIENT_PATH=NHANES_20132014$NUTRIENT, DEMO_PATH=NHANES_20132014$DEMO) ## add year column HEI2020_NHANES_1314_d1 = HEI2020_NHANES_1314_d1 %>%     mutate(year = \"2013-2014\") # select only necessary columns from FPED data NHANES_20132014_FPED = NHANES_20132014$FPED %>%     select(SEQN, SDMVPSU, SDMVSTRA, WTDRD1) ## inner join with the NHANES 2013-2014 day 1 FPED data HEI2020_NHANES_1314_d1 = inner_join(NHANES_20132014_FPED, HEI2020_NHANES_1314_d1, by = \"SEQN\")  ## 2011-2012 HEI2020_NHANES_1112_d1 = HEI2020_NHANES_FPED(FPED_PATH=NHANES_20112012$FPED, NUTRIENT_PATH=NHANES_20112012$NUTRIENT, DEMO_PATH=NHANES_20112012$DEMO) ## add year column HEI2020_NHANES_1112_d1 = HEI2020_NHANES_1112_d1 %>%     mutate(year = \"2011-2012\") # select only necessary columns from FPED data NHANES_20112012_FPED = NHANES_20112012$FPED %>%     select(SEQN, SDMVPSU, SDMVSTRA, WTDRD1) ## inner join with the NHANES 2011-2012 day 1 FPED data HEI2020_NHANES_1112_d1 = inner_join(NHANES_20112012_FPED, HEI2020_NHANES_1112_d1, by = \"SEQN\")  ## 2009-2010 HEI2020_NHANES_0910_d1 = HEI2020_NHANES_FPED(FPED_PATH=NHANES_20092010$FPED, NUTRIENT_PATH=NHANES_20092010$NUTRIENT, DEMO_PATH=NHANES_20092010$DEMO) ## add year column HEI2020_NHANES_0910_d1 = HEI2020_NHANES_0910_d1 %>%     mutate(year = \"2009-2010\") # select only necessary columns from FPED data NHANES_20092010_FPED = NHANES_20092010$FPED %>%     select(SEQN, SDMVPSU, SDMVSTRA, WTDRD1) ## inner join with the NHANES 2009-2010 day 1 FPED data HEI2020_NHANES_0910_d1 = inner_join(NHANES_20092010_FPED, HEI2020_NHANES_0910_d1, by = \"SEQN\")  ## 2007-2008 HEI2020_NHANES_0708_d1 = HEI2020_NHANES_FPED(FPED_PATH=NHANES_20072008$FPED, NUTRIENT_PATH=NHANES_20072008$NUTRIENT, DEMO_PATH=NHANES_20072008$DEMO) ## add year column HEI2020_NHANES_0708_d1 = HEI2020_NHANES_0708_d1 %>%     mutate(year = \"2007-2008\") # select only necessary columns from FPED data NHANES_20072008_FPED = NHANES_20072008$FPED %>%     select(SEQN, SDMVPSU, SDMVSTRA, WTDRD1) ## inner join with the NHANES 2007-2008 day 1 FPED data HEI2020_NHANES_0708_d1 = inner_join(NHANES_20072008_FPED, HEI2020_NHANES_0708_d1, by = \"SEQN\")  ## 2005-2006 HEI2020_NHANES_0506_d1 = HEI2020_NHANES_FPED(FPED_PATH=NHANES_20052006$FPED, NUTRIENT_PATH=NHANES_20052006$NUTRIENT, DEMO_PATH=NHANES_20052006$DEMO) ## add year column HEI2020_NHANES_0506_d1 = HEI2020_NHANES_0506_d1 %>%     mutate(year = \"2005-2006\") # select only necessary columns from FPED data NHANES_20052006_FPED = NHANES_20052006$FPED %>%     select(SEQN, SDMVPSU, SDMVSTRA, WTDRD1) ## inner join with the NHANES 2005-2006 day 1 FPED data HEI2020_NHANES_0506_d1 = inner_join(NHANES_20052006_FPED, HEI2020_NHANES_0506_d1, by = \"SEQN\")   # combine all the HEI2020 day 1 data by rows HEI2020_NHANES_d1 = rbind(HEI2020_NHANES_0506_d1, HEI2020_NHANES_0708_d1, HEI2020_NHANES_0910_d1, HEI2020_NHANES_1112_d1, HEI2020_NHANES_1314_d1, HEI2020_NHANES_1516_d1, HEI2020_NHANES_1718_d1) # add toddler column HEI2020_NHANES_d1_2 = HEI2020_NHANES_d1 %>%     mutate(toddler = ifelse(RIDAGEYR < 2, \"toddler\", \"nontoddler\")) %>%     ## rearrange the column order     select(SEQN, SDMVPSU, SDMVSTRA, WTDRD1, year, toddler, everything())  # create the survey design for HEI2020 day 1 HEI2020_NHANES_design_d1 = svydesign(     id = ~SDMVPSU,      strata = ~SDMVSTRA,      weight = ~WTDRD1,      data = HEI2020_NHANES_d1_2, #set up survey design on the full dataset #can restrict at time of analysis      nest = TRUE)"},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/case-study-1,2,3.html","id":"case-study-2-plot","dir":"Articles","previous_headings":"","what":"Case study 2 plot","title":"Case study_123","text":"","code":"## Joining with `by = join_by(year, toddler)`"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"authors-jiada-james-zhan-et-al-","dir":"Articles","previous_headings":"Getting Started","what":"Authors: Jiada James Zhan et al.","title":"","text":"dietaryindex package currently contains following key functions: Ref: https://pubmed.ncbi.nlm.nih.gov/37201748/ Ref: https://pubmed.ncbi.nlm.nih.gov/37209965/ Ref: https://www.fns.usda.gov/-hei-scored Ref: https://academic.oup.com/jn/article/142/6/1009/4688968?login=false Ref: https://www.jandonline.org/article/S0002-8223(09)00288-0/fulltext Ref:https://jamanetwork.com/journals/jamainternalmedicine/fullarticle/414155 https://www.nejm.org/doi/10.1056/NEJM199704173361601?url_ver=Z39.88-2003&rfr_id=ori:rid:crossref.org&rfr_dat=cr_pub%20%200www.ncbi.nlm.nih.gov https://jamanetwork.com/journals/jamainternalmedicine/fullarticle/413957 Ref: https://www.ahajournals.org/doi/10.1161/CIRCULATIONAHA.108.816736?url_ver=Z39.88-2003&rfr_id=ori:rid:crossref.org&rfr_dat=cr_pub%20%200pubmed Ref: https://www.nejm.org/doi/full/10.1056/nejmoa1800389 Ref: https://www.cambridge.org/core/journals/public-health-nutrition/article/designing--developing--literaturederived-populationbased-dietary-inflammatory-index/30BE2C2295CE93DC6B54F9F9AD50CC68 ACS2020_V1(), American Cancer Society 2020 diet score Ref: https://jamanetwork.com/journals/jamanetworkopen/fullarticle/2793171 Ref: https://www.thelancet.com/journals/lancet/article/PIIS0140-6736(18)31788-4/fulltext HEI2020_NHANES_FPED(), Calculating HEI2020 & HEI-Toddlers-2020 1 step using NHANES_FPED datasets HEI2015_NHANES_FPED(), Calculating HEI2015 1 step using NHANES_FPED data AHEI_NHANES_FPED(), Calculating AHEI 1 step using NHANES_FPED data DASH_NHANES_FPED(), Calculating DASH (quintile-based) 1 step using NHANES_FPED data DASHI_NHANES_FPED(), Calculating DASHI (nutrient-based DASH trial) 1 step using NHANES_FPED data MED_NHANES_FPED(), Calculating aMED (median-based) 1 step using NHANES_FPED data MEDI_NHANES_FPED(), Calculating MEDI (serving size-based PREDIMED trial) 1 step using NHANES_FPED data DII_NHANES_FPED(), Calculating DII 1 step using NHANES_FPED data HEI2020_NHANES_MPED(), Calculating HEI2020 1 step using NHANES_MPED data HEI2015_NHANES_MPED(), Calculating HEI2015 1 step using NHANES_MPED data AHEI_NHANES_MPED(), Calculating AHEI 1 step using NHANES_MPED data DASH_NHANES_MPED(), Calculating DASH 1 step using NHANES_MPED data DASHI_NHANES_MPED(), Calculating DASHI 1 step using NHANES_MPED data MED_NHANES_MPED(), Calculating aMED 1 step using NHANES_MPED data MEDI_NHANES_MPED(), Calculating MEDI 1 step using NHANES_MPED data DII_NHANES_MPED(), Calculating DII 1 step using NHANES_MPED data HEI2020_ASA24(), Calculating HEI2020 non-toddlers (age > 2 years) 1 step using ASA24 data HEI2020_TODDLERS_ASA24(), Calculating HEI2020 non-toddlers (age 1-2 years) 1 step using ASA24 data HEI2015_ASA24(), Calculating HEI2015 1 step using ASA24 data AHEI_F_ASA24(), Calculate AHEI (female ) within 1 step using ASA24 data AHEI_M_ASA24(), Calculate AHEI (male ) within 1 step using ASA24 data DASH_ASA24(), Calculating DASH 1 step using ASA24 data MED_ASA24(), Calculating aMED 1 step using ASA24 data DII_ASA24(), Calculating DII 1 step using ASA24 data HEI2015_DHQ3(), Calculating HEI2015 1 step using DHQ3 data AHEI_DHQ3(), Calculate AHEI (female male) within 1 step using DHQ3 data DASH_DHQ3(), Calculating DASH 1 step using DHQ3 data. data Detailed analysis file, ending detail.csv MED_DHQ3(), Calculating aMED 1 step using DHQ3 data HEI2015_BLOCK(), Calculating HEI2015 1 step using BLOCK data MED_BLOCK(), Calculating aMED 1 step using BLOCK data DII_BLOCK(), Calculating DII 1 step using BLOCK data DASH_BLOCK(), Calculating DASH 1 step using BLOCK data AHEI_BLOCK(), Calculating AHEI 1 step using BLOCK data AHEIP_BLOCK(), Calculating AHEIP 1 step using BLOCK data Note: NHANES functions allow users enter first day data, second day data, first day + second day data return results accordingly. See examples later. dietaryindex compiled NHANES data 2005 - 2020 convenience. includes NHANES 2005-2006, 2007-2008, 2009-2010, 2011-2012, 2013-2014, 2015-2016, 2017-2018, 2017-2020. retrieve data: Download NHANES_combined folder Google Drive (https://drive.google.com/drive/u/2/folders/1umjhuS22aHEW_bU5AjYa8vrae91gsb0D) Download NHANES_combined folder GitHub dietaryindex_NHANES page (https://github.com/jamesjiadazhan/dietaryindex_NHANES/tree/main/data/NHANES_combined) , may use following codes load data:","code":"# set up working dictionary setwd(\"/Users/james/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Emory University - Ph.D./dietaryindex_package/NHANES_combined/dietaryindex_NHANES/data/NHANES_combined\")  ## NHANES 2005-2006, for example load(\"NHANES_20052006.rda\")"},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"nhanes-data-format","dir":"Articles","previous_headings":"Examples for data format:","what":"NHANES data format","title":"","text":"","code":"# install.packages(\"devtools\") #If you don't have \"devtools\" installed already # devtools::install_github(\"jamesjiadazhan/dietaryindex\") # Install the package from GitHub # Use the NHANES example data in 2017-2018 using the first day + second day nutrition data library(dietaryindex)  ## load dplyr package for data processing library(dplyr) ## load the survey package for NHANES data library(survey) ## Warning: package 'survival' was built under R version 4.3.3 ## load the gtsummary package for summarizing the results library(gtsummary)  data(\"NHANES_20172018\")"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"food-pattern-data-for-the-2017-2018-first-day-data","dir":"Articles","previous_headings":"Examples for data format: > NHANES data format","what":"Food pattern data for the 2017-2018 first day data","title":"","text":"","code":"knitr::kable(head(NHANES_20172018$FPED))"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"nutrient-data-for-the-2017-2018-first-day-data","dir":"Articles","previous_headings":"Examples for data format: > NHANES data format","what":"Nutrient data for the 2017-2018 first day data","title":"","text":"","code":"knitr::kable(head(NHANES_20172018$NUTRIENT))"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"demographic-data-for-the-2017-2018-first-and-second-day-data","dir":"Articles","previous_headings":"Examples for data format: > NHANES data format","what":"Demographic data for the 2017-2018 first and second day data","title":"","text":"","code":"knitr::kable(head(NHANES_20172018$DEMO))"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"food-pattern-data-for-the-2017-2018-second-day-data","dir":"Articles","previous_headings":"Examples for data format: > NHANES data format","what":"Food pattern data for the 2017-2018 second day data","title":"","text":"","code":"knitr::kable(head(NHANES_20172018$FPED2))"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"nutrient-data-for-the-2017-2018-second-day-data","dir":"Articles","previous_headings":"Examples for data format: > NHANES data format","what":"Nutrient data for the 2017-2018 second day data","title":"","text":"","code":"knitr::kable(head(NHANES_20172018$NUTRIENT2))"},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"asa24-dietary-data-for-each-individual","dir":"Articles","previous_headings":"Examples for data format: > ASA24 data format:","what":"ASA24 dietary data for each individual","title":"","text":"","code":"data(\"ASA24_exp\") knitr::kable(head(ASA24_exp))"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"asa24-detailed-food-data-for-all-foods-consumed-by-each-individual","dir":"Articles","previous_headings":"Examples for data format: > ASA24 data format:","what":"ASA24 detailed food data for all foods consumed by each individual","title":"","text":"","code":"data(\"ASA24_exp_detailed\") knitr::kable(head(ASA24_exp_detailed))"},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"dhq3-dietary-data-for-each-individual","dir":"Articles","previous_headings":"Examples for data format: > DHQ3 data format:","what":"DHQ3 dietary data for each individual","title":"","text":"","code":"#Use the example data data(\"DHQ3_exp\") knitr::kable(head(DHQ3_exp))"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"dhq3-detailed-food-data-for-all-foods-consumed-by-each-individual","dir":"Articles","previous_headings":"Examples for data format: > DHQ3 data format:","what":"DHQ3 detailed food data for all foods consumed by each individual","title":"","text":"","code":"#Use the example data data(\"DHQ3_exp_detailed\") knitr::kable(head(DHQ3_exp_detailed))"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"block-ffq-data-format","dir":"Articles","previous_headings":"Examples for data format:","what":"Block FFQ data format:","title":"","text":"","code":"#Use the example data data(\"BLOCK_exp\") knitr::kable(head(BLOCK_exp))"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"your-own-dietary-assessment-tool-data-format","dir":"Articles","previous_headings":"Examples for data format:","what":"Your own dietary assessment tool data format:","title":"","text":"","code":"#Use the example data data(\"HEI2020_VALIDATION\") knitr::kable(head(HEI2020_VALIDATION))"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"examples-for-using-dietaryindexs-functions","dir":"Articles","previous_headings":"","what":"Examples for using dietaryindex’s functions:","title":"","text":"Remember, using dietaryindex’s functions NHANES, complex survey design taken account! See examples . ___","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-hei2020-for-nhanes_fped-after-2005","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating HEI2020 for NHANES_FPED (after 2005)","title":"","text":"","code":"# Using the first day nutrition data FPED_PATH_1 = \"/Users/james/Desktop/fped_dr1tot_1718.sas7bdat\" NUTRIENT_PATH_1 = \"/Users/james/Desktop/DR1TOT_J.XPT\" DEMO_PATH_1 = \"/Users/james/Desktop/DEMO_J.XPT\"  HEI2020_NHANES_FPED(FPED_PATH=FPED_PATH_1, NUTRIENT_PATH=NUTRIENT_PATH_1, DEMO_PATH=DEMO_PATH_1) # only the first day nutrition data # Use the NHANES example data in 2017-2018 using only the first day nutrition data HEI2020_NHANES_FPED_unweighted_d1 = HEI2020_NHANES_FPED(FPED_PATH=NHANES_20172018$FPED, NUTRIENT_PATH=NHANES_20172018$NUTRIENT, DEMO_PATH=NHANES_20172018$DEMO)  # set up survey design for NHANES data 2017-2018 day 1 NHANES_20172018_design_d1 = NHANES_20172018$FPED %>%     filter(!is.na(WTDRD1)) %>%     ## select the variables needed for the survey design     select(SEQN, SDMVPSU, SDMVSTRA, WTDRD1)  # Merge the NHANES data with weighting variables with the HEI2020 results NHANES_20172018_design_d1_HEI2020 = inner_join(HEI2020_NHANES_FPED_unweighted_d1, NHANES_20172018_design_d1, by = \"SEQN\") print(NHANES_20172018_design_d1_HEI2020) ## # A tibble: 7,285 × 19 ##     SEQN RIDAGEYR HEI2020_ALL HEI2020_TOTALFRT HEI2020_FRT HEI2020_VEG ##    <dbl>    <dbl>       <dbl>            <dbl>       <dbl>       <dbl> ##  1 93704        2        63.5            5           0          3.03   ##  2 93705       66        41.1            0           0          5      ##  3 93706       18        44.5            0           0          1.65   ##  4 93707       13        41.6            0           0          2.41   ##  5 93708       66        58.5            2.45        4.90       5      ##  6 93711       56        67.1            2.13        3.12       5      ##  7 93712       18        69.5            5           5          3.49   ##  8 93713       67        52.9            4.69        5          4.57   ##  9 93714       54        38.6            0.376       0.702      0.638  ## 10 93715       71        40.0            1.55        3.11       0.0706 ## # ℹ 7,275 more rows ## # ℹ 13 more variables: HEI2020_GREENNBEAN <dbl>, HEI2020_TOTALPRO <dbl>, ## #   HEI2020_SEAPLANTPRO <dbl>, HEI2020_WHOLEGRAIN <dbl>, HEI2020_DAIRY <dbl>, ## #   HEI2020_FATTYACID <dbl>, HEI2020_REFINEDGRAIN <dbl>, HEI2020_SODIUM <dbl>, ## #   HEI2020_ADDEDSUGAR <dbl>, HEI2020_SATFAT <dbl>, SDMVPSU <dbl>, ## #   SDMVSTRA <dbl>, WTDRD1 <dbl> # set up survey design for NHANES data 2017-2018 day 1 NHANES_design_1718_d1 <- svydesign(     ## Masked variance pseudo-PSU     id = ~SDMVPSU,      ## Masked variance pseudo-stratum     strata = ~SDMVSTRA,      ## Dietary day one sample weight     weight = ~WTDRD1,      data = NHANES_20172018_design_d1_HEI2020,      nest = TRUE)   # summarize the weighted results tbl_svysummary(     data=NHANES_design_1718_d1,     statistic = list(all_categorical() ~ \"{n_unweighted} ({p}%)\", all_continuous() ~ \"{mean} ({mean.std.error})\")     ) ################################################## # first day + second day nutrition data # Use the NHANES example data in 2017-2018 using the first day + second day nutrition data HEI2020_NHANES_FPED_unweighted_d1d2 = HEI2020_NHANES_FPED(FPED_PATH=NHANES_20172018$FPED, NUTRIENT_PATH=NHANES_20172018$NUTRIENT, DEMO_PATH=NHANES_20172018$DEMO, FPED_PATH2=NHANES_20172018$FPED2, NUTRIENT_PATH2=NHANES_20172018$NUTRIENT2)  # set up survey design for NHANES data 2017-2018 day 1 and day 2 ## filter out the missing values for the weight variable WTDR2D NHANES_20172018_design_d1d2 = NHANES_20172018$FPED %>%     filter(!is.na(WTDR2D)) %>%     ## select the variables needed for the survey design     select(SEQN, SDMVPSU, SDMVSTRA, WTDR2D)  # Merge the NHANES data with weighting variables with the HEI2020 results NHANES_20172018_design_d1d2_HEI2020 = inner_join(HEI2020_NHANES_FPED_unweighted_d1d2, NHANES_20172018_design_d1d2, by = \"SEQN\") print(NHANES_20172018_design_d1d2_HEI2020) ## # A tibble: 6,318 × 19 ##     SEQN RIDAGEYR HEI2020_ALL HEI2020_TOTALFRT HEI2020_FRT HEI2020_VEG ##    <dbl>    <dbl>       <dbl>            <dbl>       <dbl>       <dbl> ##  1 93704        2        61.7           5            2.5         1.55  ##  2 93705       66        43.0           0.0759       0           3.46  ##  3 93707       13        38.9           0            0           2.09  ##  4 93708       66        49.9           1.22         2.45        3.20  ##  5 93711       56        69.0           3.57         2.85        3.75  ##  6 93712       18        46.4           2.5          2.5         2.42  ##  7 93713       67        55.4           4.84         5           3.47  ##  8 93714       54        36.1           0.321        0.617       1.85  ##  9 93715       71        30.7           0.777        1.55        0.614 ## 10 93716       61        65.0           5            5           4.03  ## # ℹ 6,308 more rows ## # ℹ 13 more variables: HEI2020_GREENNBEAN <dbl>, HEI2020_TOTALPRO <dbl>, ## #   HEI2020_SEAPLANTPRO <dbl>, HEI2020_WHOLEGRAIN <dbl>, HEI2020_DAIRY <dbl>, ## #   HEI2020_FATTYACID <dbl>, HEI2020_REFINEDGRAIN <dbl>, HEI2020_SODIUM <dbl>, ## #   HEI2020_ADDEDSUGAR <dbl>, HEI2020_SATFAT <dbl>, SDMVPSU <dbl>, ## #   SDMVSTRA <dbl>, WTDR2D <dbl> # calculate the weighted results using the survey design NHANES_design_1718_d1d2 <- svydesign(     ## Masked variance pseudo-PSU     id = ~SDMVPSU,      ## Masked variance pseudo-stratum     strata = ~SDMVSTRA,      ## Dietary two-day sample weight     weight = ~WTDR2D,      data = NHANES_20172018_design_d1d2_HEI2020,       nest = TRUE)  # summarize the weighted results tbl_svysummary(     data=NHANES_design_1718_d1d2,     statistic = list(all_categorical() ~ \"{n_unweighted} ({p}%)\", all_continuous() ~ \"{mean} ({mean.std.error})\")     ) # the sequence of DEMO, FPED, NUTRIENT data entry do not matter if you use \"DEMO_PATH\", \"FPED_PATH2\", \"NUTRIENT_PATH2\" to specify the data input"},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dietary-index-is-just-the-first-step--please-include-complex-survey-design-when-analzying-nhanes-data-as-shown-above-","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions: > Calculating HEI2020 for NHANES_MPED (before 2005)","what":"Calculating dietary index is just the first step. Please include complex survey design when analzying NHANES data as shown above.","title":"","text":"","code":"# Use the NHANES example data in 2003-2004 using the first day + second day nutrition data data(\"NHANES_20032004\") HEI2020_NHANES_MPED(MPED_PER_100_GRAM_PATH = NHANES_20032004$MPED_PER_100_GRAM, WJFRT = NHANES_20032004$WJFRT, NUTRIENT_PATH = NHANES_20032004$NUTRIENT, NUTRIENT_IND_PATH = NHANES_20032004$NUTRIENT_IND, DEMO_PATH = NHANES_20032004$DEMO, NUTRIENT_PATH2 = NHANES_20032004$NUTRIENT2, NUTRIENT_IND_PATH2 = NHANES_20032004$NUTRIENT_IND2) ## # A tibble: 7,918 × 17 ##     SEQN TOTALKCAL_HEI2020 RIDAGEYR HEI2020_ALL HEI2020_TOTALFRT HEI2020_FRT ##    <dbl>             <dbl>    <dbl>       <dbl>            <dbl>       <dbl> ##  1 21005             2598.       19        39.0            0.489       0     ##  2 21006             1198        16        37.8            0.738       0     ##  3 21007              943        14        43.0            3.97        1.03  ##  4 21008             2236.       17        28.4            0           0     ##  5 21009             4540.       55        43.4            0.182       0.311 ##  6 21010             1834.       52        53.7            0.406       0.812 ##  7 21012             2786        63        37.5            0           0     ##  8 21013             1420.       13        44.6            2.44        2.5   ##  9 21014             2079         3        49.0            2.5         0.880 ## 10 21015             1638.       83        66.8            3.37        4.87  ## # ℹ 7,908 more rows ## # ℹ 11 more variables: HEI2020_VEG <dbl>, HEI2020_GREENNBEAN <dbl>, ## #   HEI2020_TOTALPRO <dbl>, HEI2020_SEAPLANTPRO <dbl>, ## #   HEI2020_WHOLEGRAIN <dbl>, HEI2020_DAIRY <dbl>, HEI2020_FATTYACID <dbl>, ## #   HEI2020_REFINEDGRAIN <dbl>, HEI2020_SODIUM <dbl>, HEI2020_ADDEDSUGAR <dbl>, ## #   HEI2020_SATFAT <dbl>"},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dietary-index-is-just-the-first-step--please-include-complex-survey-design-when-analzying-nhanes-data-as-shown-above--1","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions: > Calculating HEI2015 for NHANES_FPED (after 2005)","what":"Calculating dietary index is just the first step. Please include complex survey design when analzying NHANES data as shown above.","title":"","text":"","code":"# Using the first day nutrition data FPED_PATH_1 = \"/Users/james/Desktop/fped_dr1tot_1718.sas7bdat\" NUTRIENT_PATH_1 = \"/Users/james/Desktop/DR1TOT_J.XPT\" DEMO_PATH_1 = \"/Users/james/Desktop/DEMO_J.XPT\"  HEI2015_NHANES_FPED(FPED_PATH=FPED_PATH_1, NUTRIENT_PATH=NUTRIENT_PATH_1, DEMO_PATH=DEMO_PATH_1) # Use the NHANES example data in 2017-2018 using the first day + second day nutrition data data(\"NHANES_20172018\") HEI2015_NHANES_FPED(FPED_PATH=NHANES_20172018$FPED, NUTRIENT_PATH=NHANES_20172018$NUTRIENT, DEMO_PATH=NHANES_20172018$DEMO, FPED_PATH2=NHANES_20172018$FPED2, NUTRIENT_PATH2=NHANES_20172018$NUTRIENT2) ## # A tibble: 6,177 × 15 ##     SEQN HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT HEI2015_VEG HEI2015_GREENNBEAN ##    <dbl>       <dbl>            <dbl>       <dbl>       <dbl>              <dbl> ##  1 93704        61.7           5            2.5         1.55                0    ##  2 93705        43.0           0.0759       0           3.46                4.83 ##  3 93707        38.9           0            0           2.09                0    ##  4 93708        49.9           1.22         2.45        3.20                0    ##  5 93711        69.0           3.57         2.85        3.75                4.27 ##  6 93712        46.4           2.5          2.5         2.42                2.5  ##  7 93713        55.4           4.84         5           3.47                1.13 ##  8 93714        36.1           0.321        0.617       1.85                0    ##  9 93715        30.7           0.777        1.55        0.614               0    ## 10 93716        65.0           5            5           4.03                4.73 ## # ℹ 6,167 more rows ## # ℹ 9 more variables: HEI2015_TOTALPRO <dbl>, HEI2015_SEAPLANTPRO <dbl>, ## #   HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, HEI2015_FATTYACID <dbl>, ## #   HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, HEI2015_ADDEDSUGAR <dbl>, ## #   HEI2015_SATFAT <dbl>"},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dietary-index-is-just-the-first-step--please-include-complex-survey-design-when-analzying-nhanes-data-as-shown-above--2","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions: > Calculating HEI2015 for NHANES_MPED (betweeen 1999-2004)","what":"Calculating dietary index is just the first step. Please include complex survey design when analzying NHANES data as shown above.","title":"","text":"","code":"data(\"NHANES_20032004\") HEI2015_NHANES_MPED(MPED_PER_100_GRAM_PATH = NHANES_20032004$MPED_PER_100_GRAM, WJFRT = NHANES_20032004$WJFRT, NUTRIENT_PATH = NHANES_20032004$NUTRIENT, NUTRIENT_IND_PATH = NHANES_20032004$NUTRIENT_IND, DEMO_PATH = NHANES_20032004$DEMO, NUTRIENT_PATH2 = NHANES_20032004$NUTRIENT2, NUTRIENT_IND_PATH2 = NHANES_20032004$NUTRIENT_IND2) ## # A tibble: 7,650 × 16 ##     SEQN TOTALKCAL_HEI2015 HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT HEI2015_VEG ##    <dbl>             <dbl>       <dbl>            <dbl>       <dbl>       <dbl> ##  1 21005             2598.        53.7            0.489       0            2.28 ##  2 21006             1198         46.3            0.738       0            3.95 ##  3 21007              943         42.5            3.97        1.03         3.15 ##  4 21008             2236.        45.8            0           0            2.37 ##  5 21009             4540.        59.3            0.182       0.311        3.01 ##  6 21010             1834.        59.4            0.406       0.812        4.10 ##  7 21012             2786         54.0            0           0            2.89 ##  8 21013             1420.        50.6            2.44        2.5          2.52 ##  9 21014             2079         63.4            2.5         0.880        4.25 ## 10 21015             1638.        73.7            3.37        4.87         3.42 ## # ℹ 7,640 more rows ## # ℹ 10 more variables: HEI2015_GREENNBEAN <dbl>, HEI2015_TOTALPRO <dbl>, ## #   HEI2015_SEAPLANTPRO <dbl>, HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, ## #   HEI2015_FATTYACID <dbl>, HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, ## #   HEI2015_ADDEDSUGAR <dbl>, HEI2015_SATFAT <dbl>"},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dietary-index-is-just-the-first-step--please-include-complex-survey-design-when-analzying-nhanes-data-as-shown-above--3","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions: > Calculating AHEI for NHANES_FPED (after 2005)","what":"Calculating dietary index is just the first step. Please include complex survey design when analzying NHANES data as shown above.","title":"","text":"","code":"FPED_IND_PATH = \"/Users/james/Desktop/data/fped_dr1iff.sas7bdat\" NUTRIENT_IND_PATH = \"/Users/james/Desktop/data/DR1IFF_J\"  AHEI_NHANES_FPED(FPED_IND_PATH, NUTRIENT_IND_PATH) # Use the NHANES example data in 2017-2018 using the first day + second day nutrition data data(\"NHANES_20172018\") AHEI_NHANES_FPED(NHANES_20172018$FPED_IND, NHANES_20172018$NUTRIENT_IND, NHANES_20172018$FPED_IND2, NHANES_20172018$NUTRIENT_IND2) ## Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. ## Trans fat is not avaiable for NHANES, so it is not included in the AHEI score. ## # A tibble: 6,490 × 13 ##     SEQN AHEI_ALL AHEI_NOETOH AHEI_VEG AHEI_FRT AHEI_WGRAIN AHEI_NUTSLEG ##    <dbl>    <dbl>       <dbl>    <dbl>    <dbl>       <dbl>        <dbl> ##  1 93704     43.8        42.6     0.22    1.34        1.13          0    ##  2 93705     39.9        38.6     3.05    0           0            10    ##  3 93707     33.6        32.4     1.42    0           6.42          0.35 ##  4 93708     49.1        47.9     5.18    0.612       0.643         5    ##  5 93710     44.2        42.9     0.43    2.11        2.83          1.25 ##  6 93711     53.3        48.5     6.75    1.62        3.97         10    ##  7 93712     26.4        25.2     3.5     2.28        2.69          5    ##  8 93713     38.8        37.6     6.08    4.61        0.961         1.85 ##  9 93714     34.8        33.6     0.04    0.25        4.99          0    ## 10 93715     20.1        18.9     0.44    0.4         0             0    ## # ℹ 6,480 more rows ## # ℹ 6 more variables: AHEI_N3FAT <dbl>, AHEI_PUFA <dbl>, AHEI_SSB_FRTJ <dbl>, ## #   AHEI_REDPROC_MEAT <dbl>, AHEI_SODIUM <dbl>, AHEI_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-ahei-for-nhanes_mped-1999-2004","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating AHEI for NHANES_MPED (1999-2004)","title":"","text":"","code":"# Use the NHANES example data in 2003-2004 using the first day + second day nutrition data data(\"NHANES_20032004\") AHEI_NHANES_MPED(MPED_PER_100_GRAM_PATH = NHANES_20032004$MPED_PER_100_GRAM, WJFRT = NHANES_20032004$WJFRT, NUTRIENT_PATH = NHANES_20032004$NUTRIENT, NUTRIENT_IND_PATH = NHANES_20032004$NUTRIENT_IND, DEMO_PATH = NHANES_20032004$DEMO, NUTRIENT_PATH2 = NHANES_20032004$NUTRIENT2, NUTRIENT_IND_PATH2 = NHANES_20032004$NUTRIENT_IND2) ## [1] \"Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used.\" ## # A tibble: 7,650 × 13 ##     SEQN AHEI_ALL AHEI_NOETOH AHEI_VEG AHEI_FRT AHEI_WGRAIN AHEI_NUTSLEG ##    <dbl>    <dbl>       <dbl>    <dbl>    <dbl>       <dbl>        <dbl> ##  1 21005     25.9        23.4    1.79     0          5            2.07   ##  2 21006     24.4        21.9    0.761    0          1.21         1.48   ##  3 21007     26.0        23.5    3.09     0.154      0            0      ##  4 21008     21.3        18.8    4.71     0          2.31         0.0363 ##  5 21009     37.1        34.6    3.29     0.277      0.0156       0.458  ##  6 21010     30.8        28.3    1.27     0.353      0            5.59   ##  7 21012     23.5        20.1    2.60     0          1.44         5.06   ##  8 21013     20.9        18.4    1.30     0.653      0            0.0617 ##  9 21014     41.5        39.0    4.83     0.445      1.06         5.03   ## 10 21015     46.3        43.8    3.04     2.11       3.38         5.03   ## # ℹ 7,640 more rows ## # ℹ 6 more variables: AHEI_N3FAT <dbl>, AHEI_PUFA <dbl>, AHEI_SSB_FRTJ <dbl>, ## #   AHEI_REDPROC_MEAT <dbl>, AHEI_SODIUM <dbl>, AHEI_ALCOHOL <dbl>"},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dietary-index-is-just-the-first-step--please-include-complex-survey-design-when-analzying-nhanes-data-as-shown-above--4","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions: > Calculating aMED for NHANES_FPED (after 2005)","what":"Calculating dietary index is just the first step. Please include complex survey design when analzying NHANES data as shown above.","title":"","text":"","code":"FPED_PATH = \"/Users/james/Desktop/fped_dr1tot_1718.sas7bdat\" NUTRIENT_PATH = \"/Users/james/Desktop/DR1TOT_J.XPT\" DEMO_PATH = \"/Users/james/Desktop/DEMO_J.XPT\"  MED_NHANES_FPED(FPED_PATH, NUTRIENT_PATH, DEMO_PATH) # Use the NHANES example data in 2017-2018 using the first day + second day nutrition data data(\"NHANES_20172018\") MED_NHANES_FPED(FPED_PATH=NHANES_20172018$FPED, NUTRIENT_PATH=NHANES_20172018$NUTRIENT, DEMO_PATH=NHANES_20172018$DEMO, FPED_PATH2=NHANES_20172018$FPED2, NUTRIENT_PATH2=NHANES_20172018$NUTRIENT2) ## Reminder: this MED index uses medians to rank participants' food/drink serving sizes and then calculate MED component scores, which may generate results that are specific to your study population but not comparable to other populations. ## # A tibble: 6,174 × 12 ##     SEQN MED_ALL MED_NOETOH MED_FRT MED_VEG MED_WGRAIN MED_LEGUMES MED_NUTS ##    <dbl>   <dbl>      <dbl>   <dbl>   <dbl>      <dbl>       <dbl>    <dbl> ##  1 93704     3.5        3.5     1       0          0.5         0        0   ##  2 93705     3.5        3.5     0       0.5        0           1        0.5 ##  3 93707     2.5        2.5     0       0.5        1           0.5      0   ##  4 93708     3.5        3.5     0.5     0.5        0.5         0        0.5 ##  5 93711     5.5        5.5     1       1          0.5         1        1   ##  6 93712     3          3       0.5     1          0.5         0.5      0   ##  7 93713     3.5        3.5     1       1          0.5         0.5      0   ##  8 93714     1.5        1.5     0       0          0.5         0        0   ##  9 93715     0.5        0.5     0       0          0           0        0   ## 10 93716     6          6       1       1          0.5         1        1   ## # ℹ 6,164 more rows ## # ℹ 4 more variables: MED_FISH <dbl>, MED_REDPROC_MEAT <dbl>, ## #   MED_MONSATFAT <dbl>, MED_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-amed-for-nhanes_mped-1999-2004","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating aMED for NHANES_MPED (1999-2004)","title":"","text":"","code":"# Use the NHANES example data in 2003-2004 using the first day + second day nutrition data data(\"NHANES_20032004\") MED_NHANES_MPED(MPED_PER_100_GRAM_PATH = NHANES_20032004$MPED_PER_100_GRAM, WJFRT = NHANES_20032004$WJFRT, NUTRIENT_PATH = NHANES_20032004$NUTRIENT, NUTRIENT_IND_PATH = NHANES_20032004$NUTRIENT_IND, DEMO_PATH = NHANES_20032004$DEMO, NUTRIENT_PATH2 = NHANES_20032004$NUTRIENT2, NUTRIENT_IND_PATH2 = NHANES_20032004$NUTRIENT_IND2) ## Reminder: this MED index uses medians to rank participants' food/drink serving sizes and then calculate MED component scores, which may generate results that are specific to your study population but not comparable to other populations. ## # A tibble: 7,647 × 12 ##     SEQN MED_ALL MED_NOETOH MED_FRT MED_VEG MED_WGRAIN MED_LEGUMES MED_NUTS ##    <dbl>   <dbl>      <dbl>   <dbl>   <dbl>      <dbl>       <dbl>    <dbl> ##  1 21005     2          2       0       0.5        0.5         0        0.5 ##  2 21006     3.5        3.5     0       0          0.5         0.5      0.5 ##  3 21007     2.5        2.5     0       0.5        0           0        0   ##  4 21008     3.5        3.5     0       1          0.5         1        0   ##  5 21009     4          4       0       0.5        0.5         0.5      0   ##  6 21010     2          1.5     0       0          0           1        0   ##  7 21012     3          3       0       0.5        0.5         1        0   ##  8 21013     2.5        2.5     0       0          0           0.5      0.5 ##  9 21014     5          5       0.5     1          0.5         1        0.5 ## 10 21015     4.5        4.5     0.5     0.5        1           1        0.5 ## # ℹ 7,637 more rows ## # ℹ 4 more variables: MED_FISH <dbl>, MED_REDPROC_MEAT <dbl>, ## #   MED_MONSATFAT <dbl>, MED_ALCOHOL <dbl>"},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dietary-index-is-just-the-first-step--please-include-complex-survey-design-when-analzying-nhanes-data-as-shown-above--5","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions: > Calculating MEDI for NHANES_FPED (after 2005)","what":"Calculating dietary index is just the first step. Please include complex survey design when analzying NHANES data as shown above.","title":"","text":"","code":"FPED_IND_PATH = \"/Users/james/Desktop/data/fped_dr1iff.sas7bdat\" NUTRIENT_IND_PATH = \"/Users/james/Desktop/data/DR1IFF_J\"  MEDI_NHANES_FPED(FPED_IND_PATH, NUTRIENT_IND_PATH) # Use the NHANES example data in 2017-2018 using the first day + second day nutrition data data(\"NHANES_20172018\") MEDI_NHANES_FPED(FPED_IND_PATH=NHANES_20172018$FPED_IND, NUTRIENT_IND_PATH=NHANES_20172018$NUTRIENT_IND, FPED_IND_PATH2=NHANES_20172018$FPED_IND2, NUTRIENT_IND_PATH2=NHANES_20172018$NUTRIENT_IND2) ## Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. ## Since no SWEETS code is provided, the default SSB code from 17-18 FNDDS file is used ## Since no FAT_OIL code is provided, the default FAT_OIL code from 17-18 FNDDS file is used ## Since no OLIVE_OIL code is provided, the default OLIVE_OIL code from 17-18 FNDDS file is used ## # A tibble: 6,490 × 14 ##     SEQN MEDI_ALL MEDI_NOETOH MEDI_OLIVE_OIL MEDI_FRT MEDI_VEG MEDI_LEGUMES ##    <dbl>    <dbl>       <dbl>          <dbl>    <dbl>    <dbl>        <dbl> ##  1 93704      3           3                0        0      0            0   ##  2 93705      3.5         3.5              0        0      0            1   ##  3 93707      2           2                0        0      0            0   ##  4 93708      3.5         3.5              0        0      0.5          0   ##  5 93710      3           3                0        0      0            0   ##  6 93711      5           4.5              0        0      0.5          1   ##  7 93712      3           3                0        0      0            0.5 ##  8 93713      2.5         2.5              0        0      0.5          0   ##  9 93714      3           3                0        0      0            0   ## 10 93715      3           3                0        0      0            0   ## # ℹ 6,480 more rows ## # ℹ 7 more variables: MEDI_NUTS <dbl>, MEDI_FISH <dbl>, MEDI_ALCOHOL <dbl>, ## #   MEDI_SSB <dbl>, MEDI_SWEETS <dbl>, MEDI_DISCRET_FAT <dbl>, ## #   MEDI_REDPROC_MEAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-medi-for-nhanes_mped-1999-2004","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating MEDI for NHANES_MPED (1999-2004)","title":"","text":"","code":"# Use the NHANES example data in 2003-2004 using the first day + second day nutrition data data(\"NHANES_20032004\") MEDI_NHANES_MPED(MPED_PER_100_GRAM_PATH = NHANES_20032004$MPED_PER_100_GRAM, WJFRT = NHANES_20032004$WJFRT, NUTRIENT_PATH = NHANES_20032004$NUTRIENT, NUTRIENT_IND_PATH = NHANES_20032004$NUTRIENT_IND, DEMO_PATH = NHANES_20032004$DEMO, NUTRIENT_PATH2 = NHANES_20032004$NUTRIENT2, NUTRIENT_IND_PATH2 = NHANES_20032004$NUTRIENT_IND2) ## Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. ## Since no SWEETS code is provided, the default SSB code from 17-18 FNDDS file is used ## Since no FAT_OIL code is provided, the default FAT_OIL code from 17-18 FNDDS file is used ## Since no OLIVE_OIL code is provided, the default OLIVE_OIL code from 17-18 FNDDS file is used ## # A tibble: 7,650 × 14 ##     SEQN MEDI_ALL MEDI_NOETOH MEDI_OLIVE_OIL MEDI_FRT MEDI_VEG MEDI_LEGUMES ##    <dbl>    <dbl>       <dbl>          <dbl>    <dbl>    <dbl>        <dbl> ##  1 21005      1.5         1.5              0        0        0          0   ##  2 21006      3.5         3.5              0        0        0          0   ##  3 21007      2           2                0        0        0          0   ##  4 21008      2.5         2.5              0        0        0          0   ##  5 21009      2.5         2.5              0        0        0          0   ##  6 21010      4           3                0        0        0          0.5 ##  7 21012      2.5         1.5              0        0        0          0.5 ##  8 21013      1.5         1.5              0        0        0          0   ##  9 21014      4           4                0        0        0          0.5 ## 10 21015      3           3                0        0        0          0   ## # ℹ 7,640 more rows ## # ℹ 7 more variables: MEDI_NUTS <dbl>, MEDI_FISH <dbl>, MEDI_ALCOHOL <dbl>, ## #   MEDI_SSB <dbl>, MEDI_SWEETS <dbl>, MEDI_DISCRET_FAT <dbl>, ## #   MEDI_REDPROC_MEAT <dbl>"},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dietary-index-is-just-the-first-step--please-include-complex-survey-design-when-analzying-nhanes-data-as-shown-above--6","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions: > Calculating DASH for NHANES_FPED (after 2005)","what":"Calculating dietary index is just the first step. Please include complex survey design when analzying NHANES data as shown above.","title":"","text":"","code":"FPED_IND_PATH = \"/Users/james/Desktop/data/fped_dr1iff.sas7bdat\" NUTRIENT_IND_PATH = \"/Users/james/Desktop/data/DR1IFF_J\"  DASH_NHANES_FPED(FPED_IND_PATH, NUTRIENT_IND_PATH) # Use the NHANES example data in 2017-2018 using the first day + second day nutrition data data(\"NHANES_20172018\") DASH_NHANES_FPED(NHANES_20172018$FPED_IND, NHANES_20172018$NUTRIENT_IND, NHANES_20172018$FPED_IND2, NHANES_20172018$NUTRIENT_IND2) ## Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. ## Since no skim milk code is provided, the default skim milk code from 17-18 FNDDS file is used. ## Since no low-fat cheese code is provided, the default low-fat cheese code from 17-18 FNDDS file is used. ## Reminder: this DASH index uses quintiles to rank participants' food/drink serving sizes and then calculate DASH component scores, which may generate results that are specific to your study population but not comparable to other populations. ## # A tibble: 6,490 × 10 ##     SEQN DASH_ALL DASH_FRT DASH_VEG DASH_NUTSLEG DASH_WGRAIN DASH_LOWF_DAIRY ##    <dbl>    <dbl>    <dbl>    <dbl>        <dbl>       <dbl>           <dbl> ##  1 93704     23.5      4.5      1            1           2.5               1 ##  2 93705     18.5      1.5      3            4           1                 1 ##  3 93707     20        1        2            2           4.5               1 ##  4 93708     23        2        3.5          3           2                 1 ##  5 93710     25.5      3.5      1.5          2.5         3.5               1 ##  6 93711     31        4.5      4.5          5           3                 5 ##  7 93712     18        3        3.5          3           3                 1 ##  8 93713     24.5      4.5      4.5          2.5         2.5               1 ##  9 93714     17.5      2.5      1            1           3                 3 ## 10 93715     14.5      2        1.5          1           1                 1 ## # ℹ 6,480 more rows ## # ℹ 3 more variables: DASH_SODIUM <dbl>, DASH_REDPROC_MEAT <dbl>, ## #   DASH_SSB_FRTJ <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dash-for-nhanes_mped-1999-2004","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating DASH for NHANES_MPED (1999-2004)","title":"","text":"","code":"# Use the NHANES example data in 1999-2004 using the first day + second day nutrition data data(\"NHANES_20032004\") DASH_NHANES_MPED(MPED_PER_100_GRAM_PATH = NHANES_20032004$MPED_PER_100_GRAM, WJFRT = NHANES_20032004$WJFRT, NUTRIENT_PATH = NHANES_20032004$NUTRIENT, NUTRIENT_IND_PATH = NHANES_20032004$NUTRIENT_IND, DEMO_PATH = NHANES_20032004$DEMO, NUTRIENT_PATH2 = NHANES_20032004$NUTRIENT2, NUTRIENT_IND_PATH2 = NHANES_20032004$NUTRIENT_IND2) ## Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. ## Since no skim milk code is provided, the default skim milk code from 17-18 FNDDS file is used. ## Since no low-fat cheese code is provided, the default low-fat cheese code from 17-18 FNDDS file is used. ## Reminder: this DASH index uses quintiles to rank participants' food/drink serving sizes and then calculate DASH component scores, which may generate results that are specific to your study population but not comparable to other populations. ## # A tibble: 7,650 × 10 ##     SEQN DASH_ALL DASH_FRT DASH_VEG DASH_NUTSLEG DASH_WGRAIN DASH_LOWF_DAIRY ##    <dbl>    <dbl>    <dbl>    <dbl>        <dbl>       <dbl>           <dbl> ##  1 21005     15.5      2        2            2.5         3                 1 ##  2 21006     18        2        2            2.5         2.5               1 ##  3 21007     18        3        3            1           1                 1 ##  4 21008     17.5      1        3.5          2.5         3                 1 ##  5 21009     19.5      2        3            2           2                 1 ##  6 21010     18        1.5      2            4           1                 1 ##  7 21012     17.5      1        3            4           2.5               1 ##  8 21013     16        2.5      2            2           1                 1 ##  9 21014     25.5      3        4            4           2.5               1 ## 10 21015     27.5      3        3            4           4.5               1 ## # ℹ 7,640 more rows ## # ℹ 3 more variables: DASH_SODIUM <dbl>, DASH_REDPROC_MEAT <dbl>, ## #   DASH_SSB_FRTJ <dbl>"},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dietary-index-is-just-the-first-step--please-include-complex-survey-design-when-analzying-nhanes-data-as-shown-above--7","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions: > Calculating DASHI for NHANES_FPED (after 2005)","what":"Calculating dietary index is just the first step. Please include complex survey design when analzying NHANES data as shown above.","title":"","text":"","code":"FPED_IND_PATH = \"/Users/james/Desktop/data/fped_dr1iff.sas7bdat\" NUTRIENT_IND_PATH = \"/Users/james/Desktop/data/DR1IFF_J\"  DASHI_NHANES_FPED(FPED_IND_PATH, NUTRIENT_IND_PATH) # Use the NHANES example data in 2017-2018 using the first day + second day nutrition data data(\"NHANES_20172018\") DASHI_NHANES_FPED(NUTRIENT_PATH = NHANES_20172018$NUTRIENT, NUTRIENT_PATH2 = NHANES_20172018$NUTRIENT2) ## # A tibble: 6,491 × 11 ##     SEQN DASHI_ALL DASHI_TOTAL_FAT DASHI_SAT_FAT DASHI_CHOLESTEROL DASHI_SODIUM ##    <dbl>     <dbl>           <dbl>         <dbl>             <dbl>        <dbl> ##  1 93704      4.72          0.768         0.840              0.680       0.5    ##  2 93705      2.49          0             0.472              0.5         0      ##  3 93707      1.15          0             0.0199             0           0.0844 ##  4 93708      2.80          0             0.173              0.5         0      ##  5 93710      4.21          0.653         0.490              0.5         0.5    ##  6 93711      3.62          0.0920        0.490              0.312       0.5    ##  7 93712      3.89          0.844         0.640              0.629       0      ##  8 93713      3.79          0.5           0.428              0.889       0.772  ##  9 93714      1.68          0             0                  0           0      ## 10 93715      1.82          0             0.239              0.162       0.5    ## # ℹ 6,481 more rows ## # ℹ 5 more variables: DASHI_PROTEIN <dbl>, DASHI_FIBER <dbl>, ## #   DASHI_POTASSIUM <dbl>, DASHI_MAGNESIUM <dbl>, DASHI_CALCIUM <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dashi-for-nhanes_fped-1999-2004","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating DASHI for NHANES_FPED (1999-2004)","title":"","text":"","code":"# Use the NHANES example data in 1999-2004 using the first day + second day nutrition data data(\"NHANES_20032004\") DASHI_NHANES_MPED(MPED_PER_100_GRAM_PATH = NHANES_20032004$MPED_PER_100_GRAM, WJFRT = NHANES_20032004$WJFRT, NUTRIENT_PATH = NHANES_20032004$NUTRIENT, NUTRIENT_IND_PATH = NHANES_20032004$NUTRIENT_IND, DEMO_PATH = NHANES_20032004$DEMO, NUTRIENT_PATH2 = NHANES_20032004$NUTRIENT2, NUTRIENT_IND_PATH2 = NHANES_20032004$NUTRIENT_IND2) ## # A tibble: 7,650 × 11 ##     SEQN DASHI_ALL DASHI_TOTAL_FAT DASHI_SAT_FAT DASHI_CHOLESTEROL DASHI_SODIUM ##    <dbl>     <dbl>           <dbl>         <dbl>             <dbl>        <dbl> ##  1 21005      2.28           0.321         0.585             0.550        0     ##  2 21006      2.53           0.591         0.577             0.5          0     ##  3 21007      2.97           0.5           0.546             0.5          0.300 ##  4 21008      1.54           0.185         0.313             0.381        0     ##  5 21009      1.73           0             0.454             0.294        0.5   ##  6 21010      4.92           0.812         0.435             0.781        1     ##  7 21012      1.30           0.113         0.388             0            0     ##  8 21013      2.94           0.410         0.614             0.968        0.672 ##  9 21014      5.17           0.725         0.373             0.742        0     ## 10 21015      4.84           0.373         0.394             0.661        0.677 ## # ℹ 7,640 more rows ## # ℹ 5 more variables: DASHI_PROTEIN <dbl>, DASHI_FIBER <dbl>, ## #   DASHI_POTASSIUM <dbl>, DASHI_MAGNESIUM <dbl>, DASHI_CALCIUM <dbl>"},{"path":[]},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"this-function-was-improved-by-zhe-xu-zxucmu-edu-cn-to-include-the-other-dii-ingredients-including-garlic-ginger-onion-pepper-thymeoregano-and-other-flavonoids-in-the-calculation-","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"This function was improved by Zhe Xu (zxu@cmu.edu.cn) to include the other DII ingredients, including Garlic, Ginger, Onion, Pepper, Thyme/oregano, and other Flavonoids, in the calculation.","title":"","text":"","code":"FPED_PATH = \"/Users/james/Desktop/fped_dr1tot_1718.sas7bdat\" NUTRIENT_PATH = \"/Users/james/Desktop/DR1TOT_J.XPT\" DEMO_PATH = \"/Users/james/Desktop/DEMO_J.XPT\"  DII_NHANES_FPED(FPED_PATH, NUTRIENT_PATH, DEMO_PATH) # Use the NHANES example data in 2017-2018 using the first day + second day nutrition data data(\"NHANES_20172018\") data(\"DII_OTHER_INGREDIENTS_day1\") data(\"DII_OTHER_INGREDIENTS_day2\") DII_NHANES_FPED(FPED_PATH = NHANES_20172018$FPED, NUTRIENT_PATH = NHANES_20172018$NUTRIENT, DEMO_PATH = NHANES_20172018$DEMO, FPED_PATH2 = NHANES_20172018$FPED2, NUTRIENT_PATH2 = NHANES_20172018$NUTRIENT2, OTHER_INGREDIENTS1 = DII_OTHER_INGREDIENTS_day1, OTHER_INGREDIENTS2 = DII_OTHER_INGREDIENTS_day2) ## VITD is included in the calculation in the first day of NHANES data. ## VITD is included in the calculation in the second day of NHANES data. ## Reminder: This function does not use all the original DII variables. Eugenol, trans fat, turmeric, Green/black tea, Rosemary are not included. ## Day 1 and Day 2 data are used for the calculation. ## Note: Flavonoid data is only available for NHANES 2007-2010 and 2017-2018. ## # A tibble: 6,174 × 42 ##     SEQN DII_ALL DII_NOETOH    ALCOHOL  VITB12    VITB6 BCAROTENE CAFFEINE ##    <dbl>   <dbl>      <dbl>      <dbl>   <dbl>    <dbl>     <dbl>    <dbl> ##  1 93704   5.81       5.53   0.278     -0.0263  0.0738      0.560   0.0849 ##  2 93705   5.35       5.07   0.278     -0.0942  0.305       0.223   0.0833 ##  3 93707   6.31       6.03   0.278     -0.0427  0.0267      0.564   0.0849 ##  4 93708   5.81       5.53   0.278     -0.0721  0.216       0.451   0.0849 ##  5 93711  -0.139     -0.139 -0.0000238 -0.0578 -0.185       0.223   0.0828 ##  6 93712   2.90       2.62   0.278      0.0207 -0.329       0.534   0.0845 ##  7 93713   2.13       1.85   0.278     -0.0477 -0.140       0.274   0.0826 ##  8 93714   5.95       5.67   0.278     -0.0601  0.00904     0.561   0.0846 ##  9 93715   7.07       6.79   0.278     -0.0745  0.309       0.562   0.0824 ## 10 93716   0.662      0.384  0.278      0.0245 -0.357      -0.237   0.0844 ## # ℹ 6,164 more rows ## # ℹ 34 more variables: CARB <dbl>, CHOLES <dbl>, KCAL <dbl>, TOTALFAT <dbl>, ## #   FIBER <dbl>, FOLICACID <dbl>, IRON <dbl>, MG <dbl>, MUFA <dbl>, ## #   NIACIN <dbl>, N3FAT <dbl>, N6FAT <dbl>, PROTEIN <dbl>, PUFA <dbl>, ## #   RIBOFLAVIN <dbl>, SATFAT <dbl>, SE <dbl>, THIAMIN <dbl>, VITA <dbl>, ## #   VITC <dbl>, VITE <dbl>, ZN <dbl>, VITD <dbl>, GARLIC <dbl>, GINGER <dbl>, ## #   ONION <dbl>, FLA3OL <dbl>, FLAVONES <dbl>, FLAVONOLS <dbl>, …"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dii-for-nhanes_mped-1999-2004","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating DII for NHANES_MPED (1999-2004)","title":"","text":"","code":"# Use the NHANES example data in 2003-2004 using the first day + second day nutrition data data(\"NHANES_20032004\") data(\"DII_OTHER_INGREDIENTS_day1\") data(\"DII_OTHER_INGREDIENTS_day2\") DII_NHANES_MPED(MPED_PER_100_GRAM_PATH = NHANES_20032004$MPED_PER_100_GRAM, WJFRT = NHANES_20032004$WJFRT, NUTRIENT_PATH = NHANES_20032004$NUTRIENT, NUTRIENT_IND_PATH = NHANES_20032004$NUTRIENT_IND, DEMO_PATH = NHANES_20032004$DEMO, NUTRIENT_PATH2 = NHANES_20032004$NUTRIENT2, NUTRIENT_IND_PATH2 = NHANES_20032004$NUTRIENT_IND2, OTHER_INGREDIENTS1 = DII_OTHER_INGREDIENTS_day1, OTHER_INGREDIENTS2 = DII_OTHER_INGREDIENTS_day2) ## VITD is not included in the calculation in the first day of NHANES data. ## It is normal to see warnings if you do not provide all arguments using DII. The algorithm will only count the arguments you enter to calculate the DII. All warnings are about the first column you don't use. For example, if you only entered alcohol, vitamin b12, and vitamin b6, all warnings would remind you that bcarotene is not found. ## VITD is not included in the calculation in the first day of NHANES data. ## It is normal to see warnings if you do not provide all arguments using DII. The algorithm will only count the arguments you enter to calculate the DII. All warnings are about the first column you don't use. For example, if you only entered alcohol, vitamin b12, and vitamin b6, all warnings would remind you that bcarotene is not found. ## Reminder: This function does not use all the original DII variables. Eugenol, trans fat, turmeric, Green/black tea, Rosemary are not included. ## Day 1 and Day 2 data are used for the calculation. ## Note: Flavonoid data is only available for NHANES 2007-2010 and 2017-2018. ## # A tibble: 7,650 × 48 ##     SEQN DII_ALL DII_NOETOH ALCOHOL_DII VITB12_DII VITB6_DII BCAROTENE_DII ##    <dbl>   <dbl>      <dbl>       <dbl>      <dbl>     <dbl>         <dbl> ##  1 21005    2.68      2.40        0.278    -0.0305   -0.107          0.555 ##  2 21006    4.76      4.48        0.278    -0.0868    0.224          0.563 ##  3 21007    4.82      4.54        0.278    -0.0904    0.277          0.540 ##  4 21008    4.28      4.00        0.278    -0.0383    0.150          0.537 ##  5 21009    1.21      0.937       0.278     0.0337   -0.293          0.528 ##  6 21010    3.34      3.61       -0.274    -0.0499    0.0303         0.563 ##  7 21012    3.23      3.51       -0.278     0.0360   -0.194          0.549 ##  8 21013    4.57      4.29        0.278    -0.0565    0.150          0.559 ##  9 21014    1.93      1.65        0.278     0.0706   -0.204          0.524 ## 10 21015    2.39      2.11        0.278    -0.0551   -0.0627         0.134 ## # ℹ 7,640 more rows ## # ℹ 41 more variables: CAFFEINE_DII <dbl>, CARB_DII <dbl>, CHOLES_DII <dbl>, ## #   KCAL_DII <dbl>, EUGENOL_DII <dbl>, TOTALFAT_DII <dbl>, FIBER_DII <dbl>, ## #   FOLICACID_DII <dbl>, GARLIC_DII <dbl>, GINGER_DII <dbl>, IRON_DII <dbl>, ## #   MG_DII <dbl>, MUFA_DII <dbl>, NIACIN_DII <dbl>, N3FAT_DII <dbl>, ## #   N6FAT_DII <dbl>, ONION_DII <dbl>, PROTEIN_DII <dbl>, PUFA_DII <dbl>, ## #   RIBOFLAVIN_DII <dbl>, SAFFRON_DII <dbl>, SATFAT_DII <dbl>, SE_DII <dbl>, …"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-hei2020-for-asa24","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating HEI2020 for ASA24","title":"","text":"","code":"DATA_PATH = \"/Users/james/Desktop/data/Totals.csv\" # if you want to summarize all recalls into a result via average HEI2020_ASA24(DATA_PATH, RECALL_SUMMARIZE = TRUE) # if you want to use all individual recalls HEI2020_ASA24(DATA_PATH, RECALL_SUMMARIZE = FALSE) #Use the example data data(\"ASA24_exp\") HEI2015_ASA24(ASA24_exp, RECALL_SUMMARIZE = TRUE) ## RECALL_SUMMARIZE = TRUE, summarizing HEI2015 for ASA24 data by averaging over all possible recalls per person per day... ## # A tibble: 21 × 17 ## # Groups:   UserName, UserID [21] ##    UserName UserID            TOTALKCAL HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT ##       <dbl> <chr>                 <dbl>       <dbl>            <dbl>       <dbl> ##  1        1 e6541891-8a22-49…     1514.        69.8             1.26        2.45 ##  2        2 dbb278b0-b589-44…      935.        52.8             5           0    ##  3        3 f0115426-e6f8-4c…     1655.        51.2             5           5    ##  4        4 337d84a7-3bff-48…     1571.        47.5             0           0    ##  5        5 998f098a-8584-49…      907.        45.2             0           0    ##  6        6 aae330db-8f22-4d…     1271.        52.9             3.78        5    ##  7        7 76e0f3e1-8e17-49…     2662.        48.4             1.51        2.23 ##  8        8 24de994f-e06a-41…     2039.        69.0             2.76        5    ##  9        9 8f61ae64-6a82-4f…     1469.        70.9             5           5    ## 10       10 b47ab1b8-e62b-4b…     1636.        61.2             2.64        0    ## # ℹ 11 more rows ## # ℹ 11 more variables: HEI2015_VEG <dbl>, HEI2015_GREENNBEAN <dbl>, ## #   HEI2015_TOTALPRO <dbl>, HEI2015_SEAPLANTPRO <dbl>, ## #   HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, HEI2015_FATTYACID <dbl>, ## #   HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, HEI2015_ADDEDSUGAR <dbl>, ## #   HEI2015_SATFAT <dbl> HEI2015_ASA24(ASA24_exp, RECALL_SUMMARIZE = FALSE) ## RECALL_SUMMARIZE is FALSE, skipping summarization step... ## # A tibble: 42 × 17 ##    UserName UserID            TOTALKCAL HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT ##       <dbl> <chr>                 <dbl>       <dbl>            <dbl>       <dbl> ##  1        1 e6541891-8a22-49…     2019.        69.8             1.26        2.45 ##  2        1 e6541891-8a22-49…     1010.        69.8             1.26        2.45 ##  3        2 dbb278b0-b589-44…     1247.        52.8             5           0    ##  4        2 dbb278b0-b589-44…      623.        52.8             5           0    ##  5        3 f0115426-e6f8-4c…     2206.        51.2             5           5    ##  6        3 f0115426-e6f8-4c…     1103.        51.2             5           5    ##  7        4 337d84a7-3bff-48…     2095.        47.5             0           0    ##  8        4 337d84a7-3bff-48…     1047.        47.5             0           0    ##  9        5 998f098a-8584-49…     1209.        45.2             0           0    ## 10        5 998f098a-8584-49…      605.        45.2             0           0    ## # ℹ 32 more rows ## # ℹ 11 more variables: HEI2015_VEG <dbl>, HEI2015_GREENNBEAN <dbl>, ## #   HEI2015_TOTALPRO <dbl>, HEI2015_SEAPLANTPRO <dbl>, ## #   HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, HEI2015_FATTYACID <dbl>, ## #   HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, HEI2015_ADDEDSUGAR <dbl>, ## #   HEI2015_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-hei2020_toddlers-for-asa24","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating HEI2020_toddlers for ASA24","title":"","text":"","code":"DATA_PATH = \"/Users/james/Desktop/data/Totals.csv\" # if you want to summarize all recalls into a result via average HEI2020_TODDLERS_ASA24(DATA_PATH, RECALL_SUMMARIZE = TRUE) # if you want to use all individual recalls HEI2020_TODDLERS_ASA24(DATA_PATH, RECALL_SUMMARIZE = FALSE) #Use the example data data(\"ASA24_exp\") HEI2020_TODDLERS_ASA24(ASA24_exp, RECALL_SUMMARIZE = TRUE) ## [1] \"RECALL_SUMMARIZE = TRUE, summarizing HEI2020_TODDLERS for ASA24 data by averaging over all possible recalls per person per day...\" ## [1] \"The results should be only used for HEI-Toddlers 2020 (age 1-2 years), not for HEI-2020 (non-toddlers, age > 2 years).\" ## # A tibble: 21 × 17 ## # Groups:   UserName, UserID [21] ##    UserName UserID         TOTALKCAL HEI2020_TODDLERS_ALL HEI2020_TODDLERS_TOT…¹ ##       <dbl> <chr>              <dbl>                <dbl>                  <dbl> ##  1        1 e6541891-8a22…     1514.                 60.8                   1.44 ##  2        2 dbb278b0-b589…      935.                 55.2                   5    ##  3        3 f0115426-e6f8…     1655.                 47.8                   5    ##  4        4 337d84a7-3bff…     1571.                 50.7                   0    ##  5        5 998f098a-8584…      907.                 39.3                   0    ##  6        6 aae330db-8f22…     1271.                 46.9                   4.32 ##  7        7 76e0f3e1-8e17…     2662.                 45.4                   1.73 ##  8        8 24de994f-e06a…     2039.                 70.3                   3.16 ##  9        9 8f61ae64-6a82…     1469.                 69.1                   5    ## 10       10 b47ab1b8-e62b…     1636.                 59.2                   3.01 ## # ℹ 11 more rows ## # ℹ abbreviated name: ¹​HEI2020_TODDLERS_TOTALFRT ## # ℹ 12 more variables: HEI2020_TODDLERS_FRT <dbl>, HEI2020_TODDLERS_VEG <dbl>, ## #   HEI2020_TODDLERS_GREENNBEAN <dbl>, HEI2020_TODDLERS_TOTALPRO <dbl>, ## #   HEI2020_TODDLERS_SEAPLANTPRO <dbl>, HEI2020_TODDLERS_WHOLEGRAIN <dbl>, ## #   HEI2020_TODDLERS_DAIRY <dbl>, HEI2020_TODDLERS_FATTYACID <dbl>, ## #   HEI2020_TODDLERS_REFINEDGRAIN <dbl>, HEI2020_TODDLERS_SODIUM <dbl>, … HEI2020_TODDLERS_ASA24(ASA24_exp, RECALL_SUMMARIZE = FALSE) ## [1] \"RECALL_SUMMARIZE is FALSE, skipping summarization step...\" ## [1] \"The results should be only used for HEI-Toddlers 2020 (age 1-2 years), not for HEI-2020 (non-toddlers, age > 2 years).\" ## # A tibble: 42 × 17 ##    UserName UserID         TOTALKCAL HEI2020_TODDLERS_ALL HEI2020_TODDLERS_TOT…¹ ##       <dbl> <chr>              <dbl>                <dbl>                  <dbl> ##  1        1 e6541891-8a22…     2019.                 60.8                   1.44 ##  2        1 e6541891-8a22…     1010.                 60.8                   1.44 ##  3        2 dbb278b0-b589…     1247.                 55.2                   5    ##  4        2 dbb278b0-b589…      623.                 55.2                   5    ##  5        3 f0115426-e6f8…     2206.                 47.8                   5    ##  6        3 f0115426-e6f8…     1103.                 47.8                   5    ##  7        4 337d84a7-3bff…     2095.                 50.7                   0    ##  8        4 337d84a7-3bff…     1047.                 50.7                   0    ##  9        5 998f098a-8584…     1209.                 39.3                   0    ## 10        5 998f098a-8584…      605.                 39.3                   0    ## # ℹ 32 more rows ## # ℹ abbreviated name: ¹​HEI2020_TODDLERS_TOTALFRT ## # ℹ 12 more variables: HEI2020_TODDLERS_FRT <dbl>, HEI2020_TODDLERS_VEG <dbl>, ## #   HEI2020_TODDLERS_GREENNBEAN <dbl>, HEI2020_TODDLERS_TOTALPRO <dbl>, ## #   HEI2020_TODDLERS_SEAPLANTPRO <dbl>, HEI2020_TODDLERS_WHOLEGRAIN <dbl>, ## #   HEI2020_TODDLERS_DAIRY <dbl>, HEI2020_TODDLERS_FATTYACID <dbl>, ## #   HEI2020_TODDLERS_REFINEDGRAIN <dbl>, HEI2020_TODDLERS_SODIUM <dbl>, …"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-hei2015-for-asa24","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating HEI2015 for ASA24","title":"","text":"","code":"DATA_PATH = \"/Users/james/Desktop/data/Totals.csv\" HEI2015_ASA24(DATA_PATH) #Use the example data data(\"ASA24_exp\") HEI2015_ASA24(ASA24_exp) ## RECALL_SUMMARIZE = TRUE, summarizing HEI2015 for ASA24 data by averaging over all possible recalls per person per day... ## # A tibble: 21 × 17 ## # Groups:   UserName, UserID [21] ##    UserName UserID            TOTALKCAL HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT ##       <dbl> <chr>                 <dbl>       <dbl>            <dbl>       <dbl> ##  1        1 e6541891-8a22-49…     1514.        69.8             1.26        2.45 ##  2        2 dbb278b0-b589-44…      935.        52.8             5           0    ##  3        3 f0115426-e6f8-4c…     1655.        51.2             5           5    ##  4        4 337d84a7-3bff-48…     1571.        47.5             0           0    ##  5        5 998f098a-8584-49…      907.        45.2             0           0    ##  6        6 aae330db-8f22-4d…     1271.        52.9             3.78        5    ##  7        7 76e0f3e1-8e17-49…     2662.        48.4             1.51        2.23 ##  8        8 24de994f-e06a-41…     2039.        69.0             2.76        5    ##  9        9 8f61ae64-6a82-4f…     1469.        70.9             5           5    ## 10       10 b47ab1b8-e62b-4b…     1636.        61.2             2.64        0    ## # ℹ 11 more rows ## # ℹ 11 more variables: HEI2015_VEG <dbl>, HEI2015_GREENNBEAN <dbl>, ## #   HEI2015_TOTALPRO <dbl>, HEI2015_SEAPLANTPRO <dbl>, ## #   HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, HEI2015_FATTYACID <dbl>, ## #   HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, HEI2015_ADDEDSUGAR <dbl>, ## #   HEI2015_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-amed-for-asa24","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating aMED for ASA24","title":"","text":"","code":"DATA_PATH = \"/Users/james/Desktop/data/Totals.csv\" MED_ASA24(DATA_PATH) #Use the example data data(\"ASA24_exp\") MED_ASA24(ASA24_exp) ## RECALL_SUMMARIZE = TRUE, summarizing HEI2015 for ASA24 data by averaging over all possible recalls per person per day... ## Reminder: this MED index uses medians to rank participants' food/drink serving sizes and then calculate MED component scores, which may generate results that are specific to your study population but not comparable to other populations. ## # A tibble: 21 × 13 ## # Groups:   UserName, UserID [21] ##    UserName UserID     MED_ALL MED_NOETOH MED_FRT MED_VEG MED_WGRAIN MED_LEGUMES ##       <dbl> <chr>        <dbl>      <dbl>   <dbl>   <dbl>      <dbl>       <dbl> ##  1        1 e6541891-…       7          7       1       1          1           1 ##  2        2 dbb278b0-…       6          6       1       1          1           1 ##  3        3 f0115426-…       5          5       1       1          1           0 ##  4        4 337d84a7-…       6          6       0       1          1           1 ##  5        5 998f098a-…       2          2       0       0          1           0 ##  6        6 aae330db-…       4          4       1       1          0           0 ##  7        7 76e0f3e1-…       5          5       1       1          1           0 ##  8        8 24de994f-…       8          7       1       1          1           1 ##  9        9 8f61ae64-…       6          6       1       1          1           1 ## 10       10 b47ab1b8-…       6          6       1       1          1           1 ## # ℹ 11 more rows ## # ℹ 5 more variables: MED_NUTS <dbl>, MED_FISH <dbl>, MED_REDPROC_MEAT <dbl>, ## #   MED_MONSATFAT <dbl>, MED_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dii-for-asa24","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating DII for ASA24","title":"","text":"","code":"DATA_PATH = \"/Users/james/Desktop/data/Totals.csv\" DII_ASA24(DATA_PATH) #Use the example data data(\"ASA24_exp\") DII_ASA24(ASA24_exp) ## RECALL_SUMMARIZE = TRUE, summarizing HEI2015 for ASA24 data by averaging over all possible recalls per person per day... ## # A tibble: 21 × 32 ## # Groups:   UserName [21] ##    UserName UserID DII_ALL DII_NOETOH ALCOHOL   VITB12  VITB6 BCAROTENE CAFFEINE ##       <dbl> <chr>    <dbl>      <dbl>   <dbl>    <dbl>  <dbl>     <dbl>    <dbl> ##  1        1 e6541… -0.0932     -0.371   0.278 -0.0766   0.127    -0.408   0.0848 ##  2        2 dbb27…  2.93        2.65    0.278 -0.0982   0.136     0.295   0.0845 ##  3        3 f0115…  1.39        1.11    0.278 -0.0185  -0.214     0.549   0.0850 ##  4        4 337d8…  1.28        1.00    0.278  0.00997 -0.185     0.538   0.0850 ##  5        5 998f0…  3.84        3.56    0.274 -0.0934   0.239     0.565   0.0844 ##  6        6 aae33…  2.29        2.01    0.278 -0.0846  -0.359     0.554   0.0846 ##  7        7 76e0f…  1.05        0.768   0.278 -0.0781  -0.206    -0.125   0.0839 ##  8        8 24de9…  0.178       0.409  -0.231 -0.0608  -0.252     0.459   0.0850 ##  9        9 8f61a…  0.805       0.527   0.278 -0.0908   0.134     0.564   0.0847 ## 10       10 b47ab…  1.98        1.70    0.278 -0.0949   0.184     0.537   0.0845 ## # ℹ 11 more rows ## # ℹ 23 more variables: CARB <dbl>, CHOLES <dbl>, KCAL <dbl>, TOTALFAT <dbl>, ## #   FIBER <dbl>, FOLICACID <dbl>, IRON <dbl>, MG <dbl>, MUFA <dbl>, ## #   NIACIN <dbl>, N3FAT <dbl>, N6FAT <dbl>, PROTEIN <dbl>, PUFA <dbl>, ## #   RIBOFLAVIN <dbl>, SATFAT <dbl>, SE <dbl>, THIAMIN <dbl>, VITA <dbl>, ## #   VITC <dbl>, VITD <dbl>, VITE <dbl>, ZN <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dash-for-asa24","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating DASH for ASA24","title":"","text":"","code":"DATA_PATH = \"/Users/james/Desktop/data/items.csv\" DASH_ASA24(DATA_PATH) #Use the example data data(\"ASA24_exp_detailed\") DASH_ASA24(ASA24_exp_detailed) ## Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. ## Since no skim milk code is provided, the default skim milk code from 17-18 FNDDS file is used. ## Since no low-fat cheese code is provided, the default low-fat cheese code from 17-18 FNDDS file is used. ## RECALL_SUMMARIZE = TRUE, summarizing HEI2015 for ASA24 data by averaging over all possible recalls per person per day... ## Reminder: this DASH index uses quintiles to rank participants' food/drink serving sizes and then calculate DASH component scores, which may generate results that are specific to your study population but not comparable to other populations. ## # A tibble: 21 × 11 ## # Groups:   UserName, UserID [21] ##    UserName UserID           DASH_ALL DASH_FRT DASH_VEG DASH_NUTSLEG DASH_WGRAIN ##    <chr>    <chr>               <dbl>    <dbl>    <dbl>        <dbl>       <dbl> ##  1 THR01    e6541891-8a22-4…       28        5        5            5           5 ##  2 THR02    dbb278b0-b589-4…       32        5        5            5           5 ##  3 THR03    f0115426-e6f8-4…       28        5        5            5           5 ##  4 THR04    337d84a7-3bff-4…       28        1        5            5           5 ##  5 THR05    998f098a-8584-4…       16        1        1            1           5 ##  6 THR06    aae330db-8f22-4…       24        5        5            1           1 ##  7 THR07    76e0f3e1-8e17-4…       28        5        5            1           5 ##  8 THR08    24de994f-e06a-4…       36        5        5            5           5 ##  9 THR09    8f61ae64-6a82-4…       28        5        5            5           5 ## 10 THR10    b47ab1b8-e62b-4…       36        5        5            5           5 ## # ℹ 11 more rows ## # ℹ 4 more variables: DASH_LOWF_DAIRY <dbl>, DASH_SODIUM <dbl>, ## #   DASH_REDPROC_MEAT <dbl>, DASH_SSB_FRTJ <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-ahei-for-asa24","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating AHEI for ASA24","title":"","text":"","code":"DATA_PATH = \"/Users/james/Desktop/data/items.csv\" AHEI_F_ASA24(DATA_PATH) AHEI_M_ASA24(DATA_PATH) #Use the example data data(\"ASA24_exp_detailed\") AHEI_F_ASA24(ASA24_exp_detailed) # for participants who are all female ## Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. ## RECALL_SUMMARIZE = TRUE, summarizing HEI2015 for ASA24 data by averaging over all possible recalls per person per day... ## Reminder: this AHEI index is for female only. Please stratify your data first and provide female only data. ## # A tibble: 21 × 15 ## # Groups:   UserName, UserID [21] ##    UserName UserID          AHEI_ALL AHEI_NOETOH AHEI_VEG AHEI_FRT AHEI_WGRAIN_F ##    <chr>    <chr>              <dbl>       <dbl>    <dbl>    <dbl>         <dbl> ##  1 THR01    e6541891-8a22-…     52.2        49.7    5.36     0.988         6.74  ##  2 THR02    dbb278b0-b589-…     44.9        42.4    6.94     0             0.302 ##  3 THR03    f0115426-e6f8-…     39.1        36.6    9.24     2.48          1.03  ##  4 THR04    337d84a7-3bff-…     52.7        50.2    3.84     0             3.80  ##  5 THR05    998f098a-8584-…     46.1        36.7    0        0             2.06  ##  6 THR06    aae330db-8f22-…     45.1        42.6    3.16     2.56          0     ##  7 THR07    76e0f3e1-8e17-…     51.8        49.3    7.66     1.58          3.24  ##  8 THR08    24de994f-e06a-…     72.1        65.3    2.62     2.97         10     ##  9 THR09    8f61ae64-6a82-…     48.6        46.1    0.202    3.16          2.10  ## 10 THR10    b47ab1b8-e62b-…     58.6        56.1    5.27     0            10     ## # ℹ 11 more rows ## # ℹ 8 more variables: AHEI_NUTSLEG <dbl>, AHEI_N3FAT <dbl>, AHEI_PUFA <dbl>, ## #   AHEI_SSB_FRTJ <dbl>, AHEI_REDPROC_MEAT <dbl>, AHEI_SODIUM <dbl>, ## #   AHEI_ALCOHOL_F <dbl>, SSB_FRTJ_SERV <dbl> AHEI_M_ASA24(ASA24_exp_detailed) # for participants who are all male ## Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. ## RECALL_SUMMARIZE = TRUE, summarizing HEI2015 for ASA24 data by averaging over all possible recalls per person per day... ## Reminder: this AHEI index is for male only. Please stratify your data first and provide male only data. ## # A tibble: 21 × 14 ## # Groups:   UserName, UserID [21] ##    UserName UserID          AHEI_ALL AHEI_NOETOH AHEI_VEG AHEI_FRT AHEI_WGRAIN_M ##    <chr>    <chr>              <dbl>       <dbl>    <dbl>    <dbl>         <dbl> ##  1 THR01    e6541891-8a22-…     51.1        48.6    5.36     0.988         5.62  ##  2 THR02    dbb278b0-b589-…     44.9        42.4    6.94     0             0.251 ##  3 THR03    f0115426-e6f8-…     39.0        36.5    9.24     2.48          0.857 ##  4 THR04    337d84a7-3bff-…     52.1        49.6    3.84     0             3.17  ##  5 THR05    998f098a-8584-…     45.7        36.3    0        0             1.72  ##  6 THR06    aae330db-8f22-…     45.1        42.6    3.16     2.56          0     ##  7 THR07    76e0f3e1-8e17-…     51.2        48.7    7.66     1.58          2.70  ##  8 THR08    24de994f-e06a-…     75.3        65.3    2.62     2.97         10     ##  9 THR09    8f61ae64-6a82-…     48.2        45.7    0.202    3.16          1.75  ## 10 THR10    b47ab1b8-e62b-…     58.6        56.1    5.27     0            10     ## # ℹ 11 more rows ## # ℹ 7 more variables: AHEI_NUTSLEG <dbl>, AHEI_N3FAT <dbl>, AHEI_PUFA <dbl>, ## #   AHEI_SSB_FRTJ <dbl>, AHEI_REDPROC_MEAT <dbl>, AHEI_SODIUM <dbl>, ## #   AHEI_ALCOHOL_M <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-hei2015-for-dhq3","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating HEI2015 for DHQ3","title":"","text":"","code":"DATA_PATH = \"/Users/james/Desktop/data/results.csv\" HEI2015_DHQ3(DATA_PATH) #Use the example data data(\"DHQ3_exp\") HEI2015_DHQ3(DHQ3_exp) ## # A tibble: 23 × 16 ##    `Respondent ID` TOTALKCAL HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT ##              <dbl>     <dbl>       <dbl>            <dbl>       <dbl> ##  1               1     1849.        74.7            3.14        5     ##  2               2     1109.        77.9            4.96        5     ##  3               3     2134.        69.5            5           5     ##  4               4     1170.        77.1            5           5     ##  5               5     1238.        63.3            5           5     ##  6               6      759.        59.5            1.32        1.48  ##  7               7      727.        67.9            5           5     ##  8               8     1462.        66.7            3.59        5     ##  9               9     1080.        72.4            5           5     ## 10              10     1552.        55.5            0.684       0.644 ## # ℹ 13 more rows ## # ℹ 11 more variables: HEI2015_VEG <dbl>, HEI2015_GREENNBEAN <dbl>, ## #   HEI2015_TOTALPRO <dbl>, HEI2015_SEAPLANTPRO <dbl>, ## #   HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, HEI2015_FATTYACID <dbl>, ## #   HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, HEI2015_ADDEDSUGAR <dbl>, ## #   HEI2015_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-amed-for-dhq3","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating aMED for DHQ3","title":"","text":"","code":"DATA_PATH = \"/Users/james/Desktop/data/results.csv\" MED_DHQ3(DATA_PATH) #Use the example data data(\"DHQ3_exp\") MED_DHQ3(DHQ3_exp) ## # A tibble: 23 × 12 ##    RESPONDENTID MED_ALL MED_NOETOH MED_FRT MED_VEG MED_WGRAIN MED_LEGUMES ##           <dbl>   <dbl>      <dbl>   <dbl>   <dbl>      <dbl>       <dbl> ##  1            1       5          5       1       1          1           1 ##  2            2       7          7       1       1          1           1 ##  3            3       6          6       1       1          1           1 ##  4            4       4          4       1       0          1           0 ##  5            5       2          2       1       0          0           0 ##  6            6       3          3       0       0          1           0 ##  7            7       4          4       1       1          0           1 ##  8            8       4          4       0       1          0           1 ##  9            9       2          1       1       0          0           0 ## 10           10       5          5       0       0          1           1 ## # ℹ 13 more rows ## # ℹ 5 more variables: MED_NUTS <dbl>, MED_FISH <dbl>, MED_REDPROC_MEAT <dbl>, ## #   MED_MONSATFAT <dbl>, MED_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-ahei-for-dhq3","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating AHEI for DHQ3","title":"","text":"","code":"DATA_PATH = \"/Users/james/Desktop/data/detail.csv\" AHEI_DHQ3(DATA_PATH) #Use the example data data(\"DHQ3_exp_detailed\") AHEI_DHQ3(DHQ3_exp_detailed) ## # A tibble: 23 × 15 ##    RESPONDENTID GENDER AHEI_ALL AHEI_NOETOH AHEI_VEG AHEI_FRT AHEI_WGRAIN ##           <dbl>  <dbl>    <dbl>       <dbl>    <dbl>    <dbl>       <dbl> ##  1            1      1     61.7        59.2     5.36    2.3         7.18  ##  2            2      2     68.5        66.0     3.62    2.12        4.84  ##  3            3      2     58.3        49.9    10       3.33        2.65  ##  4            4      2     46.1        43.6     1.72    2.33        2.99  ##  5            5      2     60.4        50.4     2.68    2.75        1.06  ##  6            6      2     51.7        48.9     1.58    0.175       3.21  ##  7            7      1     54.8        52.3     4.12    3.18        1.48  ##  8            8      2     52.8        45.8     4.54    1.8         1.97  ##  9            9      2     61.7        51.7     1.58    2.55        0.983 ## 10           10      2     54.2        50.6     2.1     0.175       5.44  ## # ℹ 13 more rows ## # ℹ 8 more variables: AHEI_NUTSLEG <dbl>, AHEI_N3FAT <dbl>, AHEI_PUFA <dbl>, ## #   AHEI_SSB_FRTJ <dbl>, AHEI_REDPROC_MEAT <dbl>, AHEI_TRANS <dbl>, ## #   AHEI_SODIUM <dbl>, AHEI_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dash-for-dhq3","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating DASH for DHQ3","title":"","text":"","code":"DATA_PATH = \"/Users/james/Desktop/data/detail.csv\" DASH_DHQ3(DATA_PATH) #Use the example data. Attention: the example data here is DHQ3_exp_detailed, which is different from DHQ3_exp. DHQ3_exp_detailed is only used for DASH_DHQ3 data(\"DHQ3_exp_detailed\") DASH_DHQ3(DHQ3_exp_detailed) ## Reminder: this DASH index uses quintiles to rank participants' food/drink serving sizes and then calculate DASH component scores, which may generate results that are specific to your study population but not comparable to other populations. ## # A tibble: 23 × 10 ##    `Respondent ID` DASH_ALL DASH_FRT DASH_VEG DASH_NUTSLEG DASH_WGRAIN ##              <dbl>    <dbl>    <dbl>    <dbl>        <dbl>       <dbl> ##  1               1       25        3        4            5           5 ##  2               2       29        3        3            5           5 ##  3               3       24        5        5            4           3 ##  4               4       23        5        1            2           3 ##  5               5       25        4        2            2           2 ##  6               6       19        1        1            1           3 ##  7               7       26        4        4            3           3 ##  8               8       20        3        4            4           3 ##  9               9       20        4        1            2           1 ## 10              10       20        1        2            3           5 ## # ℹ 13 more rows ## # ℹ 4 more variables: DASH_LOWF_DAIRY <dbl>, DASH_SODIUM <dbl>, ## #   DASH_REDPROC_MEAT <dbl>, DASH_SSB_FRTJ <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-ahei-for-block","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating AHEI for BLOCK","title":"","text":"","code":"DATA_PATH = \"/Users/james/Desktop/block_exp.csv\" AHEI_BLOCK(DATA_PATH) #Use the example data data(\"BLOCK_exp\") AHEI_BLOCK(BLOCK_exp) ## # A tibble: 5 × 15 ##   RESPONDENTID GENDER AHEI_ALL AHEI_NOETOH AHEI_VEG AHEI_FRT AHEI_WGRAIN ##          <dbl>  <dbl>    <dbl>       <dbl>    <dbl>    <dbl>       <dbl> ## 1            1      1     48.1        45.6    1.58     3.69        5.01  ## 2            2      1     33.5        31.0    0.695    0.527       0.794 ## 3            3      1     49.1        39.1    3.94     2.63        5.89  ## 4            4      1     47.1        44.6    1.79     5.39        5.17  ## 5            5      1     52.5        50.0    6.06     9.18        3.94  ## # ℹ 8 more variables: AHEI_NUTSLEG <dbl>, AHEI_N3FAT <dbl>, AHEI_PUFA <dbl>, ## #   AHEI_SSB_FRTJ <dbl>, AHEI_REDPROC_MEAT <dbl>, AHEI_TRANS <dbl>, ## #   AHEI_SODIUM <dbl>, AHEI_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-aheip-for-block","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating AHEIP for BLOCK","title":"","text":"","code":"#Use the example data data(\"BLOCK_exp\") AHEIP_BLOCK(BLOCK_exp) ## # A tibble: 5 × 11 ##   RESPONDENTID AHEIP_ALL AHEIP_VEG AHEIP_FRT AHEIP_WHITEREAD AHEIP_FIBER ##          <dbl>     <dbl>     <dbl>     <dbl>           <dbl>       <dbl> ## 1            1      38.3     1.58      3.69            0.351        5.41 ## 2            2      26.0     0.695     0.527           0.717        4.42 ## 3            3      51.6     3.94      2.63            0.477        8.3  ## 4            4      47.4     1.79      5.39            0.756        9.93 ## 5            5      62.5     6.06      9.18            2.06         8.45 ## # ℹ 5 more variables: AHEIP_TRANS <dbl>, AHEIP_POLYSAT <dbl>, ## #   AHEIP_CALCIUM <dbl>, AHEIP_FOLATE <dbl>, AHEIP_IRON <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dash-for-block","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating DASH for BLOCK","title":"","text":"","code":"#Use the example data data(\"BLOCK_exp\") DASH_BLOCK(BLOCK_exp) ## Reminder: this DASH index uses quintiles to rank participants' food/drink serving sizes and then calculate DASH component scores, which may generate results that are specific to your study population but not comparable to other populations. ## # A tibble: 5 × 25 ##   RESPONDENTID DASH_ALL DASH_FRT DASH_VEG DASH_NUTSLEG DASH_WGRAIN ##          <dbl>    <dbl>    <dbl>    <dbl>        <dbl>       <dbl> ## 1            1       28        3        2            4           3 ## 2            2       19        1        1            5           1 ## 3            3       23        2        4            3           5 ## 4            4       23        4        3            2           4 ## 5            5       28        5        5            1           2 ## # ℹ 19 more variables: DASH_LOWF_DAIRY <dbl>, DASH_SODIUM <dbl>, ## #   DASH_REDPROC_MEAT <dbl>, DASH_SSB_FRTJ <dbl>, DT_KCAL <dbl>, ## #   F_BERRIES <dbl>, F_WHOLE <dbl>, FRT_FRTJ_SERV <dbl>, VEG_SERV <dbl>, ## #   NUTSLEG_SERV <dbl>, WGRAIN_SERV <dbl>, LOWF_MILK_SERV <dbl>, ## #   YOGURT_SERV <dbl>, LOWF_ICECREAMFROYO_SERV <dbl>, LOWF_CHEESE_SERV <dbl>, ## #   LOWF_DAIRY_SERV <dbl>, SODIUM_SERV <dbl>, REDPROC_MEAT_SERV <dbl>, ## #   SSB_FRTJ_SERV <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dii-for-block","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating DII for BLOCK","title":"","text":"","code":"#Use the example data data(\"BLOCK_exp\") DII_BLOCK(BLOCK_exp) ## # A tibble: 5 × 34 ##   RESPONDENTID DII_ALL DII_NOETOH ALCOHOL  VITB12   VITB6 BCAROTENE CAFFEINE ##          <dbl>   <dbl>      <dbl>   <dbl>   <dbl>   <dbl>     <dbl>    <dbl> ## 1            1   3.74        3.46   0.278 -0.0682 -0.0157    0.464    0.0850 ## 2            2   2.65        2.37   0.278 -0.0428  0.0928    0.552    0.0845 ## 3            3  -1.59       -1.72   0.124  0.0986 -0.346     0.403    0.0849 ## 4            4  -1.13       -1.41   0.278 -0.0588 -0.192    -0.0426   0.0842 ## 5            5  -0.724      -1.00   0.278 -0.0758 -0.204    -0.584    0.0845 ## # ℹ 26 more variables: CARB <dbl>, CHOLES <dbl>, KCAL <dbl>, TOTALFAT <dbl>, ## #   FIBER <dbl>, FOLICACID <dbl>, IRON <dbl>, MG <dbl>, MUFA <dbl>, ## #   NIACIN <dbl>, N3FAT <dbl>, N6FAT <dbl>, PROTEIN <dbl>, PUFA <dbl>, ## #   RIBOFLAVIN <dbl>, SATFAT <dbl>, SE <dbl>, THIAMIN <dbl>, TRANSFAT <dbl>, ## #   VITA <dbl>, VITC <dbl>, VITD <dbl>, VITE <dbl>, ZN <dbl>, TEA <dbl>, ## #   ISOFLAVONES <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-hei2015-for-block","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating HEI2015 for BLOCK","title":"","text":"","code":"#Use the example data data(\"BLOCK_exp\") HEI2015_BLOCK(BLOCK_exp) ## # A tibble: 5 × 15 ##   RESPONDENTID HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT HEI2015_VEG ##          <dbl>       <dbl>            <dbl>       <dbl>       <dbl> ## 1            1        76.6            5            5           2.57 ## 2            2        42.0            0.986        1.08        1.32 ## 3            3        56.0            2.25         3.56        2.42 ## 4            4        48.7            5            5           1.11 ## 5            5        65.7            5            5           5    ## # ℹ 10 more variables: HEI2015_GREENNBEAN <dbl>, HEI2015_TOTALPRO <dbl>, ## #   HEI2015_SEAPLANTPRO <dbl>, HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, ## #   HEI2015_FATTYACID <dbl>, HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, ## #   HEI2015_ADDEDSUGAR <dbl>, HEI2015_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-amed-for-block","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating aMED for BLOCK","title":"","text":"","code":"#Use the example data data(\"BLOCK_exp\") MED_BLOCK(BLOCK_exp) ## Reminder: this MED index uses medians to rank participants' food/drink serving sizes and then calculate MED component scores, which may generate results that are specific to your study population but not comparable to other populations. ## # A tibble: 5 × 12 ##   RESPONDENTID MED_ALL MED_NOETOH MED_FRT MED_VEG MED_WGRAIN MED_LEGUMES ##          <dbl>   <dbl>      <dbl>   <dbl>   <dbl>      <dbl>       <dbl> ## 1            1       6          6       1       0          1           1 ## 2            2       4          4       0       0          0           1 ## 3            3       7          6       0       1          1           1 ## 4            4       3          3       1       1          1           0 ## 5            5       4          4       1       1          0           0 ## # ℹ 5 more variables: MED_NUTS <dbl>, MED_FISH <dbl>, MED_REDPROC_MEAT <dbl>, ## #   MED_MONSATFAT <dbl>, MED_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-hei2020-for-your-own-dietary-assessment-tool","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating HEI2020 for your own dietary assessment tool","title":"","text":"","code":"#Use the example data data(\"HEI2020_VALIDATION\") HEI2020(SERV_DATA = HEI2020_VALIDATION,RESPONDENTID = HEI2020_VALIDATION$id,AGE = HEI2020_VALIDATION$age,TOTALKCAL_HEI2020 = HEI2020_VALIDATION$kcal,TOTALFRT_SERV_HEI2020 = HEI2020_VALIDATION$total_fruit,FRT_SERV_HEI2020 = HEI2020_VALIDATION$whole_fruit,VEG_SERV_HEI2020 = HEI2020_VALIDATION$total_vegetable,GREENNBEAN_SERV_HEI2020 = HEI2020_VALIDATION$green_and_bean,TOTALPRO_SERV_HEI2020 = HEI2020_VALIDATION$total_protein,SEAPLANTPRO_SERV_HEI2020 = HEI2020_VALIDATION$seafood_plant_protein,WHOLEGRAIN_SERV_HEI2020 = HEI2020_VALIDATION$whole_grain,DAIRY_SERV_HEI2020 = HEI2020_VALIDATION$dairy,FATTYACID_SERV_HEI2020 = HEI2020_VALIDATION$fatty_acid,REFINEDGRAIN_SERV_HEI2020 = HEI2020_VALIDATION$refined_grain,SODIUM_SERV_HEI2020 = HEI2020_VALIDATION$sodium,ADDEDSUGAR_SERV_HEI2020 = HEI2020_VALIDATION$added_sugar,SATFAT_SERV_HEI2020 = HEI2020_VALIDATION$saturated_fat) ## # A tibble: 22 × 17 ##    RESPONDENTID   AGE TOTALKCAL_HEI2020 HEI2020_ALL HEI2020_TOTALFRT HEI2020_FRT ##           <dbl> <dbl>             <dbl>       <dbl>            <dbl>       <dbl> ##  1            1    18              1000          40              0           0   ##  2            2    18              1000          42              0.5         0.5 ##  3            3    18              1000          44              1           1   ##  4            4    18              1000          46              1.5         1.5 ##  5            5    18              1000          48              2           2   ##  6            6    18              1000          50              2.5         2.5 ##  7            7    18              1000          52              3           3   ##  8            8    18              1000          54              3.5         3.5 ##  9            9    18              1000          56              4           4   ## 10           10    18              1000          58              4.5         4.5 ## # ℹ 12 more rows ## # ℹ 11 more variables: HEI2020_VEG <dbl>, HEI2020_GREENNBEAN <dbl>, ## #   HEI2020_TOTALPRO <dbl>, HEI2020_SEAPLANTPRO <dbl>, ## #   HEI2020_WHOLEGRAIN <dbl>, HEI2020_DAIRY <dbl>, HEI2020_FATTYACID <dbl>, ## #   HEI2020_REFINEDGRAIN <dbl>, HEI2020_SODIUM <dbl>, HEI2020_ADDEDSUGAR <dbl>, ## #   HEI2020_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-hei2015-for-your-own-dietary-assessment-tool","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating HEI2015 for your own dietary assessment tool","title":"","text":"","code":"DATA_PATH <- \"/Users/james/Desktop/data.csv\" SERV_DATA <- read_csv(DATA_PATH)  HEI2015(SERV_DATA, SERV_DATA$RESPONDENTID, SERV_DATA$TOTALKCAL, SERV_DATA$VEG_SERV, SERV_DATA$FRT_SERV, SERV_DATA$WGRAIN_SERV, SERV_DATA$NUTSLEG_SERV, SERV_DATA$N3FAT_SERV, SERV_DATA$PUFA_SERV, SERV_DATA$SSB_FRTJ_SERV, SERV_DATA$REDPROC_MEAT_SERV, SERV_DATA$TRANS_SERV, SERV_DATA$SODIUM_SERV, SERV_DATA$ALCOHOL_SERV) #Use the example data data(\"SERV_DATA_exp\") HEI2015(SERV_DATA_exp, SERV_DATA_exp$UserName, SERV_DATA_exp$TOTALKCAL, SERV_DATA_exp$TOTALFRT_SERV_HEI2015_exp, SERV_DATA_exp$FRT_SERV_HEI2015_exp, SERV_DATA_exp$VEG_SERV_HEI2015_exp, SERV_DATA_exp$GREENNBEAN_SERV_HEI2015_exp, SERV_DATA_exp$TOTALPRO_SERV_HEI2015_exp,  SERV_DATA_exp$SEAPLANTPRO_SERV_HEI2015_exp, SERV_DATA_exp$WHOLEGRAIN_SERV_HEI2015_exp, SERV_DATA_exp$DAIRY_SERV_HEI2015_exp, SERV_DATA_exp$FATTYACID_SERV_HEI2015_exp, SERV_DATA_exp$REFINEDGRAIN_SERV_HEI2015_exp,  SERV_DATA_exp$SODIUM_SERV_HEI2015_exp, SERV_DATA_exp$ADDEDSUGAR_SERV_HEI2015_exp, SERV_DATA_exp$SATFAT_SERV_HEI2015_exp) ## # A tibble: 21 × 16 ##    RESPONDENTID TOTALKCAL_HEI2015 HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT ##           <dbl>             <dbl>       <dbl>            <dbl>       <dbl> ##  1            1             2019.        69.8             1.26        2.45 ##  2            2             1247.        52.8             5           0    ##  3            3             2206.        51.2             5           5    ##  4            4             2095.        47.5             0           0    ##  5            5             1209.        45.2             0           0    ##  6            6             1694.        52.9             3.78        5    ##  7            7             3549.        48.4             1.51        2.23 ##  8            8             2718.        69.0             2.76        5    ##  9            9             1959.        70.9             5           5    ## 10           10             2181.        61.2             2.64        0    ## # ℹ 11 more rows ## # ℹ 11 more variables: HEI2015_VEG <dbl>, HEI2015_GREENNBEAN <dbl>, ## #   HEI2015_TOTALPRO <dbl>, HEI2015_SEAPLANTPRO <dbl>, ## #   HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, HEI2015_FATTYACID <dbl>, ## #   HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, HEI2015_ADDEDSUGAR <dbl>, ## #   HEI2015_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-ahei-for-your-own-dietary-assessment-tool","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating AHEI for your own dietary assessment tool","title":"","text":"","code":"DATA_PATH <- \"/Users/james/Desktop/data.csv\" SERV_DATA <- read_csv(DATA_PATH)  AHEI(SERV_DATA, SERV_DATA$RESPONDENTID, SERV_DATA$GENDER, SERV_DATA$VEG_SERV, SERV_DATA$FRT_SERV, SERV_DATA$WGRAIN_SERV, SERV_DATA$NUTSLEG_SERV, SERV_DATA$N3FAT_SERV, SERV_DATA$PUFA_SERV, SERV_DATA$SSB_FRTJ_SERV, SERV_DATA$REDPROC_MEAT_SERV, SERV_DATA$TRANS_SERV,SODIUM_SERV, SERV_DATA$ALCOHOL_SERV) #Use the example data data(\"SERV_DATA_exp\") AHEI(SERV_DATA_exp, SERV_DATA_exp$UserName, SERV_DATA_exp$SEX, SERV_DATA_exp$TOTALKCAL, SERV_DATA_exp$VEG_SERV_AHEI_exp, SERV_DATA_exp$FRT_SERV_AHEI_exp, SERV_DATA_exp$WGRAIN_SERV_AHEI_exp, SERV_DATA_exp$NUTSLEG_SERV_AHEI_exp, SERV_DATA_exp$N3FAT_SERV_AHEI_exp, SERV_DATA_exp$PUFA_SERV_AHEI_exp, SERV_DATA_exp$SSB_FRTJ_SERV_AHEI_exp, SERV_DATA_exp$REDPROC_MEAT_SERV_AHEI_exp, SERV_DATA_exp$TRANS_SERV_AHEI_exp, SERV_DATA_exp$SODIUM_SERV_AHEI_exp, SERV_DATA_exp$ALCOHOL_SERV_AHEI_exp) ## # A tibble: 21 × 15 ##    RESPONDENTID GENDER AHEI_ALL AHEI_NOETOH AHEI_VEG AHEI_FRT AHEI_WGRAIN ##           <dbl>  <dbl>    <dbl>       <dbl>    <dbl>    <dbl>       <dbl> ##  1            1      1     56.9        54.4    2.68     0.988       5.62  ##  2            2      1     43.4        40.9    3.47     0           0.251 ##  3            3      1     34.3        31.8    4.62     2.48        0.857 ##  4            4      1     50.1        47.6    1.92     0           3.17  ##  5            5      1     47.3        37.9    0        0           1.72  ##  6            6      1     52.2        49.7    1.58     2.56        0     ##  7            7      1     47.4        44.9    3.83     1.58        2.70  ##  8            8      1     80.2        70.2    1.31     2.97       10     ##  9            9      1     57.0        54.5    0.101    3.16        1.75  ## 10           10      1     56.0        53.5    2.63     0          10     ## # ℹ 11 more rows ## # ℹ 8 more variables: AHEI_NUTSLEG <dbl>, AHEI_N3FAT <dbl>, AHEI_PUFA <dbl>, ## #   AHEI_SSB_FRTJ <dbl>, AHEI_REDPROC_MEAT <dbl>, AHEI_TRANS <dbl>, ## #   AHEI_SODIUM <dbl>, AHEI_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dash-for-your-own-dietary-assessment-tool","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating DASH for your own dietary assessment tool","title":"","text":"","code":"DATA_PATH <- \"/Users/james/Desktop/data.csv\" SERV_DATA <- read_csv(DATA_PATH)  DASH(SERV_DATA, SERV_DATA$RESPONDENTID, SERV_DATA$TOTALKCAL_DASH, SERV_DATA$FRT_FRTJ_SERV_DASH, SERV_DATA$VEG_SERV_DASH, SERV_DATA$NUTSLEG_SERV_DASH, SERV_DATA$WGRAIN_SERV_DASH, SERV_DATA$LOWF_DAIRY_SERV_DASH, SERV_DATA$SODIUM_SERV_DASH, SERV_DATA$REDPROC_MEAT_SERV_DASH, SERV_DATA$SSB_FRTJ_SERV_DASH) #Use the example data data(\"SERV_DATA_exp\") DASH(SERV_DATA_exp, SERV_DATA_exp$UserName, SERV_DATA_exp$TOTALKCAL, SERV_DATA_exp$FRT_FRTJ_SERV_DASH_exp, SERV_DATA_exp$VEG_SERV_DASH_exp, SERV_DATA_exp$NUTSLEG_SERV_DASH_exp, SERV_DATA_exp$WGRAIN_SERV_DASH_exp, SERV_DATA_exp$LOWF_DAIRY_SERV_DASH_exp, SERV_DATA_exp$SODIUM_SERV_DASH_exp, SERV_DATA_exp$REDPROC_MEAT_SERV_DASH_exp, SERV_DATA_exp$SSB_FRTJ_SERV_DASH_exp) ## Reminder: this DASH index uses quintiles to rank participants' food/drink serving sizes and then calculate DASH component scores, which may generate results that are specific to your study population but not comparable to other populations. ## # A tibble: 21 × 10 ##    RESPONDENTID DASH_ALL DASH_FRT DASH_VEG DASH_NUTSLEG DASH_WGRAIN ##           <dbl>    <dbl>    <dbl>    <dbl>        <dbl>       <dbl> ##  1            1       29        2        3            5           5 ##  2            2       22        5        3            2           2 ##  3            3       18        5        5            2           2 ##  4            4       25        1        2            3           5 ##  5            5       16        1        1            1           3 ##  6            6       23        4        2            1           1 ##  7            7       26        3        4            1           4 ##  8            8       29        4        1            3           5 ##  9            9       27        5        1            5           3 ## 10           10       29        3        3            4           5 ## # ℹ 11 more rows ## # ℹ 4 more variables: DASH_LOWF_DAIRY <dbl>, DASH_SODIUM <dbl>, ## #   DASH_REDPROC_MEAT <dbl>, DASH_SSB_FRTJ <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dashi-for-your-own-dietary-assessment-tool","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating DASHI for your own dietary assessment tool","title":"","text":"","code":"#Use the example data data(\"DASH_trial\") DASHI(SERV_DATA = DASH_trial, RESPONDENTID = DASH_trial$Diet_Type,TOTALKCAL_DASHI = DASH_trial$Kcal, TOTAL_FAT_DASHI = DASH_trial$Totalfat_Percent, SAT_FAT_DASHI = DASH_trial$Satfat_Percent, PROTEIN_DASHI = DASH_trial$Protein_Percent, CHOLESTEROL_DASHI = DASH_trial$Cholesterol, FIBER_DASHI = DASH_trial$Fiber, POTASSIUM_DASHI = DASH_trial$Potassium, MAGNESIUM_DASHI = DASH_trial$Magnesium, CALCIUM_DASHI = DASH_trial$Calcium, SODIUM_DASHI = DASH_trial$Sodium) ## # A tibble: 5 × 12 ##   RESPONDENTID    DASHI_ALL TOTALKCAL_DASHI DASHI_TOTAL_FAT DASHI_SAT_FAT ##   <chr>               <dbl>           <dbl>           <dbl>         <dbl> ## 1 DASH                7.79             2100           1              0.9  ## 2 DASH_lowSodium      8.79             2100           1              0.9  ## 3 DASH_MedSodium      8.76             2100           1              0.9  ## 4 DASH_HighSodium     7.79             2100           1              0.9  ## 5 Control             0.833            2100           0.130          0.19 ## # ℹ 7 more variables: DASHI_PROTEIN <dbl>, DASHI_CHOLESTEROL <dbl>, ## #   DASHI_FIBER <dbl>, DASHI_POTASSIUM <dbl>, DASHI_MAGNESIUM <dbl>, ## #   DASHI_CALCIUM <dbl>, DASHI_SODIUM <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-amed-for-your-own-dietary-assessment-tool","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating aMED for your own dietary assessment tool","title":"","text":"","code":"DATA_PATH <- \"/Users/james/Desktop/data.csv\" SERV_DATA <- read_csv(DATA_PATH)  MED(SERV_DATA, SERV_DATA$RESPONDENTID, SERV_DATA$FRT_FRTJ_SERV, SERV_DATA$VEG_SERV, SERV_DATA$WGRAIN_SERV, SERV_DATA$LEGUMES_SERV, SERV_DATA$NUTS_SERV,FISH_SERV, SERV_DATA$REDPROC_MEAT_SERV, SERV_DATA$MONSATFAT_SERV, SERV_DATA$ALCOHOL_SERV) #Use the example data data(\"SERV_DATA_exp\") MED(SERV_DATA_exp, SERV_DATA_exp$UserName, SERV_DATA_exp$FRT_FRTJ_SERV_MED_exp, SERV_DATA_exp$VEG_SERV_MED_exp, SERV_DATA_exp$WGRAIN_SERV_MED_exp, SERV_DATA_exp$LEGUMES_SERV_MED_exp, SERV_DATA_exp$NUTS_SERV_MED_exp, SERV_DATA_exp$FISH_SERV_MED_exp, SERV_DATA_exp$REDPROC_MEAT_SERV_MED_exp, SERV_DATA_exp$MONSATFAT_SERV_MED_exp, SERV_DATA_exp$ALCOHOL_SERV_MED_exp) ## Reminder: this MED index uses medians to rank participants' food/drink serving sizes and then calculate MED component scores, which may generate results that are specific to your study population but not comparable to other populations. ## # A tibble: 21 × 12 ##    RESPONDENTID MED_ALL MED_NOETOH MED_FRT MED_VEG MED_WGRAIN MED_LEGUMES ##           <dbl>   <dbl>      <dbl>   <dbl>   <dbl>      <dbl>       <dbl> ##  1            1       6          6       0       1          1           1 ##  2            2       4          4       1       1          0           1 ##  3            3       4          4       1       1          0           0 ##  4            4       4          4       0       0          1           1 ##  5            5       0          0       0       0          0           0 ##  6            6       3          3       1       0          0           0 ##  7            7       4          4       1       1          1           0 ##  8            8       5          5       1       0          1           0 ##  9            9       5          5       1       0          1           1 ## 10           10       4          4       1       0          1           1 ## # ℹ 11 more rows ## # ℹ 5 more variables: MED_NUTS <dbl>, MED_FISH <dbl>, MED_REDPROC_MEAT <dbl>, ## #   MED_MONSATFAT <dbl>, MED_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-medi-for-your-own-dietary-assessment-tool","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating MEDI for your own dietary assessment tool","title":"","text":"","code":"DATA_PATH <- \"/Users/james/Desktop/data.csv\" SERV_DATA <- read_csv(DATA_PATH)  MEDI(SERV_DATA, SERV_DATA$RESPONDENTID, SERV_DATA$OLIVE_OIL_SERV_MEDI, SERV_DATA$FRT_SERV_MEDI, SERV_DATA$VEG_SERV_MEDI, SERV_DATA$LEGUMES_SERV_MEDI, SERV_DATA$NUTS_SERV_MEDI, SERV_DATA$FISH_SEAFOOD_SERV_MEDI, SERV_DATA$ALCOHOL_SERV_MEDI, SERV_DATA$SSB_SERV_MEDI, SERV_DATA$SWEETS_SERV_MEDI, SERV_DATA$DISCRET_FAT_SERV_MEDI, SERV_DATA$REDPROC_MEAT_SERV_MEDI) #Use the example data data(\"PREDIMED_trial\")  # MEDI is 0/1 point scoring criteria. MEDI(   SERV_DATA = PREDIMED_trial,   RESPONDENTID = PREDIMED_trial$Diet_Type,   OLIVE_OIL_SERV_MEDI = PREDIMED_trial$Virgin_Oliveoil,   FRT_SERV_MEDI = PREDIMED_trial$Fruits,    VEG_SERV_MEDI = PREDIMED_trial$Vegetables,   LEGUMES_SERV_MEDI = PREDIMED_trial$Legumes,   NUTS_SERV_MEDI = PREDIMED_trial$Total_nuts,   FISH_SEAFOOD_SERV_MEDI = PREDIMED_trial$Fish_Seafood,   ALCOHOL_SERV_MEDI = PREDIMED_trial$Alcohol,   SSB_SERV_MEDI = PREDIMED_trial$Soda_Drinks,   SWEETS_SERV_MEDI = PREDIMED_trial$Sweets,   DISCRET_FAT_SERV_MEDI = PREDIMED_trial$Refined_Oliveoil,   REDPROC_MEAT_SERV_MEDI = PREDIMED_trial$Meat) ## # A tibble: 3 × 14 ##   RESPONDENTID MEDI_ALL MEDI_NOETOH MEDI_OLIVE_OIL MEDI_FRT MEDI_VEG ##   <chr>           <dbl>       <dbl>          <dbl>    <dbl>    <dbl> ## 1 Med_Oliveoil        8           7              1        1        1 ## 2 Med_Nuts            7           7              0        1        1 ## 3 Control             5           5              0        0        1 ## # ℹ 8 more variables: MEDI_LEGUMES <dbl>, MEDI_NUTS <dbl>, MEDI_FISH <dbl>, ## #   MEDI_ALCOHOL <dbl>, MEDI_SSB <dbl>, MEDI_SWEETS <dbl>, ## #   MEDI_DISCRET_FAT <dbl>, MEDI_REDPROC_MEAT <dbl> # MEDI_V2 is 5 point scoring criteria MEDI_V2(     SERV_DATA = PREDIMED_trial,     RESPONDENTID = PREDIMED_trial$Diet_Type,     OLIVE_OIL_SERV_MEDI = PREDIMED_trial$Virgin_Oliveoil,     FRT_SERV_MEDI = PREDIMED_trial$Fruits,      VEG_SERV_MEDI = PREDIMED_trial$Vegetables,     LEGUMES_SERV_MEDI = PREDIMED_trial$Legumes,     NUTS_SERV_MEDI = PREDIMED_trial$Total_nuts,     FISH_SEAFOOD_SERV_MEDI = PREDIMED_trial$Fish_Seafood,     ALCOHOL_SERV_MEDI = PREDIMED_trial$Alcohol,     SSB_SERV_MEDI = PREDIMED_trial$Soda_Drinks,     SWEETS_SERV_MEDI = PREDIMED_trial$Sweets,     DISCRET_FAT_SERV_MEDI = PREDIMED_trial$Refined_Oliveoil,     REDPROC_MEAT_SERV_MEDI = PREDIMED_trial$Meat ) ## # A tibble: 3 × 14 ##   RESPONDENTID MEDI_V2_ALL MEDI_V2_NOETOH MEDI_OLIVE_OIL MEDI_FRT MEDI_VEG ##   <chr>              <dbl>          <dbl>          <dbl>    <dbl>    <dbl> ## 1 Med_Oliveoil        42.5           35.0           5        5           5 ## 2 Med_Nuts            36.7           30.8           3.19     5           5 ## 3 Control             33.7           29.1           2.27     4.92        5 ## # ℹ 8 more variables: MEDI_LEGUMES <dbl>, MEDI_NUTS <dbl>, MEDI_FISH <dbl>, ## #   MEDI_ALCOHOL <dbl>, MEDI_SSB <dbl>, MEDI_SWEETS <dbl>, ## #   MEDI_DISCRET_FAT <dbl>, MEDI_REDPROC_MEAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-dii-for-your-own-dietary-assessment-tool","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating DII for your own dietary assessment tool","title":"","text":"","code":"DATA_PATH <- \"/Users/james/Desktop/data.csv\" SERV_DATA <- read_csv(DATA_PATH)  DII(SERV_DATA, SERV_DATA$RESPONDENTID, REPEATNUM=1, SERV_DATA$ALCOHOL_DII, SERV_DATA$VITB12_DII, SERV_DATA$VITB6_DII, SERV_DATA$BCAROTENE_DII, SERV_DATA$CAFFEINE_DII, SERV_DATA$CARB_DII, SERV_DATA$CHOLES_DII, SERV_DATA$KCAL_DII, SERV_DATA$EUGENOL_DII, SERV_DATA$TOTALFAT_DII, SERV_DATA$FIBER_DII, SERV_DATA$FOLICACID_DII, SERV_DATA$GARLIC_DII, SERV_DATA$GINGER_DII, SERV_DATA$IRON_DII, SERV_DATA$MG_DII, SERV_DATA$MUFA_DII, SERV_DATA$NIACIN_DII, SERV_DATA$N3FAT_DII, SERV_DATA$N6FAT_DII, SERV_DATA$ONION_DII, SERV_DATA$PROTEIN_DII, SERV_DATA$PUFA_DII, SERV_DATA$RIBOFLAVIN_DII, SERV_DATA$SAFFRON_DII, SERV_DATA$SATFAT_DII, SERV_DATA$SE_DII, SERV_DATA$THIAMIN_DII, SERV_DATA$TRANSFAT_DII, SERV_DATA$TURMERIC_DII, SERV_DATA$VITA_DII, SERV_DATA$VITC_DII, SERV_DATA$VITD_DII, SERV_DATA$VITE_DII, SERV_DATA$ZN_DII, SERV_DATA$TEA_DII, SERV_DATA$FLA3OL_DII, SERV_DATA$FLAVONES_DII, SERV_DATA$FLAVONOLS_DII, SERV_DATA$FLAVONONES_DII, SERV_DATA$ANTHOC_DII, SERV_DATA$ISOFLAVONES_DII, SERV_DATA$PEPPER_DII, SERV_DATA$THYME_DII, SERV_DATA$ROSEMARY_DII) #Use the example data data(\"DHQ3_exp\") DII(DHQ3_exp, DHQ3_exp$`Respondent ID`, 1, DHQ3_exp$`Alcohol (g)`, DHQ3_exp$`Vitamin B12 (mcg)`, DHQ3_exp$`Vitamin B6 (mg)`) ## It is normal to see warnings if you do not provide all arguments using DII. The algorithm will only count the arguments you enter to calculate the DII. All warnings are about the first column you don't use. For example, if you only entered alcohol, vitamin b12, and vitamin b6, all warnings would remind you that bcarotene is not found. ## Warning: Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## Unknown or uninitialised column: `BCAROTENE_DII`. ## # A tibble: 23 × 49 ## # Groups:   RESPONDENTID [23] ##    RESPONDENTID DII_ALL DII_NOETOH REPEATNUM ALCOHOL_DII VITB12_DII VITB6_DII ##           <dbl>   <dbl>      <dbl>     <dbl>       <dbl>      <dbl>     <dbl> ##  1            1  0.0479    -0.230          1       0.278    -0.0232   -0.207  ##  2            2  0.208     -0.0697         1       0.278    -0.0855    0.0157 ##  3            3 -0.115     -0.384          1       0.270    -0.0361   -0.348  ##  4            4  0.0194    -0.258          1       0.278    -0.0486   -0.210  ##  5            5  0.277      0.0425         1       0.234    -0.0760    0.119  ##  6            6  0.448      0.170          1       0.278    -0.0949    0.265  ##  7            7  0.348      0.0699         1       0.278    -0.0869    0.157  ##  8            8 -0.0124    -0.286          1       0.274    -0.0574   -0.229  ##  9            9  0.101     -0.0525         1       0.153    -0.0682    0.0157 ## 10           10  0.170     -0.108          1       0.277    -0.0297   -0.0778 ## # ℹ 13 more rows ## # ℹ 42 more variables: BCAROTENE_DII <dbl>, CAFFEINE_DII <int>, CARB_DII <int>, ## #   CHOLES_DII <int>, KCAL_DII <int>, EUGENOL_DII <int>, TOTALFAT_DII <int>, ## #   FIBER_DII <int>, FOLICACID_DII <int>, GARLIC_DII <int>, GINGER_DII <int>, ## #   IRON_DII <int>, MG_DII <int>, MUFA_DII <int>, NIACIN_DII <int>, ## #   N3FAT_DII <int>, N6FAT_DII <int>, ONION_DII <int>, PROTEIN_DII <int>, ## #   PUFA_DII <int>, RIBOFLAVIN_DII <int>, SAFFRON_DII <int>, …"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-acs2020_v1-or-acs2020_v2-for-your-own-dietary-assessment-tool","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating ACS2020_V1 or ACS2020_V2 for your own dietary assessment tool","title":"","text":"","code":"DATA_PATH <- \"/Users/james/Desktop/data.csv\" SERV_DATA <- read_csv(DATA_PATH)  ACS2020_V1(SERV_DATA, SERV_DATA$RESPONDENTID, SERV_DATA$GENDER, SERV_DATA$VEG_SERV_ACS2020, SERV_DATA$VEG_ITEMS_SERV_ACS2020, SERV_DATA$FRT_SERV_ACS2020, SERV_DATA$FRT_ITEMS_SERV_ACS2020, SERV_DATA$WGRAIN_SERV_ACS2020, SERV_DATA$SSB_FRTJ_SERV_ACS2020, SERV_DATA$REDPROC_MEAT_SERV_ACS2020, SERV_DATA$HPFRG_RATIO_SERV_ACS2020)  ACS2020_V2(SERV_DATA, SERV_DATA$RESPONDENTID, SERV_DATA$GENDER, SERV_DATA$TOTALKCAL_ACS2020, SERV_DATA$VEG_SERV_ACS2020, SERV_DATA$VEG_ITEMS_SERV_ACS2020, SERV_DATA$FRT_SERV_ACS2020, SERV_DATA$FRT_ITEMS_SERV_ACS2020, SERV_DATA$WGRAIN_SERV_ACS2020, SERV_DATA$SSB_FRTJ_SERV_ACS2020, SERV_DATA$REDPROC_MEAT_SERV_ACS2020, SERV_DATA$HPFRG_SERV_ACS2020)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"calculating-phdi-for-your-own-dietary-assessment-tool","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Calculating PHDI for your own dietary assessment tool","title":"","text":"","code":"#Use the example data data(\"PHDI_VALIDATION\")  PHDI(SERV_DATA=PHDI_VALIDATION, PHDI_VALIDATION$id, PHDI_VALIDATION$gender, PHDI_VALIDATION$TOTALKCAL_PHDI, PHDI_VALIDATION$WGRAIN_SERV_PHDI, PHDI_VALIDATION$STARCHY_VEG_SERV_PHDI, PHDI_VALIDATION$VEG_SERV_PHDI, PHDI_VALIDATION$FRT_SERV_PHDI, PHDI_VALIDATION$DAIRY_SERV_PHDI, PHDI_VALIDATION$REDPROC_MEAT_SERV_PHDI, PHDI_VALIDATION$POULTRY_SERV_PHDI, PHDI_VALIDATION$EGG_SERV_PHDI, PHDI_VALIDATION$FISH_SERV_PHDI, PHDI_VALIDATION$NUTS_SERV_PHDI, PHDI_VALIDATION$LEGUMES_SERV_PHDI, PHDI_VALIDATION$SOY_SERV_PHDI, PHDI_VALIDATION$ADDED_FAT_UNSAT_SERV_PHDI, PHDI_VALIDATION$ADDED_FAT_SAT_TRANS_SERV_PHDI, PHDI_VALIDATION$ADDED_SUGAR_SERV_PHDI) ## # A tibble: 26 × 19 ##    RESPONDENTID GENDER PHDI_ALL TOTALKCAL_PHDI PHDI_WGRAIN PHDI_STARCHY_VEG ##           <dbl>  <dbl>    <dbl>          <dbl>       <dbl>            <dbl> ##  1            1      2        0           2000           0                0 ##  2            2      2        0           2000           0                0 ##  3            3      2       14           2000           1                1 ##  4            4      2       28           2000           2                2 ##  5            5      2       42           2000           3                3 ##  6            6      2       56           2000           4                4 ##  7            7      2       70           2000           5                5 ##  8            8      2       84           2000           6                6 ##  9            9      2       98           2000           7                7 ## 10           10      2      112           2000           8                8 ## # ℹ 16 more rows ## # ℹ 13 more variables: PHDI_VEG <dbl>, PHDI_FRT <dbl>, PHDI_DAIRY <dbl>, ## #   PHDI_REDPROC_MEAT <dbl>, PHDI_POULTRY <dbl>, PHDI_EGG <dbl>, ## #   PHDI_FISH <dbl>, PHDI_NUTS <dbl>, PHDI_LEGUMES <dbl>, PHDI_SOY <dbl>, ## #   PHDI_ADDED_FAT_UNSAT <dbl>, PHDI_ADDED_FAT_SAT <dbl>, ## #   PHDI_ADDED_SUGAR <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"merge-2-dietary-index-results-together","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Merge 2 dietary index results together","title":"","text":"","code":"data(NHANES_20152016) data(NHANES_20172018)  # HEI_NHANES_FPED ## 2017-2018 day 1 and day 2 HEI2020_NHANES_FPED_1718 = HEI2020_NHANES_FPED(     FPED_PATH=NHANES_20172018$FPED,      NUTRIENT_PATH=NHANES_20172018$NUTRIENT,      DEMO_PATH=NHANES_20172018$DEMO,      FPED_PATH2=NHANES_20172018$FPED2,      NUTRIENT_PATH2=NHANES_20172018$NUTRIENT2)  ## 2015-2016 day 1 and day 2 HEI2020_NHANES_FPED_1516 = HEI2020_NHANES_FPED(     FPED_PATH=NHANES_20152016$FPED,      NUTRIENT_PATH=NHANES_20152016$NUTRIENT,      DEMO_PATH=NHANES_20152016$DEMO,      FPED_PATH2=NHANES_20152016$FPED2,      NUTRIENT_PATH2=NHANES_20152016$NUTRIENT2)  # Now, merge the two datasets HEI2020_NHANES_FPED_17181516 = rbind(HEI2020_NHANES_FPED_1718, HEI2020_NHANES_FPED_1516)  # Save the result on your computer # HEI2020_NHANES_FPED_17181516_df = as.data.frame(HEI2020_NHANES_FPED_17181516) # readr::write_csv(HEI2020_NHANES_FPED_17181516_df, \"/your_output_file_location/HEI2020_NHANES_FPED_17181516_df.csv\")"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"merge-dietary-index-results-with-other-nhanes-data","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Merge dietary index results with other NHANES data","title":"","text":"","code":"data(NHANES_20172018)  # HEI_NHANES_FPED ## 2017-2018 day 1 and day 2 HEI2020_NHANES_FPED_1718 = HEI2020_NHANES_FPED(     FPED_PATH=NHANES_20172018$FPED,      NUTRIENT_PATH=NHANES_20172018$NUTRIENT,      DEMO_PATH=NHANES_20172018$DEMO,      FPED_PATH2=NHANES_20172018$FPED2,      NUTRIENT_PATH2=NHANES_20172018$NUTRIENT2)  # Blood pressure data ## library(haven) BP_1718 = read_xpt(\"BPX_J.XPT\")  ## library(dplyr) BP_HEI2020_1718 = inner_join(HEI2020_NHANES_FPED_1718, BP_1718, by=\"SEQN\")"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/dietaryindex.html","id":"add-dietary-index-output-to-your-own-data-and-save-the-result","dir":"Articles","previous_headings":"Examples for using dietaryindex’s functions:","what":"Add dietary index output to your own data and save the result","title":"","text":"","code":"# Store the output of HEI2015 in \"HEI2015_output\" data(\"SERV_DATA_exp\") HEI2015_output = HEI2015(SERV_DATA_exp, SERV_DATA_exp$UserName, SERV_DATA_exp$TOTALKCAL, SERV_DATA_exp$TOTALFRT_SERV_HEI2015_exp, SERV_DATA_exp$FRT_SERV_HEI2015_exp, SERV_DATA_exp$VEG_SERV_HEI2015_exp, SERV_DATA_exp$GREENNBEAN_SERV_HEI2015_exp, SERV_DATA_exp$TOTALPRO_SERV_HEI2015_exp,  SERV_DATA_exp$SEAPLANTPRO_SERV_HEI2015_exp, SERV_DATA_exp$WHOLEGRAIN_SERV_HEI2015_exp, SERV_DATA_exp$DAIRY_SERV_HEI2015_exp, SERV_DATA_exp$FATTYACID_SERV_HEI2015_exp, SERV_DATA_exp$REFINEDGRAIN_SERV_HEI2015_exp,  SERV_DATA_exp$SODIUM_SERV_HEI2015_exp, SERV_DATA_exp$ADDEDSUGAR_SERV_HEI2015_exp, SERV_DATA_exp$SATFAT_SERV_HEI2015_exp)   # Merge the HEI2015_output with your own data by the participant ID # Here, the HEI2015_output'S participant ID is \"RESPONDENTID\", while the participant ID in your selected data may vary (SERV_DATA_exp's participant ID UserName) and it should be the column name of SERV_DATA$RESPONDENTID in the HEI2015 function Merged_HEI2015_output = left_join(SERV_DATA_exp, HEI2015_output, by=c(\"UserName\" = \"RESPONDENTID\"))  # Save the result on your computer readr::write_csv(Merged_HEI2015_output, \"/your_output_file_location/Merged_HEI2015_output.csv\")"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/validation.html","id":"load-packages-and-data","dir":"Articles","previous_headings":"","what":"Load packages and data","title":"Validation","text":"","code":"library(dietaryindex) # Load the package ## Loaded dietaryindex ## Thank you for using dietaryindex! ## Tutorials: https://github.com/jamesjiadazhan/dietaryindex ## Dietary index calculations vary by the research question of the analysis. Currently, dietaryindex only supports simple scoring algorithm methods for all dietary indexes. Please use dietaryindex responsibly according to your research question. For more information, please refer to this resource: https://epi.grants.cancer.gov/hei/tools.html. ## Cite us:  citation('dietaryindex') or ## Zhan JJ, Hodge RA, Dunlop AL, et al. Dietaryindex: a user-friendly and versatile R package for standardizing dietary pattern analysis in epidemiological and clinical studies. Am J Clin Nutr. Published online August 23, 2024. doi:10.1016/j.ajcnut.2024.08.021 library(readr) library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(haven)  # Load the data ## set up the working directory setwd(\"/Users/james/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Emory University - Ph.D./dietaryindex_package/Validation file for publication/Raw validation files\")  ACS2020_V1_VALIDATION = read_csv(\"ACS2020_V1_validation.csv\") ## Rows: 24 Columns: 20 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (20): id, gender, kcal, vegetable, vegetable_unique, fruit, fruit_unique... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ACS2020_V2_VALIDATION = read_csv(\"ACS2020_V2_validation.csv\") ## Rows: 24 Columns: 20 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (20): id, gender, kcal, vegetable, vegetable_unique, fruit, fruit_unique... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. AHEI_VALIDATION = read_csv(\"AHEI_validation.csv\") ## Rows: 22 Columns: 27 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (27): id, gender, kcal, vegetable, fruit, whole_grain, nut_legume, n3_fa... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. AHEIP_VALIDATION = read_csv(\"AHEIP_validation.csv\") ## Rows: 11 Columns: 22 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (22): id, gender, kcal, vegetable, whole_fruit, white_meat_red_meat, fib... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. DASH_VALIDATION = read_csv(\"DASH_validation.csv\") ## Rows: 10 Columns: 20 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (20): id, gender, kcal, fruit, vegetable, nut_legume, whole_grain, low_f... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. DASHI_VALIDATION = read_csv(\"DASHI_validation.csv\") ## Rows: 11 Columns: 22 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (22): id, gender, kcal, total_fat, sat_fat, protein, cholesterol, fiber,... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. DII_VALIDATION = read_csv(\"DII_validation.csv\") ## Rows: 3 Columns: 92 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (92): id, Alcohol, vitamin B12, vitamin B6, Beta-carotene, Caffeine, Car... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. HEI2015_VALIDATION = read_csv(\"HEI2015_validation.csv\") ## Rows: 11 Columns: 30 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (30): id, gender, kcal, total_fruit, whole_fruit, total_vegetable, green... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. HEI2020_VALIDATION = read_csv(\"HEI2020_validation.csv\") ## Rows: 22 Columns: 31 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (31): id, gender, age, kcal, total_fruit, whole_fruit, total_vegetable, ... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. MED_VALIDATION = read_csv(\"MED_validation.csv\") ## Rows: 11 Columns: 22 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (22): id, gender, kcal, fruit, vegetable, whole_grain, legume, nut, fish... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. MEDI_V2_VALIDATION = read_csv(\"MEDI_V2_validation.csv\") ## Rows: 11 Columns: 26 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (26): id, gender, kcal, olive_oil, vegetable, fruit, legume, nut, fish, ... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. MEDI_VALIDATION = read_csv(\"MEDI_validation.csv\") ## Rows: 11 Columns: 26 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (26): id, gender, kcal, olive_oil, vegetable, fruit, legume, nut, fish, ... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. PHDI_VALIDATION = read_csv(\"PHDI_validation.csv\") ## Rows: 26 Columns: 34 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (34): id, gender, TOTALKCAL_PHDI, WGRAIN_SERV_PHDI, STARCHY_VEG_SERV_PHD... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/validation.html","id":"calculate-multiple-dietart-indexes-using-the-simulation-datasets-sample-sizes-range-from-10-to-26-","dir":"Articles","previous_headings":"","what":"Calculate multiple dietart indexes using the simulation datasets (sample sizes range from 10 to 26).","title":"Validation","text":"","code":"# Generate the validation results and save them setwd(\"/Users/james/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Emory University - Ph.D./dietaryindex_package/Validation file for publication/Final validation files\")  ## ACS2020 validation (Version 1) ACS2020_V1_VALIDATION_RESULT = ACS2020_V1(     SERV_DATA = ACS2020_V1_VALIDATION,      RESPONDENTID = ACS2020_V1_VALIDATION$id,      GENDER = ACS2020_V1_VALIDATION$gender,      VEG_SERV_ACS2020 = ACS2020_V1_VALIDATION$vegetable,      VEG_ITEMS_SERV_ACS2020 = ACS2020_V1_VALIDATION$vegetable_unique,      FRT_SERV_ACS2020 = ACS2020_V1_VALIDATION$fruit,      FRT_ITEMS_SERV_ACS2020 = ACS2020_V1_VALIDATION$fruit_unique,      WGRAIN_SERV_ACS2020 = ACS2020_V1_VALIDATION$whole_grain,      REDPROC_MEAT_SERV_ACS2020 = ACS2020_V1_VALIDATION$red_meat,      HPFRG_RATIO_SERV_ACS2020 = ACS2020_V1_VALIDATION$process_food,      SSB_FRTJ_SERV_ACS2020 = ACS2020_V1_VALIDATION$ssb) ## [1] \"Reminder: this ACS2020_V1 index uses quartiles to rank participants' food/drink serving sizes and then calculate the component scores, which may generate results that are specific to your study population but not comparable to other populations.\" # Merge the validation data with the result ACS2020_V1_VALIDATION_RESULT_FINAL = ACS2020_V1_VALIDATION %>%     left_join(ACS2020_V1_VALIDATION_RESULT, by = c(\"id\" = \"RESPONDENTID\"))  # Save the result write_csv(ACS2020_V1_VALIDATION_RESULT_FINAL, \"ACS2020_V1_validation_result.csv\")  ## ACS2020 validation (Version 2) ACS2020_V2_VALIDATION_RESULT = ACS2020_V2(     SERV_DATA = ACS2020_V2_VALIDATION,      RESPONDENTID = ACS2020_V2_VALIDATION$id,      GENDER = ACS2020_V2_VALIDATION$gender,      VEG_SERV_ACS2020 = ACS2020_V2_VALIDATION$vegetable,      VEG_ITEMS_SERV_ACS2020 = ACS2020_V2_VALIDATION$vegetable_unique,      FRT_SERV_ACS2020 = ACS2020_V2_VALIDATION$fruit,      FRT_ITEMS_SERV_ACS2020 = ACS2020_V2_VALIDATION$fruit_unique,      WGRAIN_SERV_ACS2020 = ACS2020_V2_VALIDATION$whole_grain,      REDPROC_MEAT_SERV_ACS2020 = ACS2020_V2_VALIDATION$red_meat,      HPFRG_SERV_ACS2020 = ACS2020_V2_VALIDATION$process_food,      SSB_FRTJ_SERV_ACS2020 = ACS2020_V2_VALIDATION$ssb,     TOTALKCAL_ACS2020 = ACS2020_V2_VALIDATION$kcal) ## [1] \"Reminder: this ACS2020_V2 index uses quartiles to rank participants' food/drink serving sizes and then calculate the component scores, which may generate results that are specific to your study population but not comparable to other populations.\" # Merge the validation data with the result ACS2020_V2_VALIDATION_RESULT_FINAL = ACS2020_V2_VALIDATION %>%     left_join(ACS2020_V2_VALIDATION_RESULT, by = c(\"id\" = \"RESPONDENTID\"))  # Save the result write_csv(ACS2020_V2_VALIDATION_RESULT_FINAL, \"ACS2020_V2_validation_result.csv\")  ## AHEI validation AHEI_VALIDATION_RESULT = AHEI(     SERV_DATA = AHEI_VALIDATION,     RESPONDENTID = AHEI_VALIDATION$id,     GENDER = AHEI_VALIDATION$gender,     TOTALKCAL_AHEI = AHEI_VALIDATION$kcal,     VEG_SERV_AHEI = AHEI_VALIDATION$vegetable,     FRT_SERV_AHEI = AHEI_VALIDATION$fruit,     WGRAIN_SERV_AHEI = AHEI_VALIDATION$whole_grain,     NUTSLEG_SERV_AHEI = AHEI_VALIDATION$nut_legume,     N3FAT_SERV_AHEI = AHEI_VALIDATION$n3_fat,     PUFA_SERV_AHEI = AHEI_VALIDATION$pufa,     SSB_FRTJ_SERV_AHEI = AHEI_VALIDATION$ssb_fruit_juice,     REDPROC_MEAT_SERV_AHEI = AHEI_VALIDATION$red_processed_meat,     TRANS_SERV_AHEI = AHEI_VALIDATION$trans_fat,     SODIUM_SERV_AHEI = AHEI_VALIDATION$sodium,     ALCOHOL_SERV_AHEI = AHEI_VALIDATION$alcohol     )  # Merge the validation data with the result AHEI_VALIDATION_RESULT_FINAL = AHEI_VALIDATION %>%     left_join(AHEI_VALIDATION_RESULT, by = c(\"id\" = \"RESPONDENTID\"))  # Save the result write_csv(AHEI_VALIDATION_RESULT_FINAL, \"AHEI_validation_result.csv\")  ## HEI2015 validation HEI2015_VALIDATION_RESULT = HEI2015(     SERV_DATA = HEI2015_VALIDATION,     RESPONDENTID = HEI2015_VALIDATION$id,     TOTALKCAL_HEI2015 = HEI2015_VALIDATION$kcal,     TOTALFRT_SERV_HEI2015 = HEI2015_VALIDATION$total_fruit,     FRT_SERV_HEI2015 = HEI2015_VALIDATION$whole_fruit,     VEG_SERV_HEI2015 = HEI2015_VALIDATION$total_vegetable,     GREENNBEAN_SERV_HEI2015 = HEI2015_VALIDATION$green_and_bean,     TOTALPRO_SERV_HEI2015 = HEI2015_VALIDATION$total_protein,     SEAPLANTPRO_SERV_HEI2015 = HEI2015_VALIDATION$seafood_plant_protein,     WHOLEGRAIN_SERV_HEI2015 = HEI2015_VALIDATION$whole_grain,     DAIRY_SERV_HEI2015 = HEI2015_VALIDATION$dairy,     FATTYACID_SERV_HEI2015 = HEI2015_VALIDATION$fatty_acid,     REFINEDGRAIN_SERV_HEI2015 = HEI2015_VALIDATION$refined_grain,     SODIUM_SERV_HEI2015 = HEI2015_VALIDATION$sodium,     ADDEDSUGAR_SERV_HEI2015 = HEI2015_VALIDATION$added_sugar,     SATFAT_SERV_HEI2015 = HEI2015_VALIDATION$saturated_fat )  # Merge the validation data with the result HEI2015_VALIDATION_RESULT_FINAL = HEI2015_VALIDATION %>%     left_join(HEI2015_VALIDATION_RESULT, by = c(\"id\" = \"RESPONDENTID\"))  # Save the merged result write_csv(HEI2015_VALIDATION_RESULT_FINAL, \"HEI2015_validation_result.csv\")  ## HEI2020 validation HEI2020_VALIDATION_RESULT = HEI2020(     SERV_DATA = HEI2020_VALIDATION,     RESPONDENTID = HEI2020_VALIDATION$id,     AGE = HEI2020_VALIDATION$age,     TOTALKCAL_HEI2020 = HEI2020_VALIDATION$kcal,     TOTALFRT_SERV_HEI2020 = HEI2020_VALIDATION$total_fruit,     FRT_SERV_HEI2020 = HEI2020_VALIDATION$whole_fruit,     VEG_SERV_HEI2020 = HEI2020_VALIDATION$total_vegetable,     GREENNBEAN_SERV_HEI2020 = HEI2020_VALIDATION$green_and_bean,     TOTALPRO_SERV_HEI2020 = HEI2020_VALIDATION$total_protein,     SEAPLANTPRO_SERV_HEI2020 = HEI2020_VALIDATION$seafood_plant_protein,     WHOLEGRAIN_SERV_HEI2020 = HEI2020_VALIDATION$whole_grain,     DAIRY_SERV_HEI2020 = HEI2020_VALIDATION$dairy,     FATTYACID_SERV_HEI2020 = HEI2020_VALIDATION$fatty_acid,     REFINEDGRAIN_SERV_HEI2020 = HEI2020_VALIDATION$refined_grain,     SODIUM_SERV_HEI2020 = HEI2020_VALIDATION$sodium,     ADDEDSUGAR_SERV_HEI2020 = HEI2020_VALIDATION$added_sugar,     SATFAT_SERV_HEI2020 = HEI2020_VALIDATION$saturated_fat )  HEI2020_VALIDATION_RESULT_FINAL = HEI2020_VALIDATION %>%     left_join(HEI2020_VALIDATION_RESULT, by = c(\"id\" = \"RESPONDENTID\"))  # Save the merged result write_csv(HEI2020_VALIDATION_RESULT_FINAL, \"HEI2020_validation_result.csv\")  ## AHEIP validation AHEIP_VALIDATION_RESULT = AHEIP(     SERV_DATA = AHEIP_VALIDATION,     RESPONDENTID = AHEIP_VALIDATION$id,     VEG_SERV_AHEIP = AHEIP_VALIDATION$vegetable,     FRT_SERV_AHEIP = AHEIP_VALIDATION$whole_fruit,     WHITERED_RT_SERV_AHEIP = AHEIP_VALIDATION$white_meat_red_meat,     FIBER_SERV_AHEIP = AHEIP_VALIDATION$fiber,     TRANS_SERV_AHEIP = AHEIP_VALIDATION$trans_fat,     POLYSAT_RT_SERV_AHEIP = AHEIP_VALIDATION$poly_fat_sat_fat,     CALCIUM_SERV_AHEIP = AHEIP_VALIDATION$calcium,     FOLATE_SERV_AHEIP = AHEIP_VALIDATION$folate,     IRON_SERV_AHEIP = AHEIP_VALIDATION$iron )  # Merge the validation data with the result AHEIP_VALIDATION_RESULT_FINAL = AHEIP_VALIDATION %>%     left_join(AHEIP_VALIDATION_RESULT, by = c(\"id\" = \"RESPONDENTID\"))  # Save the merged result write_csv(AHEIP_VALIDATION_RESULT_FINAL, \"AHEIP_validation_result.csv\")  ## DASH validation DASH_VALIDATION_RESULT = DASH(     SERV_DATA = DASH_VALIDATION,     RESPONDENTID = DASH_VALIDATION$id,     TOTALKCAL_DASH = DASH_VALIDATION$kcal,     FRT_FRTJ_SERV_DASH = DASH_VALIDATION$fruit,     VEG_SERV_DASH = DASH_VALIDATION$vegetable,     NUTSLEG_SERV_DASH = DASH_VALIDATION$nut_legume,     WGRAIN_SERV_DASH = DASH_VALIDATION$whole_grain,     LOWF_DAIRY_SERV_DASH = DASH_VALIDATION$low_fat_dairy,     SODIUM_SERV_DASH = DASH_VALIDATION$sodium,     REDPROC_MEAT_SERV_DASH = DASH_VALIDATION$red_processed_meat,     SSB_FRTJ_SERV_DASH = DASH_VALIDATION$ssb ) ## Reminder: this DASH index uses quintiles to rank participants' food/drink serving sizes and then calculate DASH component scores, which may generate results that are specific to your study population but not comparable to other populations. # Merge the validation data with the result DASH_VALIDATION_RESULT_FINAL = DASH_VALIDATION %>%     left_join(DASH_VALIDATION_RESULT, by = c(\"id\" = \"RESPONDENTID\"))  # Save the merged result write_csv(DASH_VALIDATION_RESULT_FINAL, \"DASH_validation_result.csv\")  ## DASHI validation DASHI_VALIDATION_RESULT = DASHI(     SERV_DATA = DASHI_VALIDATION,      RESPONDENTID = DASHI_VALIDATION$id,      TOTALKCAL_DASHI = DASHI_VALIDATION$kcal,      TOTAL_FAT_DASHI = DASHI_VALIDATION$total_fat,      SAT_FAT_DASHI = DASHI_VALIDATION$sat_fat,      PROTEIN_DASHI = DASHI_VALIDATION$protein,      CHOLESTEROL_DASHI = DASHI_VALIDATION$cholesterol,      FIBER_DASHI = DASHI_VALIDATION$fiber,      POTASSIUM_DASHI = DASHI_VALIDATION$potassium,      MAGNESIUM_DASHI = DASHI_VALIDATION$magnesium,     CALCIUM_DASHI = DASHI_VALIDATION$calcium,      SODIUM_DASHI = DASHI_VALIDATION$sodium )  # Merge the validation data with the result DASHI_VALIDATION_RESULT_FINAL = DASHI_VALIDATION %>%     left_join(DASHI_VALIDATION_RESULT, by = c(\"id\" = \"RESPONDENTID\"))  # Save the merged result write_csv(DASHI_VALIDATION_RESULT_FINAL, \"DASHI_validation_result.csv\")  ## MED validation MED_VALIDATION_RESULT = MED(     SERV_DATA = MED_VALIDATION,      RESPONDENTID = MED_VALIDATION$id,      FRT_FRTJ_SERV_MED = MED_VALIDATION$fruit,      VEG_SERV_MED = MED_VALIDATION$vegetable,      WGRAIN_SERV_MED = MED_VALIDATION$whole_grain,      LEGUMES_SERV_MED = MED_VALIDATION$legume,      NUTS_SERV_MED = MED_VALIDATION$nut,      FISH_SERV_MED = MED_VALIDATION$fish,      REDPROC_MEAT_SERV_MED = MED_VALIDATION$red_processed_meat,      MONSATFAT_SERV_MED = MED_VALIDATION$monofat_satfat,      ALCOHOL_SERV_MED = MED_VALIDATION$alcohol) ## Reminder: this MED index uses medians to rank participants' food/drink serving sizes and then calculate MED component scores, which may generate results that are specific to your study population but not comparable to other populations. # Merge the validation data with the result MED_VALIDATION_RESULT_FINAL = MED_VALIDATION %>%     left_join(MED_VALIDATION_RESULT, by = c(\"id\" = \"RESPONDENTID\"))  # Save the result write_csv(MED_VALIDATION_RESULT_FINAL, \"MED_VALIDATION_RESULT_FINAL.csv\")  ## MEDI validation MEDI_VALIDATION_RESULT = MEDI(     SERV_DATA = MEDI_VALIDATION,      RESPONDENTID = MEDI_VALIDATION$id,      OLIVE_OIL_SERV_MEDI = MEDI_VALIDATION$olive_oil,      VEG_SERV_MEDI = MEDI_VALIDATION$vegetable,      FRT_SERV_MEDI = MEDI_VALIDATION$fruit,      LEGUMES_SERV_MEDI = MEDI_VALIDATION$legume,      NUTS_SERV_MEDI = MEDI_VALIDATION$nut,      FISH_SEAFOOD_SERV_MEDI = MEDI_VALIDATION$fish,      ALCOHOL_SERV_MEDI = MEDI_VALIDATION$alcohol,      SSB_SERV_MEDI = MEDI_VALIDATION$ssb,      SWEETS_SERV_MEDI = MEDI_VALIDATION$sweets,      DISCRET_FAT_SERV_MEDI = MEDI_VALIDATION$discret_fat,      REDPROC_MEAT_SERV_MEDI = MEDI_VALIDATION$red_meat)  # Merge the validation data with the result MEDI_VALIDATION_RESULT_FINAL = MEDI_VALIDATION %>%     left_join(MEDI_VALIDATION_RESULT, by = c(\"id\" = \"RESPONDENTID\"))  # Save the result write_csv(MEDI_VALIDATION_RESULT_FINAL, \"MEDI_validation_result.csv\")  ## MEDI_V2 validation MEDI_V2_VALIDATION_RESULT = MEDI_V2(     SERV_DATA = MEDI_V2_VALIDATION,      RESPONDENTID = MEDI_V2_VALIDATION$id,      OLIVE_OIL_SERV_MEDI = MEDI_V2_VALIDATION$olive_oil,      VEG_SERV_MEDI = MEDI_V2_VALIDATION$vegetable,      FRT_SERV_MEDI = MEDI_V2_VALIDATION$fruit,      LEGUMES_SERV_MEDI = MEDI_V2_VALIDATION$legume,      NUTS_SERV_MEDI = MEDI_V2_VALIDATION$nut,      FISH_SEAFOOD_SERV_MEDI = MEDI_V2_VALIDATION$fish,      ALCOHOL_SERV_MEDI = MEDI_V2_VALIDATION$alcohol,      SSB_SERV_MEDI = MEDI_V2_VALIDATION$ssb,      SWEETS_SERV_MEDI = MEDI_V2_VALIDATION$sweets,      DISCRET_FAT_SERV_MEDI = MEDI_V2_VALIDATION$discret_fat,      REDPROC_MEAT_SERV_MEDI = MEDI_V2_VALIDATION$red_meat)  # Merge the validation data with the result MEDI_V2_VALIDATION_RESULT_FINAL = MEDI_V2_VALIDATION %>%     left_join(MEDI_V2_VALIDATION_RESULT, by = c(\"id\" = \"RESPONDENTID\"))  # Save the result write_csv(MEDI_V2_VALIDATION_RESULT_FINAL, \"MEDI_V2_validation_result.csv\")  ## PHDI validation PHDI_VALIDATION_RESULT = PHDI(     SERV_DATA=PHDI_VALIDATION,      PHDI_VALIDATION$id,      PHDI_VALIDATION$gender,      PHDI_VALIDATION$TOTALKCAL_PHDI,      PHDI_VALIDATION$WGRAIN_SERV_PHDI,      PHDI_VALIDATION$STARCHY_VEG_SERV_PHDI,      PHDI_VALIDATION$VEG_SERV_PHDI,      PHDI_VALIDATION$FRT_SERV_PHDI,      PHDI_VALIDATION$DAIRY_SERV_PHDI,      PHDI_VALIDATION$REDPROC_MEAT_SERV_PHDI,      PHDI_VALIDATION$POULTRY_SERV_PHDI,      PHDI_VALIDATION$EGG_SERV_PHDI,      PHDI_VALIDATION$FISH_SERV_PHDI,      PHDI_VALIDATION$NUTS_SERV_PHDI,      PHDI_VALIDATION$LEGUMES_SERV_PHDI,      PHDI_VALIDATION$SOY_SERV_PHDI,      PHDI_VALIDATION$ADDED_FAT_UNSAT_SERV_PHDI,      PHDI_VALIDATION$ADDED_FAT_SAT_TRANS_SERV_PHDI,      PHDI_VALIDATION$ADDED_SUGAR_SERV_PHDI     )   # Merge the validation data with the result PHDI_VALIDATION_RESULT_FINAL = PHDI_VALIDATION %>%     left_join(PHDI_VALIDATION_RESULT, by = c(\"id\" = \"RESPONDENTID\"))  # Save the result write_csv(PHDI_VALIDATION_RESULT_FINAL, \"PHDI_validation_result.csv\")  ## DII validation DII_VALIDATION_RESULT = DII(SERV_DATA = DII_VALIDATION, RESPONDENTID = DII_VALIDATION$id, REPEATNUM = 1, ALCOHOL_DII = DII_VALIDATION$Alcohol, VITB12_DII = DII_VALIDATION$`vitamin B12`, VITB6_DII = DII_VALIDATION$`vitamin B6`, BCAROTENE_DII = DII_VALIDATION$`Beta-carotene`, CAFFEINE_DII = DII_VALIDATION$Caffeine, CARB_DII = DII_VALIDATION$Carbohydrate, CHOLES_DII = DII_VALIDATION$Cholesterol, KCAL_DII = DII_VALIDATION$Energy, EUGENOL_DII = DII_VALIDATION$Eugenol, TOTALFAT_DII = DII_VALIDATION$`Total fat`, FIBER_DII = DII_VALIDATION$Fiber, FOLICACID_DII = DII_VALIDATION$`Folic acid`, GARLIC_DII = DII_VALIDATION$Garlic, GINGER_DII = DII_VALIDATION$Ginger, IRON_DII = DII_VALIDATION$Iron, MG_DII = DII_VALIDATION$Magnesium, MUFA_DII = DII_VALIDATION$MUFA, NIACIN_DII = DII_VALIDATION$Niacin, N3FAT_DII = DII_VALIDATION$`n-3 fatty acid`, N6FAT_DII = DII_VALIDATION$`n-6 fatty acid`, ONION_DII = DII_VALIDATION$Onion, PROTEIN_DII = DII_VALIDATION$Protein, PUFA_DII = DII_VALIDATION$PUFA, RIBOFLAVIN_DII = DII_VALIDATION$Riboflavin, SAFFRON_DII = DII_VALIDATION$Saffron, SATFAT_DII = DII_VALIDATION$`Saturated fat`, SE_DII = DII_VALIDATION$Selenium, THIAMIN_DII = DII_VALIDATION$Thiamin, TRANSFAT_DII = DII_VALIDATION$`Trans fat`, TURMERIC_DII = DII_VALIDATION$Turmeric, VITA_DII = DII_VALIDATION$`Vitamin A`, VITC_DII = DII_VALIDATION$`Vitamin C`, VITD_DII = DII_VALIDATION$`Vitamin D`, VITE_DII = DII_VALIDATION$`Vitamin E`, ZN_DII = DII_VALIDATION$Zinc, TEA_DII = DII_VALIDATION$`Green/black tea`, FLA3OL_DII = DII_VALIDATION$`Flavan-3-ol`, FLAVONES_DII = DII_VALIDATION$Flavones, FLAVONOLS_DII = DII_VALIDATION$Flavonols, FLAVONONES_DII = DII_VALIDATION$Flavonones, ANTHOC_DII = DII_VALIDATION$Anthocyanidins, ISOFLAVONES_DII = DII_VALIDATION$`Isoflavones`, PEPPER_DII = DII_VALIDATION$Pepper, THYME_DII = DII_VALIDATION$Thyme_oregano, ROSEMARY_DII = DII_VALIDATION$Rosemary) ## It is normal to see warnings if you do not provide all arguments using DII. The algorithm will only count the arguments you enter to calculate the DII. All warnings are about the first column you don't use. For example, if you only entered alcohol, vitamin b12, and vitamin b6, all warnings would remind you that bcarotene is not found. # Merge the validation data with the result DII_VALIDATION_RESULT_FINAL = DII_VALIDATION %>%     left_join(DII_VALIDATION_RESULT, by = c(\"id\" = \"RESPONDENTID\"))  # Save the result write_csv(DII_VALIDATION_RESULT_FINAL, \"DII_validation_result.csv\")"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/validation.html","id":"use-dietaryindex-to-calculate-hei2015-using-the-nhanes-2017-2018-data-n7122-","dir":"Articles","previous_headings":"","what":"Use dietaryindex to calculate HEI2015 using the NHANES 2017-2018 data (n=7122).","title":"Validation","text":"","code":"data(\"NHANES_20172018\")  head(NHANES_20172018) ## $FPED ## # A tibble: 8,704 × 51 ##     SEQN RIAGENDR RIDAGEYR RIDRETH3 SDMVPSU SDMVSTRA INDFMIN2 INDFMPIR WTDRD1 ##    <dbl>    <dbl>    <dbl>    <dbl>   <dbl>    <dbl>    <dbl>    <dbl>  <dbl> ##  1 93703        2        2        6       2      145       15     5        0  ##  2 93704        1        2        3       1      143       15     5    81714. ##  3 93705        2       66        4       2      145        3     0.82  7186. ##  4 93706        1       18        6       2      134       NA    NA     6464. ##  5 93707        1       13        7       1      138       10     1.88 15334. ##  6 93708        2       66        6       2      138        6     1.63 10826. ##  7 93709        2       75        4       1      136        2     0.41     0  ##  8 93710        2        0        3       1      134       15     4.9   8616. ##  9 93711        1       56        6       2      134       15     5     9098. ## 10 93712        1       18        1       2      147        4     0.76 60947. ## # ℹ 8,694 more rows ## # ℹ 42 more variables: WTDR2D <dbl>, DR1DRSTZ <dbl>, DRABF <dbl>, DRDINT <dbl>, ## #   DR1TNUMF <dbl>, DR1T_F_TOTAL <dbl>, DR1T_F_CITMLB <dbl>, ## #   DR1T_F_OTHER <dbl>, DR1T_F_JUICE <dbl>, DR1T_V_TOTAL <dbl>, ## #   DR1T_V_DRKGR <dbl>, DR1T_V_REDOR_TOTAL <dbl>, DR1T_V_REDOR_TOMATO <dbl>, ## #   DR1T_V_REDOR_OTHER <dbl>, DR1T_V_STARCHY_TOTAL <dbl>, ## #   DR1T_V_STARCHY_POTATO <dbl>, DR1T_V_STARCHY_OTHER <dbl>, … ##  ## $NUTRIENT ## # A tibble: 8,704 × 168 ##     SEQN WTDRD1 WTDR2D DR1DRSTZ DR1EXMER DRABF DRDINT DR1DBIH DR1DAY DR1LANG ##    <dbl>  <dbl>  <dbl>    <dbl>    <dbl> <dbl>  <dbl>   <dbl>  <dbl>   <dbl> ##  1 93703     0     NA         5       NA    NA     NA      NA     NA      NA ##  2 93704 81714. 82443.        1       49     2      2       7      2       1 ##  3 93705  7186.  5640.        1       73     2      2       5      1       1 ##  4 93706  6464.     0         1       86     2      1      NA      6       1 ##  5 93707 15334. 22707.        1       81     2      2      14      2       1 ##  6 93708 10826. 22482.        1       73     2      2      41      7       6 ##  7 93709     0     NA         5       NA    NA     NA      NA     NA      NA ##  8 93710  8616.  7185.        1       14     2      2      16      6       1 ##  9 93711  9098.  8230.        1       86     2      2      13      6       1 ## 10 93712 60947. 89066.        1       88     2      2      14      3       1 ## # ℹ 8,694 more rows ## # ℹ 158 more variables: DR1MRESP <dbl>, DR1HELP <dbl>, DBQ095Z <dbl>, ## #   DBD100 <dbl>, DRQSPREP <dbl>, DR1STY <dbl>, DR1SKY <dbl>, DRQSDIET <dbl>, ## #   DRQSDT1 <dbl>, DRQSDT2 <dbl>, DRQSDT3 <dbl>, DRQSDT4 <dbl>, DRQSDT5 <dbl>, ## #   DRQSDT6 <dbl>, DRQSDT7 <dbl>, DRQSDT8 <dbl>, DRQSDT9 <dbl>, DRQSDT10 <dbl>, ## #   DRQSDT11 <dbl>, DRQSDT12 <dbl>, DRQSDT91 <dbl>, DR1TNUMF <dbl>, ## #   DR1TKCAL <dbl>, DR1TPROT <dbl>, DR1TCARB <dbl>, DR1TSUGR <dbl>, … ##  ## $DEMO ## # A tibble: 9,254 × 46 ##     SEQN SDDSRVYR RIDSTATR RIAGENDR RIDAGEYR RIDAGEMN RIDRETH1 RIDRETH3 RIDEXMON ##    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> ##  1 93703       10        2        2        2       NA        5        6        2 ##  2 93704       10        2        1        2       NA        3        3        1 ##  3 93705       10        2        2       66       NA        4        4        2 ##  4 93706       10        2        1       18       NA        5        6        2 ##  5 93707       10        2        1       13       NA        5        7        2 ##  6 93708       10        2        2       66       NA        5        6        2 ##  7 93709       10        2        2       75       NA        4        4        1 ##  8 93710       10        2        2        0       11        3        3        2 ##  9 93711       10        2        1       56       NA        5        6        2 ## 10 93712       10        2        1       18       NA        1        1        2 ## # ℹ 9,244 more rows ## # ℹ 37 more variables: RIDEXAGM <dbl>, DMQMILIZ <dbl>, DMQADFC <dbl>, ## #   DMDBORN4 <dbl>, DMDCITZN <dbl>, DMDYRSUS <dbl>, DMDEDUC3 <dbl>, ## #   DMDEDUC2 <dbl>, DMDMARTL <dbl>, RIDEXPRG <dbl>, SIALANG <dbl>, ## #   SIAPROXY <dbl>, SIAINTRP <dbl>, FIALANG <dbl>, FIAPROXY <dbl>, ## #   FIAINTRP <dbl>, MIALANG <dbl>, MIAPROXY <dbl>, MIAINTRP <dbl>, ## #   AIALANGA <dbl>, DMDHHSIZ <dbl>, DMDFMSIZ <dbl>, DMDHHSZA <dbl>, … ##  ## $NUTRIENT_IND ## # A tibble: 112,683 × 84 ##     SEQN WTDRD1 WTDR2D DR1ILINE DR1DRSTZ DR1EXMER DRABF DRDINT DR1DBIH DR1DAY ##    <dbl>  <dbl>  <dbl>    <dbl>    <dbl>    <dbl> <dbl>  <dbl>   <dbl>  <dbl> ##  1 93704 81714. 82443.        1        1       49     2      2       7      2 ##  2 93704 81714. 82443.        2        1       49     2      2       7      2 ##  3 93704 81714. 82443.        3        1       49     2      2       7      2 ##  4 93704 81714. 82443.        4        1       49     2      2       7      2 ##  5 93704 81714. 82443.        5        1       49     2      2       7      2 ##  6 93704 81714. 82443.        6        1       49     2      2       7      2 ##  7 93704 81714. 82443.        7        1       49     2      2       7      2 ##  8 93704 81714. 82443.        8        1       49     2      2       7      2 ##  9 93704 81714. 82443.        9        1       49     2      2       7      2 ## 10 93704 81714. 82443.       10        1       49     2      2       7      2 ## # ℹ 112,673 more rows ## # ℹ 74 more variables: DR1LANG <dbl>, DR1CCMNM <dbl>, DR1CCMTX <dbl>, ## #   DR1_020 <time>, DR1_030Z <dbl>, DR1FS <dbl>, DR1_040Z <dbl>, ## #   DR1IFDCD <dbl>, DR1IGRMS <dbl>, DR1IKCAL <dbl>, DR1IPROT <dbl>, ## #   DR1ICARB <dbl>, DR1ISUGR <dbl>, DR1IFIBE <dbl>, DR1ITFAT <dbl>, ## #   DR1ISFAT <dbl>, DR1IMFAT <dbl>, DR1IPFAT <dbl>, DR1ICHOL <dbl>, ## #   DR1IATOC <dbl>, DR1IATOA <dbl>, DR1IRET <dbl>, DR1IVARA <dbl>, … ##  ## $FPED_IND ## # A tibble: 112,683 × 55 ##     SEQN RIAGENDR RIDAGEYR RIDRETH3 SDMVPSU SDMVSTRA INDFMIN2 INDFMPIR WTDRD1 ##    <dbl>    <dbl>    <dbl>    <dbl>   <dbl>    <dbl>    <dbl>    <dbl>  <dbl> ##  1 93704        1        2        3       1      143       15        5 81714. ##  2 93704        1        2        3       1      143       15        5 81714. ##  3 93704        1        2        3       1      143       15        5 81714. ##  4 93704        1        2        3       1      143       15        5 81714. ##  5 93704        1        2        3       1      143       15        5 81714. ##  6 93704        1        2        3       1      143       15        5 81714. ##  7 93704        1        2        3       1      143       15        5 81714. ##  8 93704        1        2        3       1      143       15        5 81714. ##  9 93704        1        2        3       1      143       15        5 81714. ## 10 93704        1        2        3       1      143       15        5 81714. ## # ℹ 112,673 more rows ## # ℹ 46 more variables: WTDR2D <dbl>, DR1DRSTZ <dbl>, DRABF <dbl>, DRDINT <dbl>, ## #   DR1TNUMF <dbl>, DR1ILINE <dbl>, DR1IFDCD <dbl>, DR1IGRMS <dbl>, ## #   DESCRIPTION <chr>, DR1I_F_TOTAL <dbl>, DR1I_F_CITMLB <dbl>, ## #   DR1I_F_OTHER <dbl>, DR1I_F_JUICE <dbl>, DR1I_V_TOTAL <dbl>, ## #   DR1I_V_DRKGR <dbl>, DR1I_V_REDOR_TOTAL <dbl>, DR1I_V_REDOR_TOMATO <dbl>, ## #   DR1I_V_REDOR_OTHER <dbl>, DR1I_V_STARCHY_TOTAL <dbl>, … ##  ## $FPED2 ## # A tibble: 8,704 × 51 ##     SEQN RIAGENDR RIDAGEYR RIDRETH3 SDMVPSU SDMVSTRA INDFMIN2 INDFMPIR WTDRD1 ##    <dbl>    <dbl>    <dbl>    <dbl>   <dbl>    <dbl>    <dbl>    <dbl>  <dbl> ##  1 93703        2        2        6       2      145       15     5        0  ##  2 93704        1        2        3       1      143       15     5    81714. ##  3 93705        2       66        4       2      145        3     0.82  7186. ##  4 93706        1       18        6       2      134       NA    NA     6464. ##  5 93707        1       13        7       1      138       10     1.88 15334. ##  6 93708        2       66        6       2      138        6     1.63 10826. ##  7 93709        2       75        4       1      136        2     0.41     0  ##  8 93710        2        0        3       1      134       15     4.9   8616. ##  9 93711        1       56        6       2      134       15     5     9098. ## 10 93712        1       18        1       2      147        4     0.76 60947. ## # ℹ 8,694 more rows ## # ℹ 42 more variables: WTDR2D <dbl>, DR2DRSTZ <dbl>, DRABF <dbl>, DRDINT <dbl>, ## #   DR2TNUMF <dbl>, DR2T_F_TOTAL <dbl>, DR2T_F_CITMLB <dbl>, ## #   DR2T_F_OTHER <dbl>, DR2T_F_JUICE <dbl>, DR2T_V_TOTAL <dbl>, ## #   DR2T_V_DRKGR <dbl>, DR2T_V_REDOR_TOTAL <dbl>, DR2T_V_REDOR_TOMATO <dbl>, ## #   DR2T_V_REDOR_OTHER <dbl>, DR2T_V_STARCHY_TOTAL <dbl>, ## #   DR2T_V_STARCHY_POTATO <dbl>, DR2T_V_STARCHY_OTHER <dbl>, … setwd(\"/Users/james/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Emory University - Ph.D./dietaryindex_package/Validation file for publication/HEI2015_NHANES_1718\") ## HEI2015_NHANES_FPED validation using the SAS codes from National Cancer Institute (https://epi.grants.cancer.gov/hei/sas-code.html) # day 1 only HEI2015_NHANES_FPED_1718 = HEI2015_NHANES_FPED(     FPED_PATH = NHANES_20172018$FPED,     NUTRIENT_PATH = NHANES_20172018$NUTRIENT,     DEMO_PATH = NHANES_20172018$DEMO )  head(HEI2015_NHANES_FPED_1718) ## # A tibble: 6 × 15 ##    SEQN HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT HEI2015_VEG HEI2015_GREENNBEAN ##   <dbl>       <dbl>            <dbl>       <dbl>       <dbl>              <dbl> ## 1 93704        63.5             5           0           3.03                  0 ## 2 93705        41.1             0           0           5                     5 ## 3 93706        44.5             0           0           1.65                  0 ## 4 93707        41.6             0           0           2.41                  0 ## 5 93708        58.5             2.45        4.90        5                     0 ## 6 93711        67.1             2.13        3.12        5                     5 ## # ℹ 9 more variables: HEI2015_TOTALPRO <dbl>, HEI2015_SEAPLANTPRO <dbl>, ## #   HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, HEI2015_FATTYACID <dbl>, ## #   HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, HEI2015_ADDEDSUGAR <dbl>, ## #   HEI2015_SATFAT <dbl> # save the result write_csv(HEI2015_NHANES_FPED_1718, \"dietaryindex_HEI2015_1718.csv\")  # read in the SAS result using the NCI SAS codes HEI2015_NHANES_SAS_1718 = read_csv(\"SAS_HEI2015_1718.csv\") ## Rows: 7122 Columns: 16 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (16): SEQN, DR1TKCAL, HEI2015C1_TOTALVEG, HEI2015C2_GREEN_AND_BEAN, HEI2... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(HEI2015_NHANES_SAS_1718) ## # A tibble: 6 × 16 ##    SEQN DR1TKCAL HEI2015C1_TOTALVEG HEI2015C2_GREEN_AND_B…¹ HEI2015C3_TOTALFRUIT ##   <dbl>    <dbl>              <dbl>                   <dbl>                <dbl> ## 1 93704     1230               3.03                       0                 5    ## 2 93705     1202               5                          5                 0    ## 3 93706     1987               1.65                       0                 0    ## 4 93707     1775               2.41                       0                 0    ## 5 93708     1251               5                          0                 2.45 ## 6 93711     2840               5                          5                 2.13 ## # ℹ abbreviated name: ¹​HEI2015C2_GREEN_AND_BEAN ## # ℹ 11 more variables: HEI2015C4_WHOLEFRUIT <dbl>, HEI2015C5_WHOLEGRAIN <dbl>, ## #   HEI2015C6_TOTALDAIRY <dbl>, HEI2015C7_TOTPROT <dbl>, ## #   HEI2015C8_SEAPLANT_PROT <dbl>, HEI2015C9_FATTYACID <dbl>, ## #   HEI2015C10_SODIUM <dbl>, HEI2015C11_REFINEDGRAIN <dbl>, ## #   HEI2015C12_SFAT <dbl>, HEI2015C13_ADDSUG <dbl>, HEI2015_TOTAL_SCORE <dbl> # check if the HEI2015_TOTAL_SCORE in the SAS result is the same as the HEI2015_ALL in the R result in two decimals HEI2015_NHANES_FPED_1718$HEI2015_ALL = round(HEI2015_NHANES_FPED_1718$HEI2015_ALL, 2) HEI2015_NHANES_SAS_1718$HEI2015_TOTAL_SCORE = round(HEI2015_NHANES_SAS_1718$HEI2015_TOTAL_SCORE, 2)  table(HEI2015_NHANES_FPED_1718$HEI2015_ALL == HEI2015_NHANES_SAS_1718$HEI2015_TOTAL_SCORE) ##  ## TRUE  ## 7122 ## all results are TRUE, which means the R results are the same as the SAS results"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/validation.html","id":"use-dietaryindex-to-calculate-hei2015-using-asa24-example-data-n21-","dir":"Articles","previous_headings":"","what":"Use dietaryindex to calculate HEI2015 using ASA24 example data (n=21).","title":"Validation","text":"","code":"# set working directory setwd(\"/Users/james/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Emory University - Ph.D./dietaryindex_package/Validation file for publication/HEI2015_ASA24_example_data\")  # Read in the ASA24 data ASA24_exp = read_csv(\"THR_2022-09-13_86071_Totals.csv\") ## Rows: 21 Columns: 116 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## chr   (5): RecallRecId, UserID, IntakeStartDateTime, IntakeEndDateTime, Repo... ## dbl (111): UserName, RecallNo, RecallAttempt, RecallStatus, Lang, NumFoods, ... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(ASA24_exp) ## # A tibble: 6 × 116 ##   RecallRecId                UserName UserID RecallNo RecallAttempt RecallStatus ##   <chr>                         <dbl> <chr>     <dbl>         <dbl>        <dbl> ## 1 960a78fa-fdf8-417d-a5d2-e…        1 e6541…        1             0            2 ## 2 cee8c74d-51a2-4629-b92f-6…        2 dbb27…        1             0            2 ## 3 1f9daf51-8540-4fef-9f49-f…        3 f0115…        1             0            2 ## 4 55f614b3-6edd-4cbe-805e-d…        4 337d8…        1             0            2 ## 5 81c77799-cf9f-4c81-a188-8…        5 998f0…        1             0            2 ## 6 62c6d759-5d8f-4d9d-a8f4-9…        6 aae33…        1             0            2 ## # ℹ 110 more variables: IntakeStartDateTime <chr>, IntakeEndDateTime <chr>, ## #   ReportingDate <chr>, Lang <dbl>, NumFoods <dbl>, NumCodes <dbl>, ## #   AmtUsual <dbl>, KCAL <dbl>, PROT <dbl>, TFAT <dbl>, CARB <dbl>, MOIS <dbl>, ## #   ALC <dbl>, CAFF <dbl>, THEO <dbl>, SUGR <dbl>, FIBE <dbl>, CALC <dbl>, ## #   IRON <dbl>, MAGN <dbl>, PHOS <dbl>, POTA <dbl>, SODI <dbl>, ZINC <dbl>, ## #   COPP <dbl>, SELE <dbl>, VC <dbl>, VB1 <dbl>, VB2 <dbl>, NIAC <dbl>, ## #   VB6 <dbl>, FOLA <dbl>, FA <dbl>, FF <dbl>, FDFE <dbl>, VB12 <dbl>, … # Calculate HEI-2015 score using the dietaryindex package HEI2015_ASA24_exp = HEI2015_ASA24(ASA24_exp) ## RECALL_SUMMARIZE = TRUE, summarizing HEI2015 for ASA24 data by averaging over all possible recalls per person per day... head(HEI2015_ASA24_exp) ## # A tibble: 6 × 17 ## # Groups:   UserName, UserID [6] ##   UserName UserID TOTALKCAL HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT HEI2015_VEG ##      <dbl> <chr>      <dbl>       <dbl>            <dbl>       <dbl>       <dbl> ## 1        1 e6541…     2019.        69.8             1.26        2.45        4.73 ## 2        2 dbb27…     1247.        52.8             5           0           5    ## 3        3 f0115…     2206.        51.2             5           5           5    ## 4        4 337d8…     2095.        47.5             0           0           2.58 ## 5        5 998f0…     1209.        45.2             0           0           1.22 ## 6        6 aae33…     1694.        52.9             3.78        5           2.12 ## # ℹ 10 more variables: HEI2015_GREENNBEAN <dbl>, HEI2015_TOTALPRO <dbl>, ## #   HEI2015_SEAPLANTPRO <dbl>, HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, ## #   HEI2015_FATTYACID <dbl>, HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, ## #   HEI2015_ADDEDSUGAR <dbl>, HEI2015_SATFAT <dbl> # Write the HEI-2015 score calculated by dietaryindex to a csv file write_csv(HEI2015_ASA24_exp, \"HEI2015_ASA24_dietaryindex.csv\")"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/validation.html","id":"use-dietaryindex-to-calculate-hei2015-using-dhq3-example-data-n23-","dir":"Articles","previous_headings":"","what":"Use dietaryindex to calculate HEI2015 using DHQ3 example data (n=23).","title":"Validation","text":"","code":"# set working directory setwd(\"/Users/james/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Emory University - Ph.D./dietaryindex_package/Validation file for publication/HEI2015_DHQ3_example_data\")  # Read in the DHQ3 data DHQ3_exp = read_csv(\"Sample total daily results.csv\", skip = 1) ## Rows: 23 Columns: 302 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (302): Respondent ID, Record Number, Sex (1=male; 2=female), Age, Questi... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(DHQ3_exp) ## # A tibble: 6 × 302 ##   `Respondent ID` `Record Number` `Sex (1=male; 2=female)`   Age ##             <dbl>           <dbl>                    <dbl> <dbl> ## 1               1               1                        1    24 ## 2               2               2                        2    24 ## 3               3               3                        2    23 ## 4               4               4                        2    23 ## 5               5               5                        2    30 ## 6               6               6                        2    30 ## # ℹ 298 more variables: `Questionnaire Date (YYYYMMDD)` <dbl>, ## #   `Gram weight (g)` <dbl>, `Energy (kcal)` <dbl>, `*Gluten (g)` <dbl>, ## #   `Alcohol (g)` <dbl>, `Protein (g)` <dbl>, `*Nitrogen (g)` <dbl>, ## #   `*Total protein (g)` <dbl>, `*Animal protein (g)` <dbl>, ## #   `*Vegetable protein (g)` <dbl>, `Total fat (g)` <dbl>, ## #   `*Solid fat (g)` <dbl>, `Total saturated fatty acids (g)` <dbl>, ## #   `Total monounsaturated fatty acids (g)` <dbl>, … # Calculate HEI-2015 score using the dietaryindex package HEI2015_DHQ3_exp = HEI2015_DHQ3(DHQ3_exp)  head(HEI2015_DHQ3_exp) ## # A tibble: 6 × 16 ##   `Respondent ID` TOTALKCAL HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT HEI2015_VEG ##             <dbl>     <dbl>       <dbl>            <dbl>       <dbl>       <dbl> ## 1               1     1849.        74.7             3.14        5           5    ## 2               2     1109.        77.9             4.96        5           5    ## 3               3     2134.        69.5             5           5           5    ## 4               4     1170.        77.1             5           5           4.43 ## 5               5     1238.        63.3             5           5           3.82 ## 6               6      759.        59.5             1.32        1.48        3.06 ## # ℹ 10 more variables: HEI2015_GREENNBEAN <dbl>, HEI2015_TOTALPRO <dbl>, ## #   HEI2015_SEAPLANTPRO <dbl>, HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, ## #   HEI2015_FATTYACID <dbl>, HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, ## #   HEI2015_ADDEDSUGAR <dbl>, HEI2015_SATFAT <dbl> # Write the HEI-2015 score calculated by dietaryindex to a csv file write_csv(HEI2015_DHQ3_exp, \"HEI2015_DHQ3_dietaryindex.csv\")"},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/validation.html","id":"importing-data-and-load-ggplot-package","dir":"Articles","previous_headings":"produce validation figures","what":"importing data and load ggplot package","title":"Validation","text":"","code":"library(ggplot2)  # set up working directory setwd(\"/Users/james/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Emory University - Ph.D./dietaryindex_package/Validation file for publication/Final validation files\")  # read in dietaryindex-calculated and hand-calculated validation results ACS2020_V1_validation_result = read_csv(\"ACS2020_V1_validation_result.csv\") ## Rows: 24 Columns: 30 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (30): id, gender, kcal, vegetable, vegetable_unique, fruit, fruit_unique... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ACS2020_V2_validation_result = read_csv(\"ACS2020_V2_validation_result.csv\") ## Rows: 24 Columns: 31 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (31): id, gender, kcal, vegetable, vegetable_unique, fruit, fruit_unique... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. AHEI_validation_result = read_csv(\"AHEI_validation_result.csv\") ## Rows: 22 Columns: 41 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (41): id, gender, kcal, vegetable, fruit, whole_grain, nut_legume, n3_fa... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. AHEIP_validation_result = read_csv(\"AHEIP_validation_result.csv\") ## Rows: 11 Columns: 32 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (32): id, gender, kcal, vegetable, whole_fruit, white_meat_red_meat, fib... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. DASH_validation_result = read_csv(\"DASH_validation_result.csv\") ## Rows: 10 Columns: 29 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (29): id, gender, kcal, fruit, vegetable, nut_legume, whole_grain, low_f... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. DASHI_validation_result = read_csv(\"DASHI_validation_result.csv\") ## Rows: 11 Columns: 33 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (33): id, gender, kcal, total_fat, sat_fat, protein, cholesterol, fiber,... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. DII_validation_result = read_csv(\"DII_validation_result.csv\") ## Rows: 3 Columns: 140 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (140): id, Alcohol, vitamin B12, vitamin B6, Beta-carotene, Caffeine, Ca... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. HEI2015_validation_result = read_csv(\"HEI2015_validation_result.csv\") ## Rows: 11 Columns: 45 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (45): id, gender, kcal, total_fruit, whole_fruit, total_vegetable, green... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. HEI2020_validation_result = read_csv(\"HEI2020_validation_result.csv\") ## Rows: 22 Columns: 47 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (47): id, gender, age, kcal, total_fruit, whole_fruit, total_vegetable, ... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. MED_validation_result = read_csv(\"MED_validation_result.csv\") ## Rows: 11 Columns: 33 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (33): id, gender, kcal, fruit, vegetable, whole_grain, legume, nut, fish... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. MEDI_validation_result = read_csv(\"MEDI_validation_result.csv\") ## Rows: 11 Columns: 39 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (39): id, gender, kcal, olive_oil, vegetable, fruit, legume, nut, fish, ... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. MEDI_V2_validation_result = read_csv(\"MEDI_V2_validation_result.csv\") ## Rows: 11 Columns: 39 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (39): id, gender, kcal, olive_oil, vegetable, fruit, legume, nut, fish, ... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. PHDI_validation_result = read_csv(\"PHDI_validation_result.csv\") ## Rows: 26 Columns: 52 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (52): id, gender, TOTALKCAL_PHDI.x, WGRAIN_SERV_PHDI, STARCHY_VEG_SERV_P... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. # read in NHANES NCI SAS and dietaryindex-calculated validation results setwd(\"/Users/james/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Emory University - Ph.D./dietaryindex_package/Validation file for publication/HEI2015_NHANES_1718\") SAS_HEI2015_1718 = read_csv(\"SAS_HEI2015_1718.csv\") ## Rows: 7122 Columns: 16 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (16): SEQN, DR1TKCAL, HEI2015C1_TOTALVEG, HEI2015C2_GREEN_AND_BEAN, HEI2... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. dietaryindex_HEI2015_1718 = read_csv(\"dietaryindex_HEI2015_1718.csv\") ## Rows: 7122 Columns: 15 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (15): SEQN, HEI2015_ALL, HEI2015_TOTALFRT, HEI2015_FRT, HEI2015_VEG, HEI... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. setwd(\"/Users/james/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Emory University - Ph.D./dietaryindex_package/Validation file for publication/HEI2015_ASA24_example_data\") HEI2015_ASA24_NCI_SAS = read_csv(\"HEI2015_ASA24_NCI_SAS.csv\") ## Rows: 21 Columns: 18 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## chr  (1): UserID ## dbl (17): UserName, RecallNo, KCAL, HEI2015C1_TOTALVEG, HEI2015C2_GREEN_AND_... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. HEI2015_ASA24_dietaryindex = read_csv(\"HEI2015_ASA24_dietaryindex.csv\") ## Rows: 21 Columns: 17 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## chr  (1): UserID ## dbl (16): UserName, TOTALKCAL, HEI2015_ALL, HEI2015_TOTALFRT, HEI2015_FRT, H... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. setwd(\"/Users/james/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Emory University - Ph.D./dietaryindex_package/Validation file for publication/HEI2015_DHQ3_example_data\") HEI2015_DHQ3_NCI_SAS = read_csv(\"Sample total daily results.csv\", skip = 1) ## Rows: 23 Columns: 302 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (302): Respondent ID, Record Number, Sex (1=male; 2=female), Age, Questi... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. HEI2015_DHQ3_dietaryindex = read_csv(\"HEI2015_DHQ3_dietaryindex.csv\") ## Rows: 23 Columns: 16 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## dbl (16): Respondent ID, TOTALKCAL, HEI2015_ALL, HEI2015_TOTALFRT, HEI2015_F... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. # Define a function to compute accuracy get_accuracy <- function(x, y) {   # round x to 2 decimal places   x <- round(x, 2)   # round y to 2 decimal places   y <- round(y, 2)   return ((sum(x == y, na.rm = TRUE) / length(x)) * 100) }  # Define a function to compute accuracy get_accuracy_diff <- function(x, y) {   # the maximum tolerance for the difference between x and y   tolerance <- 0.5   # Subtract data1 from data2 (or vice versa) and take the absolute value of the differences   diff <- abs(x - y)   return ((sum(diff <= tolerance, na.rm = TRUE) / length(x)) * 100) }"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/validation.html","id":"figure-1--comparison-of-accuracy-dietaryindex-calculated-vs--hand-calculated-dietary-index-values-using-the-simulation-datasets-sample-sizes-range-from-10-to-26-","dir":"Articles","previous_headings":"produce validation figures","what":"Figure 1. Comparison of Accuracy: dietaryindex-calculated vs. hand-calculated Dietary Index Values using the simulation datasets (sample sizes range from 10 to 26).","title":"Validation","text":"","code":"############### Total score of all dietary indexes validation ############### # Initialize a data frame to store results for the total dietary index score for all dietary indexes results <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  # List of all your datasets and their corresponding column names datasets <- list(   ACS2020_V1 = list(data = ACS2020_V1_validation_result, cols = c(\"EXP_ACS_ALL\", \"ACS2020_V1_ALL\")),   ACS2020_V2 = list(data = ACS2020_V2_validation_result, cols = c(\"EXP_ACS_ALL\", \"ACS2020_V2_ALL\")),   AHEI = list(data = AHEI_validation_result, cols = c(\"EXP_AHEI_ALL\", \"AHEI_ALL\")),   AHEIP = list(data = AHEIP_validation_result, cols = c(\"EXP_AHEIP_ALL\", \"AHEIP_ALL\")),   DASH = list(data = DASH_validation_result, cols = c(\"EXP_DASH_ALL\", \"DASH_ALL\")),   DASHI = list(data = DASHI_validation_result, cols = c(\"EXP_DASHI_ALL\", \"DASHI_ALL\")),   DII = list(data = DII_validation_result, cols = c(\"EXP_DII_ALL\", \"DII_ALL\")),   HEI2015 = list(data = HEI2015_validation_result, cols = c(\"EXP_HEI2015_ALL\", \"HEI2015_ALL\")),   HEI2020 = list(data = HEI2020_validation_result, cols = c(\"EXP_HEI2020_ALL\", \"HEI2020_ALL\")),   MED = list(data = MED_validation_result, cols = c(\"EXP_MED_ALL\", \"MED_ALL\")),   MEDI = list(data = MEDI_validation_result, cols = c(\"EXP_MEDI_ALL\", \"MEDI_ALL\")),   MEDI_V2 = list(data = MEDI_V2_validation_result, cols = c(\"EXP_MEDI_ALL\", \"MEDI_V2_ALL\")),   PHDI = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_ALL\", \"PHDI_ALL\")) )  # Compute accuracy for each dataset for (name in names(datasets)) {   dataset <- datasets[[name]]   accuracy <- get_accuracy(dataset$data[[dataset$cols[1]]], dataset$data[[dataset$cols[2]]])   results <- rbind(results, data.frame(Dataset = name, Accuracy = accuracy)) }  # Print results print(results) ##       Dataset Accuracy ## 1  ACS2020_V1      100 ## 2  ACS2020_V2      100 ## 3        AHEI      100 ## 4       AHEIP      100 ## 5        DASH      100 ## 6       DASHI      100 ## 7         DII      100 ## 8     HEI2015      100 ## 9     HEI2020      100 ## 10        MED      100 ## 11       MEDI      100 ## 12    MEDI_V2      100 ## 13       PHDI      100 # Plot results ggplot(results, aes(x = Dataset, y = Accuracy, fill=Dataset)) +     geom_bar(stat = \"identity\") +     ylab(\"Accuracy (%)\") +     xlab(NULL) +     ggtitle(\"Comparison of Accuracy: dietaryindex-calculated vs. hand-calculated Dietary Index Values\") +     # add a subtitie     labs(subtitle = \"Exact match by rounding both results to the nearest two decimal places\") +     # increase the title size     theme(         plot.title = element_text(size = 20),         plot.subtitle = element_text(size = 15),         axis.title = element_text(size = 20),         axis.text = element_text(size = 15),         legend.text = element_text(size = 15),         legend.title = element_text(size = 20),         axis.text.x = element_blank()         )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/validation.html","id":"figure-2--accuracy-of-hei2015-in-nhanes-dietaryindex-calculated-vs--sas-calculated-results-from-national-cancer-institute-using-the-nhanes-2017-2018-data-n7122","dir":"Articles","previous_headings":"produce validation figures","what":"Figure 2. Accuracy of HEI2015 in NHANES: dietaryindex-calculated vs. SAS-calculated results from National Cancer Institute using the NHANES 2017-2018 data (n=7122)","title":"Validation","text":"","code":"###################### HEI2015 validation in NHANES using dietaryindex-calculated results vs. National Cancer Institute (NCI) SAS results ###################### # Initialize a data frame to store results for all HEI2015_1718 results results_HEI2015_1718 <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  # Create a list with SAS_HEI2015_1718 and dietaryindex_HEI2015_1718 datasets_HEI2015_1718 <- list(     HEI2015_ALL = list(data1 = SAS_HEI2015_1718, data2 = dietaryindex_HEI2015_1718, cols = c(\"HEI2015_TOTAL_SCORE\", \"HEI2015_ALL\")),     HEI2015_TOTALFRT = list(data1 = SAS_HEI2015_1718, data2 = dietaryindex_HEI2015_1718, cols = c(\"HEI2015C3_TOTALFRUIT\", \"HEI2015_TOTALFRT\")),     HEI2015_FRT = list(data1 = SAS_HEI2015_1718, data2 = dietaryindex_HEI2015_1718, cols = c(\"HEI2015C4_WHOLEFRUIT\", \"HEI2015_FRT\")),     HEI2015_VEG = list(data1 = SAS_HEI2015_1718, data2 = dietaryindex_HEI2015_1718, cols = c(\"HEI2015C1_TOTALVEG\", \"HEI2015_VEG\")),     HEI2015_GREENNBEAN = list(data1 = SAS_HEI2015_1718, data2 = dietaryindex_HEI2015_1718, cols = c(\"HEI2015C2_GREEN_AND_BEAN\", \"HEI2015_GREENNBEAN\")),     HEI2015_TOTALPRO = list(data1 = SAS_HEI2015_1718, data2 = dietaryindex_HEI2015_1718, cols = c(\"HEI2015C7_TOTPROT\", \"HEI2015_TOTALPRO\")),     HEI2015_SEAPLANTPRO = list(data1 = SAS_HEI2015_1718, data2 = dietaryindex_HEI2015_1718, cols = c(\"HEI2015C8_SEAPLANT_PROT\", \"HEI2015_SEAPLANTPRO\")),     HEI2015_WHOLEGRAIN = list(data1 = SAS_HEI2015_1718, data2 = dietaryindex_HEI2015_1718, cols = c(\"HEI2015C5_WHOLEGRAIN\", \"HEI2015_WHOLEGRAIN\")),     HEI2015_DAIRY = list(data1 = SAS_HEI2015_1718, data2 = dietaryindex_HEI2015_1718, cols = c(\"HEI2015C6_TOTALDAIRY\", \"HEI2015_DAIRY\")),     HEI2015_FATTYACID = list(data1 = SAS_HEI2015_1718, data2 = dietaryindex_HEI2015_1718, cols = c(\"HEI2015C9_FATTYACID\", \"HEI2015_FATTYACID\")),     HEI2015_REFINEDGRAIN = list(data1 = SAS_HEI2015_1718, data2 = dietaryindex_HEI2015_1718, cols = c(\"HEI2015C11_REFINEDGRAIN\", \"HEI2015_REFINEDGRAIN\")),     HEI2015_SODIUM = list(data1 = SAS_HEI2015_1718, data2 = dietaryindex_HEI2015_1718, cols = c(\"HEI2015C10_SODIUM\", \"HEI2015_SODIUM\")),     HEI2015_ADDEDSUGAR = list(data1 = SAS_HEI2015_1718, data2 = dietaryindex_HEI2015_1718, cols = c(\"HEI2015C13_ADDSUG\", \"HEI2015_ADDEDSUGAR\")),     HEI2015_SATFAT = list(data1 = SAS_HEI2015_1718, data2 = dietaryindex_HEI2015_1718, cols = c(\"HEI2015C12_SFAT\", \"HEI2015_SATFAT\"))     )  # Compute accuracy for each dataset in PHDI for (name in names(datasets_HEI2015_1718)) {   dataset <- datasets_HEI2015_1718[[name]]   data1_values <- as.numeric(dataset$data1[[dataset$cols[1]]])  # Convert to numeric   data2_values <- as.numeric(dataset$data2[[dataset$cols[2]]])  # Convert to numeric    accuracy <- get_accuracy(data1_values, data2_values)   results_HEI2015_1718 <- rbind(results_HEI2015_1718, data.frame(Component = name, Accuracy = accuracy)) }  # Print results print(results_HEI2015_1718) ##               Component  Accuracy ## 1           HEI2015_ALL 100.00000 ## 2      HEI2015_TOTALFRT 100.00000 ## 3           HEI2015_FRT 100.00000 ## 4           HEI2015_VEG 100.00000 ## 5    HEI2015_GREENNBEAN 100.00000 ## 6      HEI2015_TOTALPRO 100.00000 ## 7   HEI2015_SEAPLANTPRO 100.00000 ## 8    HEI2015_WHOLEGRAIN 100.00000 ## 9         HEI2015_DAIRY 100.00000 ## 10    HEI2015_FATTYACID 100.00000 ## 11 HEI2015_REFINEDGRAIN  99.98596 ## 12       HEI2015_SODIUM  99.95788 ## 13   HEI2015_ADDEDSUGAR 100.00000 ## 14       HEI2015_SATFAT  99.95788 # Plot results ggplot(results_HEI2015_1718, aes(x = Component, y = Accuracy, fill = Component)) +   geom_bar(stat = \"identity\") +   ylab(\"Accuracy (%)\") +   xlab(NULL) +   ggtitle(\"Accuracy of HEI2015 in NHANES: dietaryindex-calculated vs. SAS-calculated Dietary Index Values from NCI\") +   # add a subtitie   labs(subtitle = \"Exact match by rounding both results to the nearest two decimal places\") +   # increase the title size   theme(     plot.title = element_text(size = 20),     plot.subtitle = element_text(size = 15),     axis.title = element_text(size = 20),     axis.text = element_text(size = 15),     legend.text = element_text(size = 15),     legend.title = element_text(size = 20),     axis.text.x = element_blank()   )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/validation.html","id":"figure-3--accuracy-of-hei2015-in-asa24-dietaryindex-calculated-vs--sas-calculated-results-from-national-cancer-institute-using-the-asa24-example-data-n21-","dir":"Articles","previous_headings":"produce validation figures","what":"Figure 3. Accuracy of HEI2015 in ASA24: dietaryindex-calculated vs. SAS-calculated results from National Cancer Institute using the ASA24 example data (n=21).","title":"Validation","text":"","code":"###################### HEI2015 validation in ASA24 using dietaryindex-calculated results vs. National Cancer Institute (NCI) SAS results ###################### # Initialize a data frame to store results for all HEI2015_ASA24 results results_HEI2015_ASA24 <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  colnames(HEI2015_ASA24_NCI_SAS) ##  [1] \"UserName\"                 \"UserID\"                   ##  [3] \"RecallNo\"                 \"KCAL\"                     ##  [5] \"HEI2015C1_TOTALVEG\"       \"HEI2015C2_GREEN_AND_BEAN\" ##  [7] \"HEI2015C3_TOTALFRUIT\"     \"HEI2015C4_WHOLEFRUIT\"     ##  [9] \"HEI2015C5_WHOLEGRAIN\"     \"HEI2015C6_TOTALDAIRY\"     ## [11] \"HEI2015C7_TOTPROT\"        \"HEI2015C8_SEAPLANT_PROT\"  ## [13] \"HEI2015C9_FATTYACID\"      \"HEI2015C10_SODIUM\"        ## [15] \"HEI2015C11_REFINEDGRAIN\"  \"HEI2015C12_SFAT\"          ## [17] \"HEI2015C13_ADDSUG\"        \"HEI2015_TOTAL_SCORE\" colnames(HEI2015_ASA24_dietaryindex) ##  [1] \"UserName\"             \"UserID\"               \"TOTALKCAL\"            ##  [4] \"HEI2015_ALL\"          \"HEI2015_TOTALFRT\"     \"HEI2015_FRT\"          ##  [7] \"HEI2015_VEG\"          \"HEI2015_GREENNBEAN\"   \"HEI2015_TOTALPRO\"     ## [10] \"HEI2015_SEAPLANTPRO\"  \"HEI2015_WHOLEGRAIN\"   \"HEI2015_DAIRY\"        ## [13] \"HEI2015_FATTYACID\"    \"HEI2015_REFINEDGRAIN\" \"HEI2015_SODIUM\"       ## [16] \"HEI2015_ADDEDSUGAR\"   \"HEI2015_SATFAT\" # Create a list with HEI2015_ASA24_NCI_SAS and HEI2015_ASA24_dietaryindex datasets_HEI2015_ASA24<- list(     HEI2015_ALL = list(data1 = HEI2015_ASA24_NCI_SAS, data2 = HEI2015_ASA24_dietaryindex, cols = c(\"HEI2015_TOTAL_SCORE\", \"HEI2015_ALL\")),     HEI2015_TOTALFRT = list(data1 = HEI2015_ASA24_NCI_SAS, data2 = HEI2015_ASA24_dietaryindex, cols = c(\"HEI2015C3_TOTALFRUIT\", \"HEI2015_TOTALFRT\")),     HEI2015_FRT = list(data1 = HEI2015_ASA24_NCI_SAS, data2 = HEI2015_ASA24_dietaryindex, cols = c(\"HEI2015C4_WHOLEFRUIT\", \"HEI2015_FRT\")),     HEI2015_VEG = list(data1 = HEI2015_ASA24_NCI_SAS, data2 = HEI2015_ASA24_dietaryindex, cols = c(\"HEI2015C1_TOTALVEG\", \"HEI2015_VEG\")),     HEI2015_GREENNBEAN = list(data1 = HEI2015_ASA24_NCI_SAS, data2 = HEI2015_ASA24_dietaryindex, cols = c(\"HEI2015C2_GREEN_AND_BEAN\", \"HEI2015_GREENNBEAN\")),     HEI2015_TOTALPRO = list(data1 = HEI2015_ASA24_NCI_SAS, data2 = HEI2015_ASA24_dietaryindex, cols = c(\"HEI2015C7_TOTPROT\", \"HEI2015_TOTALPRO\")),     HEI2015_SEAPLANTPRO = list(data1 = HEI2015_ASA24_NCI_SAS, data2 = HEI2015_ASA24_dietaryindex, cols = c(\"HEI2015C8_SEAPLANT_PROT\", \"HEI2015_SEAPLANTPRO\")),     HEI2015_WHOLEGRAIN = list(data1 = HEI2015_ASA24_NCI_SAS, data2 = HEI2015_ASA24_dietaryindex, cols = c(\"HEI2015C5_WHOLEGRAIN\", \"HEI2015_WHOLEGRAIN\")),     HEI2015_DAIRY = list(data1 = HEI2015_ASA24_NCI_SAS, data2 = HEI2015_ASA24_dietaryindex, cols = c(\"HEI2015C6_TOTALDAIRY\", \"HEI2015_DAIRY\")),     HEI2015_FATTYACID = list(data1 = HEI2015_ASA24_NCI_SAS, data2 = HEI2015_ASA24_dietaryindex, cols = c(\"HEI2015C9_FATTYACID\", \"HEI2015_FATTYACID\")),     HEI2015_REFINEDGRAIN = list(data1 = HEI2015_ASA24_NCI_SAS, data2 = HEI2015_ASA24_dietaryindex, cols = c(\"HEI2015C11_REFINEDGRAIN\", \"HEI2015_REFINEDGRAIN\")),     HEI2015_SODIUM = list(data1 = HEI2015_ASA24_NCI_SAS, data2 = HEI2015_ASA24_dietaryindex, cols = c(\"HEI2015C10_SODIUM\", \"HEI2015_SODIUM\")),     HEI2015_ADDEDSUGAR = list(data1 = HEI2015_ASA24_NCI_SAS, data2 = HEI2015_ASA24_dietaryindex, cols = c(\"HEI2015C13_ADDSUG\", \"HEI2015_ADDEDSUGAR\")),     HEI2015_SATFAT = list(data1 = HEI2015_ASA24_NCI_SAS, data2 = HEI2015_ASA24_dietaryindex, cols = c(\"HEI2015C12_SFAT\", \"HEI2015_SATFAT\"))     )  # Compute accuracy for each dataset in PHDI for (name in names(datasets_HEI2015_ASA24)) {   dataset <- datasets_HEI2015_ASA24[[name]]   data1_values <- as.numeric(dataset$data1[[dataset$cols[1]]])  # Convert to numeric   data2_values <- as.numeric(dataset$data2[[dataset$cols[2]]])  # Convert to numeric    accuracy <- get_accuracy(data1_values, data2_values)   results_HEI2015_ASA24 <- rbind(results_HEI2015_ASA24, data.frame(Component = name, Accuracy = accuracy)) }  # Print results print(results_HEI2015_ASA24) ##               Component Accuracy ## 1           HEI2015_ALL      100 ## 2      HEI2015_TOTALFRT      100 ## 3           HEI2015_FRT      100 ## 4           HEI2015_VEG      100 ## 5    HEI2015_GREENNBEAN      100 ## 6      HEI2015_TOTALPRO      100 ## 7   HEI2015_SEAPLANTPRO      100 ## 8    HEI2015_WHOLEGRAIN      100 ## 9         HEI2015_DAIRY      100 ## 10    HEI2015_FATTYACID      100 ## 11 HEI2015_REFINEDGRAIN      100 ## 12       HEI2015_SODIUM      100 ## 13   HEI2015_ADDEDSUGAR      100 ## 14       HEI2015_SATFAT      100 # Plot results ggplot(results_HEI2015_ASA24, aes(x = Component, y = Accuracy, fill = Component)) +   geom_bar(stat = \"identity\") +   ylab(\"Accuracy (%)\") +   xlab(NULL) +   ggtitle(\"Accuracy of HEI2015 in ASA24: dietaryindex-calculated vs. SAS-calculated Dietary Index Values from NCI\") +   # add a subtitie   labs(subtitle = \"Exact match by rounding both results to the nearest two decimal places\") +   # increase the title size   theme(     plot.title = element_text(size = 20),     plot.subtitle = element_text(size = 15),     axis.title = element_text(size = 20),     axis.text = element_text(size = 15),     legend.text = element_text(size = 15),     legend.title = element_text(size = 20),     axis.text.x = element_blank()   )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/validation.html","id":"figure-4--accuracy-of-hei2015-in-dhq3-dietaryindex-calculated-vs--internal-calculated-results-from-national-cancer-institute-using-the-dhq3-example-data-n23-","dir":"Articles","previous_headings":"produce validation figures","what":"Figure 4. Accuracy of HEI2015 in DHQ3: dietaryindex-calculated vs. internal-calculated results from National Cancer Institute using the DHQ3 example data (n=23).","title":"Validation","text":"","code":"############### HEI2015 validation in DHQ3 using dietaryindex-calculated results vs. National Cancer Institute (NCI) SAS results ###################### # Initialize a data frame to store results for all HEI2015_DHQ3 results results_HEI2015_DHQ3 <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  colnames(HEI2015_DHQ3_NCI_SAS) ##   [1] \"Respondent ID\"                                                                         ##   [2] \"Record Number\"                                                                         ##   [3] \"Sex (1=male; 2=female)\"                                                                ##   [4] \"Age\"                                                                                   ##   [5] \"Questionnaire Date (YYYYMMDD)\"                                                         ##   [6] \"Gram weight (g)\"                                                                       ##   [7] \"Energy (kcal)\"                                                                         ##   [8] \"*Gluten (g)\"                                                                           ##   [9] \"Alcohol (g)\"                                                                           ##  [10] \"Protein (g)\"                                                                           ##  [11] \"*Nitrogen (g)\"                                                                         ##  [12] \"*Total protein (g)\"                                                                    ##  [13] \"*Animal protein (g)\"                                                                   ##  [14] \"*Vegetable protein (g)\"                                                                ##  [15] \"Total fat (g)\"                                                                         ##  [16] \"*Solid fat (g)\"                                                                        ##  [17] \"Total saturated fatty acids (g)\"                                                       ##  [18] \"Total monounsaturated fatty acids (g)\"                                                 ##  [19] \"Total polyunsaturated fatty acids (g)\"                                                 ##  [20] \"*Total saturated fatty acids (g)\"                                                      ##  [21] \"*Total monounsaturated fatty acids (g)\"                                                ##  [22] \"*Total polyunsaturated fatty acids (g)\"                                                ##  [23] \"*Polyunsaturated to saturated fatty acid ratio\"                                        ##  [24] \"Cholesterol (mg)\"                                                                      ##  [25] \"*Cholesterol to saturated fatty acid index\"                                            ##  [26] \"Carbohydrate (g)\"                                                                      ##  [27] \"Total sugars (g)\"                                                                      ##  [28] \"*Total sugars (g)\"                                                                     ##  [29] \"*Added sugars (g)\"                                                                     ##  [30] \"*Added sugars by total sugars (g)\"                                                     ##  [31] \"*Available carbohydrate (g)\"                                                           ##  [32] \"*Glycemic load (glucose reference)\"                                                    ##  [33] \"*Glycemic load (bread reference)\"                                                      ##  [34] \"*Fructose (g)\"                                                                         ##  [35] \"*Galactose (g)\"                                                                        ##  [36] \"*Glucose (g)\"                                                                          ##  [37] \"*Lactose (g)\"                                                                          ##  [38] \"*Maltose (g)\"                                                                          ##  [39] \"*Sucrose (g)\"                                                                          ##  [40] \"*Starch (g)\"                                                                           ##  [41] \"Dietary fiber (g)\"                                                                     ##  [42] \"*Total dietary fiber (g)\"                                                              ##  [43] \"*Soluble dietary fiber (g)\"                                                            ##  [44] \"*Insoluble dietary fiber (g)\"                                                          ##  [45] \"*Pectins (g)\"                                                                          ##  [46] \"Retinol (mcg)\"                                                                         ##  [47] \"*Total vitamin A activity (International Units) (IU)\"                                  ##  [48] \"Vitamin A, retinol activity (mcg)\"                                                     ##  [49] \"*Total vitamin A activity (RE) (mcg)\"                                                  ##  [50] \"Beta-carotene (mcg)\"                                                                   ##  [51] \"*Beta-carotene (mcg)\"                                                                  ##  [52] \"Alpha-carotene (mcg)\"                                                                  ##  [53] \"Beta-cryptoxanthin (mcg)\"                                                              ##  [54] \"Lutein + zeaxanthin (mcg)\"                                                             ##  [55] \"Lycopene (mcg)\"                                                                        ##  [56] \"Vitamin E as alpha-tocopherol (mg)\"                                                    ##  [57] \"*Vitamin E (Alpha Tocopherol) (mg)\"                                                    ##  [58] \"Added alpha-tocopherol (mg)\"                                                           ##  [59] \"*Total alpha-tocopherol (mg)\"                                                          ##  [60] \"*Beta-tocopherol (mg)\"                                                                 ##  [61] \"*Gamma-tocopherol (mg)\"                                                                ##  [62] \"*Delta-tocopherol (mg)\"                                                                ##  [63] \"*Vitamin E (International Units) (IU)\"                                                 ##  [64] \"*Natural alpha-tocopherol (RRR-alpha-tocopherol or d-alpha-tocopherol) (mg)\"           ##  [65] \"*Synthetic alpha-tocopherol (all rac-alpha-tocopherol or dl-alpha-tocopherol) (mg)\"    ##  [66] \"Vitamin K (mcg)\"                                                                       ##  [67] \"Vitamin C (mg)\"                                                                        ##  [68] \"Thiamin (Vitamin B1) (mg)\"                                                             ##  [69] \"Riboflavin (Vitamin B2) (mg)\"                                                          ##  [70] \"Niacin (mg)\"                                                                           ##  [71] \"*Niacin (mg)\"                                                                          ##  [72] \"Vitamin B6 (mg)\"                                                                       ##  [73] \"Total folate (mcg)\"                                                                    ##  [74] \"Folate, dietary folate (mcg)\"                                                          ##  [75] \"Food folate (mcg)\"                                                                     ##  [76] \"Folic acid (mcg)\"                                                                      ##  [77] \"Vitamin B12 (mcg)\"                                                                     ##  [78] \"Added vitamin B12 (mcg)\"                                                               ##  [79] \"*Pantothenic acid (mg)\"                                                                ##  [80] \"Vitamin D (D2 + D3) (mcg)\"                                                             ##  [81] \"*Vitamin D (calciferol) (mcg)\"                                                         ##  [82] \"*Vitamin D (ergocalciferol) (mcg)\"                                                     ##  [83] \"*Vitamin D (cholecalciferol (mcg)\"                                                     ##  [84] \"Calcium (mg)\"                                                                          ##  [85] \"Phosphorus (mg)\"                                                                       ##  [86] \"Magnesium (mg)\"                                                                        ##  [87] \"Iron (mg)\"                                                                             ##  [88] \"Zinc (mg)\"                                                                             ##  [89] \"Copper (mg)\"                                                                           ##  [90] \"Selenium (mcg)\"                                                                        ##  [91] \"Sodium (mg)\"                                                                           ##  [92] \"Potassium (mg)\"                                                                        ##  [93] \"*Manganese (mg)\"                                                                       ##  [94] \"SFA 4:0 (Butanoic) (g)\"                                                                ##  [95] \"SFA 6:0 (Hexanoic) (g)\"                                                                ##  [96] \"SFA 8:0 (Octanoic) (g)\"                                                                ##  [97] \"SFA 10:0 (Decanoic) (g)\"                                                               ##  [98] \"SFA 12:0 (Dodecanoic) (g)\"                                                             ##  [99] \"SFA 14:0 (Tetradecanoic) (g)\"                                                          ## [100] \"SFA 16:0 (Hexadecanoic) (g)\"                                                           ## [101] \"*SFA 17:0 (margaric acid) (g)\"                                                         ## [102] \"SFA 18:0 (Octadecanoic) (g)\"                                                           ## [103] \"*SFA 20:0 (arachidic acid) (g)\"                                                        ## [104] \"*SFA 22:0 (behenic acid) (g)\"                                                          ## [105] \"MFA 16:1 (Hexadecenoic) (g)\"                                                           ## [106] \"MFA 18:1 (Octadecenoic) (g)\"                                                           ## [107] \"MFA 20:1 (Eicosenoic) (g)\"                                                             ## [108] \"MFA 22:1 (Docosenoic) (g)\"                                                             ## [109] \"*MFA 14:1 (Myristoleic) (g)\"                                                           ## [110] \"PFA 18:2 (Octadecadienoic) (g)\"                                                        ## [111] \"PFA 18:3 (Octadecatrienoic) (g)\"                                                       ## [112] \"*PFA 18:3 N3 (Alpha linolenic) (g)\"                                                    ## [113] \"PFA 18:4 (Octadecatetraenoic) (g)\"                                                     ## [114] \"PFA 20:4 (Eicosatetraenoic) (g)\"                                                       ## [115] \"PFA 20:5 (Eicosapentaenoic) (g)\"                                                       ## [116] \"PFA 22:5 (Docosapentaenoic) (g)\"                                                       ## [117] \"PFA 22:6 (Docosahexaenoic) (g)\"                                                        ## [118] \"*Trans 18:1 (Trans-octadecenoic acid [elaidic acid]) (g)\"                              ## [119] \"*Trans 18:2 (Trans-octadecadienoic acid [linolelaidic acid]; incl. c-t, t-c, t-t) (g)\" ## [120] \"*Trans 16:1 (Trans-hexadecenoic acid) (g)\"                                             ## [121] \"*Total trans fatty acitds (g)\"                                                         ## [122] \"*Omega-3 fatty acids (g)\"                                                              ## [123] \"*CLA 18:2 (Linoleic) (g)\"                                                              ## [124] \"*CLA cis9 trans11 (g)\"                                                                 ## [125] \"*CLA trans10 cis12 (g)\"                                                                ## [126] \"*Tryptophan (g)\"                                                                       ## [127] \"*Threonine (g)\"                                                                        ## [128] \"*Isoleucine (g)\"                                                                       ## [129] \"*Leucine (g)\"                                                                          ## [130] \"*Lysine (g)\"                                                                           ## [131] \"*Methionine (g)\"                                                                       ## [132] \"*Cystine (g)\"                                                                          ## [133] \"*Phenylalanine (g)\"                                                                    ## [134] \"*Tyrosine (g)\"                                                                         ## [135] \"*Valine (g)\"                                                                           ## [136] \"*Arginine (g)\"                                                                         ## [137] \"*Histidine (g)\"                                                                        ## [138] \"*Alanine (g)\"                                                                          ## [139] \"*Aspartic acid (g)\"                                                                    ## [140] \"*Glutamin acid (g)\"                                                                    ## [141] \"*Glycine (g)\"                                                                          ## [142] \"*Proline (g)\"                                                                          ## [143] \"*Serine (g)\"                                                                           ## [144] \"*Daidzein (mg)\"                                                                        ## [145] \"*Genistein (mg)\"                                                                       ## [146] \"*Glycitein (mg)\"                                                                       ## [147] \"*Coumestrol (mg)\"                                                                      ## [148] \"*Biochanin A (mg)\"                                                                     ## [149] \"*Formononetin (mg)\"                                                                    ## [150] \"*Erythritol (g)\"                                                                       ## [151] \"*Inositol (g)\"                                                                         ## [152] \"*Isomalt (g)\"                                                                          ## [153] \"*Lactitol (g)\"                                                                         ## [154] \"*Maltitol (g)\"                                                                         ## [155] \"*Mannitol (g)\"                                                                         ## [156] \"*Pinitol (g)\"                                                                          ## [157] \"*Sorbitol (g)\"                                                                         ## [158] \"*Xylitol (g)\"                                                                          ## [159] \"Caffeine (mg)\"                                                                         ## [160] \"Theobromine (mg)\"                                                                      ## [161] \"Moisture (g)\"                                                                          ## [162] \"*Water (g)\"                                                                            ## [163] \"Total Choline (mg)\"                                                                    ## [164] \"*Aspartame (mg)\"                                                                       ## [165] \"*Saccharin (mg)\"                                                                       ## [166] \"*Phytic acid (mg)\"                                                                     ## [167] \"*Oxalic acid (mg)\"                                                                     ## [168] \"*3-Methylhistidine (mg)\"                                                               ## [169] \"*Sucrose polyester (g)\"                                                                ## [170] \"*Ash (g)\"                                                                              ## [171] \"*Acesulfame potassium (mg)\"                                                            ## [172] \"*Sucralose (mg)\"                                                                       ## [173] \"*Tagatose (g)\"                                                                         ## [174] \"*Betaine (mg)\"                                                                         ## [175] \"Citrus, melon, berry fruit (cups)\"                                                     ## [176] \"Other fruit (cups)\"                                                                    ## [177] \"Fruits (cups)\"                                                                         ## [178] \"Juice fruit (cups)\"                                                                    ## [179] \"Total fruit (cups)\"                                                                    ## [180] \"Dark-green vegetable (cups)\"                                                           ## [181] \"Red/orange tomato vegetable (cups)\"                                                    ## [182] \"Red/orange other vegetable (cups)\"                                                     ## [183] \"Total red/orange vegetable (cups)\"                                                     ## [184] \"White potato starchy vegetable (cups)\"                                                 ## [185] \"Other starchy vegetable (cups)\"                                                        ## [186] \"Total starchy vegetable (cups)\"                                                        ## [187] \"Other vegetable (cups)\"                                                                ## [188] \"Total vegetable (cups)\"                                                                ## [189] \"Legumes vegetable (cups)\"                                                              ## [190] \"Whole grain (oz)\"                                                                      ## [191] \"Refined grain (oz)\"                                                                    ## [192] \"Total number of grain (oz)\"                                                            ## [193] \"Meat from beef, pork, veal, lamb, and game protein foods (oz)\"                         ## [194] \"Cured meat protein foods (oz)\"                                                         ## [195] \"Meat from organ meat protein foods (oz)\"                                               ## [196] \"Poultry protein foods (oz)\"                                                            ## [197] \"Seafood high in omega-3 protein foods (oz)\"                                            ## [198] \"Seafood low in omega-3 protein foods (oz)\"                                             ## [199] \"Seafood (oz)\"                                                                          ## [200] \"Total meat, poultry, seafood protein foods (oz)\"                                       ## [201] \"Eggs protein foods (oz)\"                                                               ## [202] \"Meat, poultry, and eggs (oz)\"                                                          ## [203] \"Soy products protein foods (oz)\"                                                       ## [204] \"Nuts and seeds protein foods (oz)\"                                                     ## [205] \"Legumes protein foods (oz)\"                                                            ## [206] \"Nuts, seeds, soy, and legumes (oz)\"                                                    ## [207] \"Total protein foods (oz)\"                                                              ## [208] \"Milk (cups)\"                                                                           ## [209] \"Yogurt (cups)\"                                                                         ## [210] \"Cheese (cups)\"                                                                         ## [211] \"Total dairy (cups)\"                                                                    ## [212] \"Oil (g)\"                                                                               ## [213] \"Solid fat (g)\"                                                                         ## [214] \"Added sugars (tsp)\"                                                                    ## [215] \"Alcohol (drink(s))\"                                                                    ## [216] \"Energy from fat (% kcal)\"                                                              ## [217] \"Energy from carbohydrates (% kcal)\"                                                    ## [218] \"Energy from protein (% kcal)\"                                                          ## [219] \"Energy from alcohol (% kcal)\"                                                          ## [220] \"Energy from saturated fatty acids (% kcal)\"                                            ## [221] \"Energy from monounsaturated fatty acids (% kcal)\"                                      ## [222] \"Energy from polyunsaturated fatty acids (% kcal)\"                                      ## [223] \"SUPP_ENERGY_KCAL_DSID\"                                                                 ## [224] \"SUPP_PROTEIN_G_DSID\"                                                                   ## [225] \"SUPP_TOTAL_FAT_G_DSID\"                                                                 ## [226] \"SUPP_TOTAL_POLYUNSATURATED_FATTY_ACIDS_G_DSID\"                                         ## [227] \"SUPP_CHOLESTEROL_MG_DSID\"                                                              ## [228] \"SUPP_CARBOHYDRATE_G_DSID\"                                                              ## [229] \"SUPP_TOTAL_SUGARS_G_DSID\"                                                              ## [230] \"SUPP_DIETARY_FIBER_G_DSID\"                                                             ## [231] \"SUPP_SOLUBLE_DIETARY_FIBER_G_DSID\"                                                     ## [232] \"SUPP_TOTAL_VITAMIN_A_ACTIVITY_IU_DSID\"                                                 ## [233] \"SUPP_VITAMIN_A_RAE_MCG_DSID\"                                                           ## [234] \"SUPP_BETA_CAROTENE_PERCENT_DSID\"                                                       ## [235] \"SUPP_LUTEIN_ZEAXANTHIN_MCG_DSID\"                                                       ## [236] \"SUPP_LYCOPENE_MCG_DSID\"                                                                ## [237] \"SUPP_BIOTIN_MCG_DSID\"                                                                  ## [238] \"SUPP_VITAMIN_E_AS_ALPHA_TOCOPHEROL_MG_DSID\"                                            ## [239] \"SUPP_VITAMIN_E_IU_DSID\"                                                                ## [240] \"SUPP_VITAMIN_K_MCG_DSID\"                                                               ## [241] \"SUPP_VITAMIN_C_MG_DSID\"                                                                ## [242] \"SUPP_THIAMIN_VITAMIN_B1_MG_DSID\"                                                       ## [243] \"SUPP_RIBOFLAVIN_VITAMIN_B2_MG_DSID\"                                                    ## [244] \"SUPP_NIACIN_MG_DSID\"                                                                   ## [245] \"SUPP_VITAMIN_B6_MG_DSID\"                                                               ## [246] \"SUPP_FOLATE_DFE_MCG_DSID\"                                                              ## [247] \"SUPP_FOLIC_ACID_MCG_DSID\"                                                              ## [248] \"SUPP_VITAMIN_B12_MCG_DSID\"                                                             ## [249] \"SUPP_PANTOTHENIC_ACID_MG_DSID\"                                                         ## [250] \"SUPP_VITAMIN_D_D2+D3_MCG_DSID\"                                                         ## [251] \"SUPP_BORON_MCG_DSID\"                                                                   ## [252] \"SUPP_CALCIUM_MG_DSID\"                                                                  ## [253] \"SUPP_CHLORIDE_MG_DSID\"                                                                 ## [254] \"SUPP_CHROMIUM_MCG_DSID\"                                                                ## [255] \"SUPP_COPPER_MG_DSID\"                                                                   ## [256] \"SUPP_FLUORIDE_MG_DSID\"                                                                 ## [257] \"SUPP_IODINE_MCG_DSID\"                                                                  ## [258] \"SUPP_IRON_MG_DSID\"                                                                     ## [259] \"SUPP_MAGNESIUM_MG_DSID\"                                                                ## [260] \"SUPP_MANGANESE_MG_DSID\"                                                                ## [261] \"SUPP_MOLYBDENUM_MCG_DSID\"                                                              ## [262] \"SUPP_NICKEL_MCG_DSID\"                                                                  ## [263] \"SUPP_PHOSPHORUS_MG_DSID\"                                                               ## [264] \"SUPP_POTASSIUM_MG_DSID\"                                                                ## [265] \"SUPP_SELENIUM_MCG_DSID\"                                                                ## [266] \"SUPP_SILICON_MG_DSID\"                                                                  ## [267] \"SUPP_SODIUM_MG_DSID\"                                                                   ## [268] \"SUPP_TIN_MCG_DSID\"                                                                     ## [269] \"SUPP_VANADIUM_MCG_DSID\"                                                                ## [270] \"SUPP_ZINC_MG_DSID\"                                                                     ## [271] \"SUPP_PFA_20_5_EICOSAPENTAENOIC_ACID_G_DSID\"                                            ## [272] \"SUPP_PFA_22_6_DOCOSAHEXAENOIC_ACID_G_DSID\"                                             ## [273] \"SUPP_OMEGA_3_FATTY_ACIDS_G_DSID\"                                                       ## [274] \"SUPP_INOSITOL_G_DSID\"                                                                  ## [275] \"SUPP_CHOLINE_MG_DSID\"                                                                  ## [276] \"Total HEI-2015 Score\"                                                                  ## [277] \"HEI-2015 - Total Vegetables - Component Score\"                                         ## [278] \"HEI-2015 - Greens and Beans - Component Score\"                                         ## [279] \"HEI-2015 - Total Fruits - Component Score\"                                             ## [280] \"HEI-2015 - Whole Fruits - Component Score\"                                             ## [281] \"HEI-2015 - Whole Grains - Component Score\"                                             ## [282] \"HEI-2015 - Dairy - Component Score\"                                                    ## [283] \"HEI-2015 - Total Protein Foods - Component Score\"                                      ## [284] \"HEI-2015 - Seafood and Plant Proteins - Component Score\"                               ## [285] \"HEI-2015 - Fatty Acids - Component Score\"                                              ## [286] \"HEI-2015 - Sodium - Component Score\"                                                   ## [287] \"HEI-2015 - Refined Grains - Component Score\"                                           ## [288] \"HEI-2015 - Saturated Fats - Component Score\"                                           ## [289] \"HEI-2015 - Added Sugars - Component Score\"                                             ## [290] \"HEI-2015 - Density of Total Vegetables per 1000 Kcal\"                                  ## [291] \"HEI-2015 - Density of Greens and Beans per 1000 Kcal\"                                  ## [292] \"HEI-2015 - Density of Total Fruits per 1000 Kcal\"                                      ## [293] \"HEI-2015 - Density of Whole Fruits per 1000 Kcal\"                                      ## [294] \"HEI-2015 - Density of Whole Grains per 1000 Kcal\"                                      ## [295] \"HEI-2015 - Density of Dairy per 1000 Kcal\"                                             ## [296] \"HEI-2015 - Density of Total Protein Foods per 1000 Kcal\"                               ## [297] \"HEI-2015 - Density of Seafood and Plant Proteins per 1000 Kcal\"                        ## [298] \"HEI-2015 - Fatty Acid Ratio\"                                                           ## [299] \"HEI-2015 - Density of Sodium per 1000 Kcal\"                                            ## [300] \"HEI-2015 - Density of Refined Grains per 1000 Kcal\"                                    ## [301] \"HEI-2015 - Percent of Calories from Saturated Fats\"                                    ## [302] \"HEI-2015 - Percent of Calories from Added Sugars\" colnames(HEI2015_DHQ3_dietaryindex) ##  [1] \"Respondent ID\"        \"TOTALKCAL\"            \"HEI2015_ALL\"          ##  [4] \"HEI2015_TOTALFRT\"     \"HEI2015_FRT\"          \"HEI2015_VEG\"          ##  [7] \"HEI2015_GREENNBEAN\"   \"HEI2015_TOTALPRO\"     \"HEI2015_SEAPLANTPRO\"  ## [10] \"HEI2015_WHOLEGRAIN\"   \"HEI2015_DAIRY\"        \"HEI2015_FATTYACID\"    ## [13] \"HEI2015_REFINEDGRAIN\" \"HEI2015_SODIUM\"       \"HEI2015_ADDEDSUGAR\"   ## [16] \"HEI2015_SATFAT\" # Create a list with HEI2015_DHQ3_NCI_SAS and HEI2015_DHQ3_dietaryindex datasets_HEI2015_DHQ3<- list(     HEI2015_ALL = list(data1 = HEI2015_DHQ3_NCI_SAS, data2 = HEI2015_DHQ3_dietaryindex, cols = c(\"Total HEI-2015 Score\", \"HEI2015_ALL\")),     HEI2015_TOTALFRT = list(data1 = HEI2015_DHQ3_NCI_SAS, data2 = HEI2015_DHQ3_dietaryindex, cols = c(\"HEI-2015 - Total Fruits - Component Score\", \"HEI2015_TOTALFRT\")),     HEI2015_FRT = list(data1 = HEI2015_DHQ3_NCI_SAS, data2 = HEI2015_DHQ3_dietaryindex, cols = c(\"HEI-2015 - Whole Fruits - Component Score\", \"HEI2015_FRT\")),     HEI2015_VEG = list(data1 = HEI2015_DHQ3_NCI_SAS, data2 = HEI2015_DHQ3_dietaryindex, cols = c(\"HEI-2015 - Total Vegetables - Component Score\", \"HEI2015_VEG\")),     HEI2015_GREENNBEAN = list(data1 = HEI2015_DHQ3_NCI_SAS, data2 = HEI2015_DHQ3_dietaryindex, cols = c(\"HEI-2015 - Greens and Beans - Component Score\", \"HEI2015_GREENNBEAN\")),     HEI2015_TOTALPRO = list(data1 = HEI2015_DHQ3_NCI_SAS, data2 = HEI2015_DHQ3_dietaryindex, cols = c(\"HEI-2015 - Total Protein Foods - Component Score\", \"HEI2015_TOTALPRO\")),     HEI2015_SEAPLANTPRO = list(data1 = HEI2015_DHQ3_NCI_SAS, data2 = HEI2015_DHQ3_dietaryindex, cols = c(\"HEI-2015 - Seafood and Plant Proteins - Component Score\", \"HEI2015_SEAPLANTPRO\")),     HEI2015_WHOLEGRAIN = list(data1 = HEI2015_DHQ3_NCI_SAS, data2 = HEI2015_DHQ3_dietaryindex, cols = c(\"HEI-2015 - Whole Grains - Component Score\", \"HEI2015_WHOLEGRAIN\")),     HEI2015_DAIRY = list(data1 = HEI2015_DHQ3_NCI_SAS, data2 = HEI2015_DHQ3_dietaryindex, cols = c(\"HEI-2015 - Dairy - Component Score\", \"HEI2015_DAIRY\")),     HEI2015_FATTYACID = list(data1 = HEI2015_DHQ3_NCI_SAS, data2 = HEI2015_DHQ3_dietaryindex, cols = c(\"HEI-2015 - Fatty Acids - Component Score\", \"HEI2015_FATTYACID\")),     HEI2015_REFINEDGRAIN = list(data1 = HEI2015_DHQ3_NCI_SAS, data2 = HEI2015_DHQ3_dietaryindex, cols = c(\"HEI-2015 - Refined Grains - Component Score\", \"HEI2015_REFINEDGRAIN\")),     HEI2015_SODIUM = list(data1 = HEI2015_DHQ3_NCI_SAS, data2 = HEI2015_DHQ3_dietaryindex, cols = c(\"HEI-2015 - Sodium - Component Score\", \"HEI2015_SODIUM\")),     HEI2015_ADDEDSUGAR = list(data1 = HEI2015_DHQ3_NCI_SAS, data2 = HEI2015_DHQ3_dietaryindex, cols = c(\"HEI-2015 - Added Sugars - Component Score\", \"HEI2015_ADDEDSUGAR\")),     HEI2015_SATFAT = list(data1 = HEI2015_DHQ3_NCI_SAS, data2 = HEI2015_DHQ3_dietaryindex, cols = c(\"HEI-2015 - Saturated Fats - Component Score\", \"HEI2015_SATFAT\"))     )  # Compute accuracy for each dataset in PHDI for (name in names(datasets_HEI2015_DHQ3)) {   dataset <- datasets_HEI2015_DHQ3[[name]]   data1_values <- as.numeric(dataset$data1[[dataset$cols[1]]])  # Convert to numeric   data2_values <- as.numeric(dataset$data2[[dataset$cols[2]]])  # Convert to numeric    accuracy <- get_accuracy_diff(data1_values, data2_values)   results_HEI2015_DHQ3 <- rbind(results_HEI2015_DHQ3, data.frame(Component = name, Accuracy = accuracy)) }  # Print results print(results_HEI2015_DHQ3) ##               Component Accuracy ## 1           HEI2015_ALL      100 ## 2      HEI2015_TOTALFRT      100 ## 3           HEI2015_FRT      100 ## 4           HEI2015_VEG      100 ## 5    HEI2015_GREENNBEAN      100 ## 6      HEI2015_TOTALPRO      100 ## 7   HEI2015_SEAPLANTPRO      100 ## 8    HEI2015_WHOLEGRAIN      100 ## 9         HEI2015_DAIRY      100 ## 10    HEI2015_FATTYACID      100 ## 11 HEI2015_REFINEDGRAIN      100 ## 12       HEI2015_SODIUM      100 ## 13   HEI2015_ADDEDSUGAR      100 ## 14       HEI2015_SATFAT      100 # Plot results ggplot(results_HEI2015_DHQ3, aes(x = Component, y = Accuracy, fill = Component)) +   geom_bar(stat = \"identity\") +   ylab(\"Accuracy (%)\") +   xlab(NULL) +   ggtitle(\"Accuracy of HEI2015 in DHQ3: dietaryindex-calculated vs. internal-calculated Dietary Index Values from NCI\") +   # add a subtitie   labs(subtitle = \"Check if the differences between 2 dietary indexes are within 0.5\") +   # increase the title size   theme(     plot.title = element_text(size = 20),     plot.subtitle = element_text(size = 15),     axis.title = element_text(size = 20),     axis.text = element_text(size = 15),     legend.text = element_text(size = 15),     legend.title = element_text(size = 20),     axis.text.x = element_blank()   )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/articles/validation.html","id":"supplementary-material-3-validation-figures-all-figures-for-the-detailed-validation-of-each-dietary-index-including-the-total-dietary-index-and-individual-component-dietary-indexes-","dir":"Articles","previous_headings":"produce validation figures","what":"Supplementary Material 3 Validation Figures: all figures for the detailed validation of each dietary index, including the total dietary index and individual component dietary indexes.","title":"Validation","text":"","code":"######## ACS2020_V1 validation ########################################################### # Initialize a data frame to store results for all dietary index component scores in ACS2020_V1 results_ACS2020_V1 <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  # List of all your datasets and their corresponding column names datasets_ACS2020_V1 <- list(     ACS2020_V1_ALL = list(data = ACS2020_V1_validation_result, cols = c(\"EXP_ACS_ALL\", \"ACS2020_V1_ALL\")),     ACS2020_VEG = list(data = ACS2020_V1_validation_result, cols = c(\"EXP_ACS_VEGETABLE\", \"ACS2020_VEG\")),     ACS2020_VEG_ITEMS = list(data = ACS2020_V1_validation_result, cols = c(\"EXP_ACS_VEGETABLE_UNIQUE\", \"ACS2020_VEG_ITEMS\")),     ACS2020_FRT = list(data = ACS2020_V1_validation_result, cols = c(\"EXP_ACS_FRUIT\", \"ACS2020_FRT\")),     ACS2020_FRT_ITEMS = list(data = ACS2020_V1_validation_result, cols = c(\"EXP_ACS_FRUIT_UNIQUE\", \"ACS2020_FRT_ITEMS\")),     ACS2020_WGRAIN = list(data = ACS2020_V1_validation_result, cols = c(\"EXP_ACS_WHOLE_GRAIN\", \"ACS2020_WGRAIN\")),     ACS2020_REDPROC_MEAT = list(data = ACS2020_V1_validation_result, cols = c(\"EXP_ACS_RED_MEAT\", \"ACS2020_REDPROC_MEAT\")),     ACS2020_HPFRG_RATIO = list(data = ACS2020_V1_validation_result, cols = c(\"EXP_ACS_PROCESSED_FOOD\", \"ACS2020_HPFRG_RATIO\")),     ACS2020_SSB_FRTJ = list(data = ACS2020_V1_validation_result, cols = c(\"EXP_ACS_SSB\", \"ACS2020_SSB_FRTJ\")) )  # Compute accuracy for each dataset for (name in names(datasets_ACS2020_V1)) {     dataset <- datasets_ACS2020_V1[[name]]     accuracy <- get_accuracy(dataset$data[[dataset$cols[1]]], dataset$data[[dataset$cols[2]]])     results_ACS2020_V1 <- rbind(results_ACS2020_V1, data.frame(Dataset = name, Accuracy = accuracy)) }  # Print results print(results_ACS2020_V1) ##                Dataset Accuracy ## 1       ACS2020_V1_ALL      100 ## 2          ACS2020_VEG      100 ## 3    ACS2020_VEG_ITEMS      100 ## 4          ACS2020_FRT      100 ## 5    ACS2020_FRT_ITEMS      100 ## 6       ACS2020_WGRAIN      100 ## 7 ACS2020_REDPROC_MEAT      100 ## 8  ACS2020_HPFRG_RATIO      100 ## 9     ACS2020_SSB_FRTJ      100 # Plot results ggplot(results_ACS2020_V1, aes(x = Dataset, y = Accuracy, fill=Dataset)) +     geom_bar(stat = \"identity\") +     ylab(\"Accuracy (%)\") +     xlab(NULL) +     ggtitle(\"Comparison of Accuracy: dietaryindex-calculated vs. hand-calculated Dietary Index Values\") +     # add a subtitie     labs(subtitle = \"Exact match by rounding both results to the nearest two decimal places\") +     # increase the title size     theme(         plot.title = element_text(size = 20),         plot.subtitle = element_text(size = 15),         axis.title = element_text(size = 20),         axis.text = element_text(size = 15),         legend.text = element_text(size = 15),         legend.title = element_text(size = 20),         axis.text.x = element_blank()         ) ######### ACS2020_V2 validation ########################################################### # Initialize a data frame to store results for all dietary index component scores in ACS2020_V2 results_ACS2020_V2 <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  # List of all your datasets and their corresponding column names for ACS2020_V2 datasets_ACS2020_V2 <- list(     ACS2020_V2_ALL = list(data = ACS2020_V2_validation_result, cols = c(\"EXP_ACS_ALL\", \"ACS2020_V2_ALL\")),     ACS2020_VEG = list(data = ACS2020_V2_validation_result, cols = c(\"EXP_ACS_VEGETABLE\", \"ACS2020_VEG\")),     ACS2020_VEG_ITEMS = list(data = ACS2020_V2_validation_result, cols = c(\"EXP_ACS_VEGETABLE_UNIQUE\", \"ACS2020_VEG_ITEMS\")),     ACS2020_FRT = list(data = ACS2020_V2_validation_result, cols = c(\"EXP_ACS_FRUIT\", \"ACS2020_FRT\")),     ACS2020_FRT_ITEMS = list(data = ACS2020_V2_validation_result, cols = c(\"EXP_ACS_FRUIT_UNIQUE\", \"ACS2020_FRT_ITEMS\")),     ACS2020_WGRAIN = list(data = ACS2020_V2_validation_result, cols = c(\"EXP_ACS_WHOLE_GRAIN\", \"ACS2020_WGRAIN\")),     ACS2020_REDPROC_MEAT = list(data = ACS2020_V2_validation_result, cols = c(\"EXP_ACS_RED_MEAT\", \"ACS2020_REDPROC_MEAT\")),     ACS2020_HPFRG = list(data = ACS2020_V2_validation_result, cols = c(\"EXP_ACS_PROCESSED_FOOD\", \"ACS2020_HPFRG\")),     ACS2020_SSB_FRTJ = list(data = ACS2020_V2_validation_result, cols = c(\"EXP_ACS_SSB\", \"ACS2020_SSB_FRTJ\")) )  # Compute accuracy for each dataset in ACS2020_V2 for (name in names(datasets_ACS2020_V2)) {     dataset <- datasets_ACS2020_V2[[name]]     accuracy <- get_accuracy(dataset$data[[dataset$cols[1]]], dataset$data[[dataset$cols[2]]])     results_ACS2020_V2 <- rbind(results_ACS2020_V2, data.frame(Dataset = name, Accuracy = accuracy)) }  # Print results print(results_ACS2020_V2) ##                Dataset Accuracy ## 1       ACS2020_V2_ALL      100 ## 2          ACS2020_VEG      100 ## 3    ACS2020_VEG_ITEMS      100 ## 4          ACS2020_FRT      100 ## 5    ACS2020_FRT_ITEMS      100 ## 6       ACS2020_WGRAIN      100 ## 7 ACS2020_REDPROC_MEAT      100 ## 8        ACS2020_HPFRG      100 ## 9     ACS2020_SSB_FRTJ      100 # Plot results ggplot(results_ACS2020_V2, aes(x = Dataset, y = Accuracy, fill=Dataset)) +     geom_bar(stat = \"identity\") +     ylab(\"Accuracy (%)\") +     xlab(NULL) +     ggtitle(\"Comparison of Accuracy: dietaryindex-calculated vs. hand-calculated Dietary Index Values\") +     # add a subtitie     labs(subtitle = \"Exact match by rounding both results to the nearest two decimal places\") +     # increase the title size     theme(         plot.title = element_text(size = 20),         plot.subtitle = element_text(size = 15),         axis.title = element_text(size = 20),         axis.text = element_text(size = 15),         legend.text = element_text(size = 15),         legend.title = element_text(size = 20),         axis.text.x = element_blank()         ) ################# AHEI validation ###########################################################  # Initialize a data frame to store results for all dietary index component scores in AHEI results_AHEI <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  # List of all your datasets and their corresponding column names for AHEI datasets_AHEI <- list(     AHEI_ALL = list(data = AHEI_validation_result, cols = c(\"EXP_AHEI_ALL\", \"AHEI_ALL\")),     AHEI_NOETOH = list(data = AHEI_validation_result, cols = c(\"EXP_AHEI_NOETOH\", \"AHEI_NOETOH\")),     AHEI_VEG = list(data = AHEI_validation_result, cols = c(\"EXP_AHEI_VEG\", \"AHEI_VEG\")),     AHEI_FRT = list(data = AHEI_validation_result, cols = c(\"EXP_AHEI_FRT\", \"AHEI_FRT\")),     AHEI_WGRAIN = list(data = AHEI_validation_result, cols = c(\"EXP_AHEI_WGRAIN\", \"AHEI_WGRAIN\")),     AHEI_NUTSLEG = list(data = AHEI_validation_result, cols = c(\"EXP_AHEI_NUTSLEG\", \"AHEI_NUTSLEG\")),     AHEI_N3FAT = list(data = AHEI_validation_result, cols = c(\"EXP_AHEI_N3FAT\", \"AHEI_N3FAT\")),     AHEI_PUFA = list(data = AHEI_validation_result, cols = c(\"EXP_AHEI_PUFA\", \"AHEI_PUFA\")),     AHEI_SSB_FRTJ = list(data = AHEI_validation_result, cols = c(\"EXP_AHEI_SSB_FRTJ\", \"AHEI_SSB_FRTJ\")),     AHEI_REDPROC_MEAT = list(data = AHEI_validation_result, cols = c(\"EXP_AHEI_REDPROC_MEAT\", \"AHEI_REDPROC_MEAT\")),     AHEI_TRANS = list(data = AHEI_validation_result, cols = c(\"EXP_AHEI_TRANS\", \"AHEI_TRANS\")),     AHEI_SODIUM = list(data = AHEI_validation_result, cols = c(\"EXP_AHEI_SODIUM\", \"AHEI_SODIUM\")),     AHEI_ALCOHOL = list(data = AHEI_validation_result, cols = c(\"EXP_AHEI_ALCOHOL\", \"AHEI_ALCOHOL\")) )  # Compute accuracy for each dataset in AHEI for (name in names(datasets_AHEI)) {     dataset <- datasets_AHEI[[name]]     accuracy <- get_accuracy(dataset$data[[dataset$cols[1]]], dataset$data[[dataset$cols[2]]])     results_AHEI <- rbind(results_AHEI, data.frame(Dataset = name, Accuracy = accuracy)) }  # Print results print(results_AHEI) ##              Dataset Accuracy ## 1           AHEI_ALL      100 ## 2        AHEI_NOETOH      100 ## 3           AHEI_VEG      100 ## 4           AHEI_FRT      100 ## 5        AHEI_WGRAIN      100 ## 6       AHEI_NUTSLEG      100 ## 7         AHEI_N3FAT      100 ## 8          AHEI_PUFA      100 ## 9      AHEI_SSB_FRTJ      100 ## 10 AHEI_REDPROC_MEAT      100 ## 11        AHEI_TRANS      100 ## 12       AHEI_SODIUM      100 ## 13      AHEI_ALCOHOL      100 # Plot results ggplot(results_AHEI, aes(x = Dataset, y = Accuracy, fill=Dataset)) +     geom_bar(stat = \"identity\") +     ylab(\"Accuracy (%)\") +     xlab(NULL) +     ggtitle(\"Comparison of Accuracy: dietaryindex-calculated vs. hand-calculated Dietary Index Values\") +     # add a subtitie     labs(subtitle = \"Exact match by rounding both results to the nearest two decimal places\") +     # increase the title size     theme(         plot.title = element_text(size = 20),         plot.subtitle = element_text(size = 15),         axis.title = element_text(size = 20),         axis.text = element_text(size = 15),         legend.text = element_text(size = 15),         legend.title = element_text(size = 20),         axis.text.x = element_blank()         ) ################# AHEIP validation ###########################################################  # Initialize a data frame to store results for all dietary index component scores in AHEIP results_AHEIP <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  # List of all your datasets and their corresponding column names for AHEIP datasets_AHEIP <- list(     AHEIP_ALL = list(data = AHEIP_validation_result, cols = c(\"EXP_AHEIP_ALL\", \"AHEIP_ALL\")),     AHEIP_VEGETABLE = list(data = AHEIP_validation_result, cols = c(\"EXP_AHEIP_VEGETABLE\", \"AHEIP_VEG\")),     AHEIP_WHOLE_FRUIT = list(data = AHEIP_validation_result, cols = c(\"EXP_AHEIP_WHOLE_FRUIT\", \"AHEIP_FRT\")),     AHEIP_WHITE_MEAT_RED_MEAT = list(data = AHEIP_validation_result, cols = c(\"EXP_AHEIP_WHITE_MEAT_RED_MEAT\", \"AHEIP_WHITEREAD\")),     AHEIP_FIBER = list(data = AHEIP_validation_result, cols = c(\"EXP_AHEIP_FIBER\", \"AHEIP_FIBER\")),     AHEIP_TRANS_FAT = list(data = AHEIP_validation_result, cols = c(\"EXP_AHEIP_TRANS_FAT\", \"AHEIP_TRANS\")),     AHEIP_POLY_FAT_SAT_FAT = list(data = AHEIP_validation_result, cols = c(\"EXP_AHEIP_POLY_FAT_SAT_FAT\", \"AHEIP_POLYSAT\")),     AHEIP_CALCIUM = list(data = AHEIP_validation_result, cols = c(\"EXP_AHEIP_CALCIUM\", \"AHEIP_CALCIUM\")),     AHEIP_FOLATE = list(data = AHEIP_validation_result, cols = c(\"EXP_AHEIP_FOLATE\", \"AHEIP_FOLATE\")),     AHEIP_IRON = list(data = AHEIP_validation_result, cols = c(\"EXP_AHEIP_IRON\", \"AHEIP_IRON\")) )  # Compute accuracy for each dataset in AHEIP for (name in names(datasets_AHEIP)) {     dataset <- datasets_AHEIP[[name]]     accuracy <- get_accuracy(dataset$data[[dataset$cols[1]]], dataset$data[[dataset$cols[2]]])     results_AHEIP <- rbind(results_AHEIP, data.frame(Dataset = name, Accuracy = accuracy)) }  # Print results print(results_AHEIP) ##                      Dataset Accuracy ## 1                  AHEIP_ALL      100 ## 2            AHEIP_VEGETABLE      100 ## 3          AHEIP_WHOLE_FRUIT      100 ## 4  AHEIP_WHITE_MEAT_RED_MEAT      100 ## 5                AHEIP_FIBER      100 ## 6            AHEIP_TRANS_FAT      100 ## 7     AHEIP_POLY_FAT_SAT_FAT      100 ## 8              AHEIP_CALCIUM      100 ## 9               AHEIP_FOLATE      100 ## 10                AHEIP_IRON      100 # Plot results ggplot(results_AHEIP, aes(x = Dataset, y = Accuracy, fill=Dataset)) +     geom_bar(stat = \"identity\") +     ylab(\"Accuracy (%)\") +     xlab(NULL) +     ggtitle(\"Comparison of Accuracy: dietaryindex-calculated vs. hand-calculated Dietary Index Values\") +     # add a subtitie     labs(subtitle = \"Exact match by rounding both results to the nearest two decimal places\") +     # increase the title size     theme(         plot.title = element_text(size = 20),         plot.subtitle = element_text(size = 15),         axis.title = element_text(size = 20),         axis.text = element_text(size = 15),         legend.text = element_text(size = 15),         legend.title = element_text(size = 20),         axis.text.x = element_blank()         ) ################# DASH validation ###########################################################  # Initialize a data frame to store results for all dietary index component scores in DASH results_DASH <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  # List of all your datasets and their corresponding column names for DASH datasets_DASH <- list(     DASH_ALL = list(data = DASH_validation_result, cols = c(\"EXP_DASH_ALL\", \"DASH_ALL\")),     DASH_FRUIT = list(data = DASH_validation_result, cols = c(\"EXP_DASH_FRUIT\", \"DASH_FRT\")),     DASH_VEGETABLE = list(data = DASH_validation_result, cols = c(\"EXP_DASH_VEGETABLE\", \"DASH_VEG\")),     DASH_NUT_LEGUME = list(data = DASH_validation_result, cols = c(\"EXP_DASH_NUT_LEGUME\", \"DASH_NUTSLEG\")),     DASH_WHOLE_GRAIN = list(data = DASH_validation_result, cols = c(\"EXP_DASH_WHOLE_GRAIN\", \"DASH_WGRAIN\")),     DASH_LOW_FAT_DAIRY = list(data = DASH_validation_result, cols = c(\"EXP_DASH_LOW_FAT_DAIRY\", \"DASH_LOWF_DAIRY\")),     DASH_SODIUM = list(data = DASH_validation_result, cols = c(\"EXP_DASH_SODIUM\", \"DASH_SODIUM\")),     DASH_RED_PROCESSED_MEAT = list(data = DASH_validation_result, cols = c(\"EXP_DASH_RED_PROCESSED_MEAT\", \"DASH_REDPROC_MEAT\")),     DASH_SSB = list(data = DASH_validation_result, cols = c(\"EXP_DASH_SSB\", \"DASH_SSB_FRTJ\")) )  # Compute accuracy for each dataset in DASH for (name in names(datasets_DASH)) {     dataset <- datasets_DASH[[name]]     accuracy <- get_accuracy(dataset$data[[dataset$cols[1]]], dataset$data[[dataset$cols[2]]])     results_DASH <- rbind(results_DASH, data.frame(Dataset = name, Accuracy = accuracy)) }  # Print results print(results_DASH) ##                   Dataset Accuracy ## 1                DASH_ALL      100 ## 2              DASH_FRUIT      100 ## 3          DASH_VEGETABLE      100 ## 4         DASH_NUT_LEGUME      100 ## 5        DASH_WHOLE_GRAIN      100 ## 6      DASH_LOW_FAT_DAIRY      100 ## 7             DASH_SODIUM      100 ## 8 DASH_RED_PROCESSED_MEAT      100 ## 9                DASH_SSB      100 # Plot results ggplot(results_DASH, aes(x = Dataset, y = Accuracy, fill=Dataset)) +     geom_bar(stat = \"identity\") +     ylab(\"Accuracy (%)\") +     xlab(NULL) +     ggtitle(\"Comparison of Accuracy: dietaryindex-calculated vs. hand-calculated Dietary Index Values\") +     # add a subtitie     labs(subtitle = \"Exact match by rounding both results to the nearest two decimal places\") +     # increase the title size     theme(         plot.title = element_text(size = 20),         plot.subtitle = element_text(size = 15),         axis.title = element_text(size = 20),         axis.text = element_text(size = 15),         legend.text = element_text(size = 15),         legend.title = element_text(size = 20),         axis.text.x = element_blank()         ) ################# DASHI validation ###########################################################  # Initialize a data frame to store results for all dietary index component scores in DASHI results_DASHI <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  colnames(DASHI_validation_result) ##  [1] \"id\"                    \"gender\"                \"kcal\"                  ##  [4] \"total_fat\"             \"sat_fat\"               \"protein\"               ##  [7] \"cholesterol\"           \"fiber\"                 \"potassium\"             ## [10] \"magnesium\"             \"calcium\"               \"sodium\"                ## [13] \"EXP_DASHI_ALL\"         \"EXP_DASHI_TOTAL_FAT\"   \"EXP_DASHI_SAT_FAT\"     ## [16] \"EXP_DASHI_PROTEIN\"     \"EXP_DASHI_CHOLESTEROL\" \"EXP_DASHI_FIBER\"       ## [19] \"EXP_DASHI_POTASSIUM\"   \"EXP_DASHI_MAGNESIUM\"   \"EXP_DASHI_CALCIUM\"     ## [22] \"EXP_DASHI_SODIUM\"      \"DASHI_ALL\"             \"TOTALKCAL_DASHI\"       ## [25] \"DASHI_TOTAL_FAT\"       \"DASHI_SAT_FAT\"         \"DASHI_PROTEIN\"         ## [28] \"DASHI_CHOLESTEROL\"     \"DASHI_FIBER\"           \"DASHI_POTASSIUM\"       ## [31] \"DASHI_MAGNESIUM\"       \"DASHI_CALCIUM\"         \"DASHI_SODIUM\" # List of all your datasets and their corresponding column names for DASHI datasets_DASHI <- list(     DASHI_ALL = list(data = DASHI_validation_result, cols = c(\"EXP_DASHI_ALL\", \"DASHI_ALL\")),     DASHI_TOTAL_FAT = list(data = DASHI_validation_result, cols = c(\"EXP_DASHI_TOTAL_FAT\", \"DASHI_TOTAL_FAT\")),     DASHI_SAT_FAT = list(data = DASHI_validation_result, cols = c(\"EXP_DASHI_SAT_FAT\", \"DASHI_SAT_FAT\")),     DASHI_PROTEIN = list(data = DASHI_validation_result, cols = c(\"EXP_DASHI_PROTEIN\", \"DASHI_PROTEIN\")),     DASHI_CHOLESTEROL = list(data = DASHI_validation_result, cols = c(\"EXP_DASHI_CHOLESTEROL\", \"DASHI_CHOLESTEROL\")),     DASHI_FIBER = list(data = DASHI_validation_result, cols = c(\"EXP_DASHI_FIBER\", \"DASHI_FIBER\")),     DASHI_POTASSIUM = list(data = DASHI_validation_result, cols = c(\"EXP_DASHI_POTASSIUM\", \"DASHI_POTASSIUM\")),     DASHI_MAGNESIUM = list(data = DASHI_validation_result, cols = c(\"EXP_DASHI_MAGNESIUM\", \"DASHI_MAGNESIUM\")),     DASHI_CALCIUM = list(data = DASHI_validation_result, cols = c(\"EXP_DASHI_CALCIUM\", \"DASHI_CALCIUM\")),     DASHI_SODIUM = list(data = DASHI_validation_result, cols = c(\"EXP_DASHI_SODIUM\", \"DASHI_SODIUM\")) )   # Compute accuracy for each dataset in DASHI for (name in names(datasets_DASHI)) {     dataset <- datasets_DASHI[[name]]     accuracy <- get_accuracy(dataset$data[[dataset$cols[1]]], dataset$data[[dataset$cols[2]]])     results_DASHI <- rbind(results_DASHI, data.frame(Dataset = name, Accuracy = accuracy)) }  # Print results print(results_DASHI) ##              Dataset Accuracy ## 1          DASHI_ALL      100 ## 2    DASHI_TOTAL_FAT      100 ## 3      DASHI_SAT_FAT      100 ## 4      DASHI_PROTEIN      100 ## 5  DASHI_CHOLESTEROL      100 ## 6        DASHI_FIBER      100 ## 7    DASHI_POTASSIUM      100 ## 8    DASHI_MAGNESIUM      100 ## 9      DASHI_CALCIUM      100 ## 10      DASHI_SODIUM      100 # Plot results ggplot(results_DASHI, aes(x = Dataset, y = Accuracy, fill=Dataset)) +     geom_bar(stat = \"identity\") +     ylab(\"Accuracy (%)\") +     xlab(NULL) +     ggtitle(\"Comparison of Accuracy: dietaryindex-calculated vs. hand-calculated Dietary Index Values\") +     # add a subtitie     labs(subtitle = \"Exact match by rounding both results to the nearest two decimal places\") +     # increase the title size     theme(         plot.title = element_text(size = 20),         plot.subtitle = element_text(size = 15),         axis.title = element_text(size = 20),         axis.text = element_text(size = 15),         legend.text = element_text(size = 15),         legend.title = element_text(size = 20),         axis.text.x = element_blank()         ) ################# DII validation ###########################################################  # Initialize a data frame to store results for all dietary index component scores in DII results_DII <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  # List of all your datasets and their corresponding column names for DII datasets_DII <- list(     DII_ALL = list(data = DII_validation_result, cols = c(\"EXP_DII_ALL\", \"DII_ALL\")),     ALCOHOL_DII = list(data = DII_validation_result, cols = c(\"EXP_ALCOHOL_DII\", \"ALCOHOL_DII\")),     VITB12_DII = list(data = DII_validation_result, cols = c(\"EXP_VITB12_DII\", \"VITB12_DII\")),     VITB6_DII = list(data = DII_validation_result, cols = c(\"EXP_VITB6_DII\", \"VITB6_DII\")),     BCAROTENE_DII = list(data = DII_validation_result, cols = c(\"EXP_BCAROTENE_DII\", \"BCAROTENE_DII\")),     CAFFEINE_DII = list(data = DII_validation_result, cols = c(\"EXP_CAFFEINE_DII\", \"CAFFEINE_DII\")),     CARB_DII = list(data = DII_validation_result, cols = c(\"EXP_CARB_DII\", \"CARB_DII\")),     CHOLESTEROL_DII = list(data = DII_validation_result, cols = c(\"EXP_CHOLES_DII\", \"CHOLES_DII\")),     TOTALFAT_DII = list(data = DII_validation_result, cols = c(\"EXP_TOTALFAT_DII\", \"TOTALFAT_DII\")),     FIBER_DII = list(data = DII_validation_result, cols = c(\"EXP_FIBER_DII\", \"FIBER_DII\")),     FOLICACID_DII = list(data = DII_validation_result, cols = c(\"EXP_FOLICACID_DII\", \"FOLICACID_DII\")),     GARLIC_DII = list(data = DII_validation_result, cols = c(\"EXP_GARLIC_DII\", \"GARLIC_DII\")),     GINGER_DII = list(data = DII_validation_result, cols = c(\"EXP_GINGER_DII\", \"GINGER_DII\")),     IRON_DII = list(data = DII_validation_result, cols = c(\"EXP_IRON_DII\", \"IRON_DII\")),     MAGNESIUM_DII = list(data = DII_validation_result, cols = c(\"EXP_MG_DII\", \"MG_DII\")),     MUFA_DII = list(data = DII_validation_result, cols = c(\"EXP_MUFA_DII\", \"MUFA_DII\")),     NIACIN_DII = list(data = DII_validation_result, cols = c(\"EXP_NIACIN_DII\", \"NIACIN_DII\")),     N3FAT_DII = list(data = DII_validation_result, cols = c(\"EXP_N3FAT_DII\", \"N3FAT_DII\")),     N6FAT_DII = list(data = DII_validation_result, cols = c(\"EXP_N6FAT_DII\", \"N6FAT_DII\")),     ONION_DII = list(data = DII_validation_result, cols = c(\"EXP_ONION_DII\", \"ONION_DII\")),     PROTEIN_DII = list(data = DII_validation_result, cols = c(\"EXP_PROTEIN_DII\", \"PROTEIN_DII\")),     PUFA_DII = list(data = DII_validation_result, cols = c(\"EXP_PUFA_DII\", \"PUFA_DII\")),     RIBOFLAVIN_DII = list(data = DII_validation_result, cols = c(\"EXP_RIBOFLAVIN_DII\", \"RIBOFLAVIN_DII\")),     SAFFRON_DII = list(data = DII_validation_result, cols = c(\"EXP_SAFFRON_DII\", \"SAFFRON_DII\")),     SATFAT_DII = list(data = DII_validation_result, cols = c(\"EXP_SATFAT_DII\", \"SATFAT_DII\")),     SELENIUM_DII = list(data = DII_validation_result, cols = c(\"EXP_SE_DII\", \"SE_DII\")),     THIAMIN_DII = list(data = DII_validation_result, cols = c(\"EXP_THIAMIN_DII\", \"THIAMIN_DII\")),     TRANSFAT_DII = list(data = DII_validation_result, cols = c(\"EXP_TRANSFAT_DII\", \"TRANSFAT_DII\")),     TURMERIC_DII = list(data = DII_validation_result, cols = c(\"EXP_TURMERIC_DII\", \"TURMERIC_DII\")),     VITAMINA_DII = list(data = DII_validation_result, cols = c(\"EXP_VITA_DII\", \"VITA_DII\")),     VITAMINC_DII = list(data = DII_validation_result, cols = c(\"EXP_VITC_DII\", \"VITC_DII\")),     VITAMIND_DII = list(data = DII_validation_result, cols = c(\"EXP_VITD_DII\", \"VITD_DII\")),     VITAMINE_DII = list(data = DII_validation_result, cols = c(\"EXP_VITE_DII\", \"VITE_DII\")),     ZINC_DII = list(data = DII_validation_result, cols = c(\"EXP_ZN_DII\", \"ZN_DII\")),     TEA_DII = list(data = DII_validation_result, cols = c(\"EXP_TEA_DII\", \"TEA_DII\")),     FLA3OL_DII = list(data = DII_validation_result, cols = c(\"EXP_FLA3OL_DII\", \"FLA3OL_DII\")),     FLAVONES_DII = list(data = DII_validation_result, cols = c(\"EXP_FLAVONES_DII\", \"FLAVONES_DII\")),     FLAVONOLS_DII = list(data = DII_validation_result, cols = c(\"EXP_FLAVONOLS_DII\", \"FLAVONOLS_DII\")),     FLAVONONES_DII = list(data = DII_validation_result, cols = c(\"EXP_FLAVONONES_DII\", \"FLAVONONES_DII\")),     ANTHOCYANIDINS_DII = list(data = DII_validation_result, cols = c(\"EXP_ANTHOC_DII\", \"ANTHOC_DII\")),     ISOFLAVONES_DII = list(data = DII_validation_result, cols = c(\"EXP_ISOFLAVONES_DII\", \"ISOFLAVONES_DII\")),     PEPPER_DII = list(data = DII_validation_result, cols = c(\"EXP_PEPPER_DII\", \"PEPPER_DII\")),     THYME_DII = list(data = DII_validation_result, cols = c(\"EXP_THYME_DII\", \"THYME_DII\")),     ROSEMARY_DII = list(data = DII_validation_result, cols = c(\"EXP_ROSEMARY_DII\", \"ROSEMARY_DII\")) )  # Compute accuracy for each dataset in DII for (name in names(datasets_DII)) {     dataset <- datasets_DII[[name]]     accuracy <- get_accuracy(dataset$data[[dataset$cols[1]]], dataset$data[[dataset$cols[2]]])     results_DII <- rbind(results_DII, data.frame(Dataset = name, Accuracy = accuracy)) }  # Print results print(results_DII) ##               Dataset Accuracy ## 1             DII_ALL      100 ## 2         ALCOHOL_DII      100 ## 3          VITB12_DII      100 ## 4           VITB6_DII      100 ## 5       BCAROTENE_DII      100 ## 6        CAFFEINE_DII      100 ## 7            CARB_DII      100 ## 8     CHOLESTEROL_DII      100 ## 9        TOTALFAT_DII      100 ## 10          FIBER_DII      100 ## 11      FOLICACID_DII      100 ## 12         GARLIC_DII      100 ## 13         GINGER_DII      100 ## 14           IRON_DII      100 ## 15      MAGNESIUM_DII      100 ## 16           MUFA_DII      100 ## 17         NIACIN_DII      100 ## 18          N3FAT_DII      100 ## 19          N6FAT_DII      100 ## 20          ONION_DII      100 ## 21        PROTEIN_DII      100 ## 22           PUFA_DII      100 ## 23     RIBOFLAVIN_DII      100 ## 24        SAFFRON_DII      100 ## 25         SATFAT_DII      100 ## 26       SELENIUM_DII      100 ## 27        THIAMIN_DII      100 ## 28       TRANSFAT_DII      100 ## 29       TURMERIC_DII      100 ## 30       VITAMINA_DII      100 ## 31       VITAMINC_DII      100 ## 32       VITAMIND_DII      100 ## 33       VITAMINE_DII      100 ## 34           ZINC_DII      100 ## 35            TEA_DII      100 ## 36         FLA3OL_DII      100 ## 37       FLAVONES_DII      100 ## 38      FLAVONOLS_DII      100 ## 39     FLAVONONES_DII      100 ## 40 ANTHOCYANIDINS_DII      100 ## 41    ISOFLAVONES_DII      100 ## 42         PEPPER_DII      100 ## 43          THYME_DII      100 ## 44       ROSEMARY_DII      100 # Plot results ggplot(results_DII, aes(x = Dataset, y = Accuracy, fill=Dataset)) +     geom_bar(stat = \"identity\") +     ylab(\"Accuracy (%)\") +     xlab(NULL) +     ggtitle(\"Comparison of Accuracy: dietaryindex-calculated vs. hand-calculated Dietary Index Values\") +     # add a subtitie     labs(subtitle = \"Exact match by rounding both results to the nearest two decimal places\") +     # increase the title size     theme(         plot.title = element_text(size = 20),         plot.subtitle = element_text(size = 15),         axis.title = element_text(size = 20),         axis.text = element_text(size = 15),         legend.text = element_text(size = 15),         legend.title = element_text(size = 20),         axis.text.x = element_blank()         ) ################### HEI2015 validation ###########################################################  # Initialize a data frame to store results for all dietary index component scores in HEI2015 results_HEI2015 <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  # List of all your datasets and their corresponding column names for HEI2015 datasets_HEI2015 <- list(     HEI2015_ALL = list(data = HEI2015_validation_result, cols = c(\"EXP_HEI2015_ALL\", \"HEI2015_ALL\")),     HEI2015_TOTALFRT = list(data = HEI2015_validation_result, cols = c(\"EXP_HEI2015_TOTALFRT\", \"HEI2015_TOTALFRT\")),     HEI2015_FRT = list(data = HEI2015_validation_result, cols = c(\"EXP_HEI2015_FRT\", \"HEI2015_FRT\")),     HEI2015_VEG = list(data = HEI2015_validation_result, cols = c(\"EXP_HEI2015_VEG\", \"HEI2015_VEG\")),     HEI2015_GREENNBEAN = list(data = HEI2015_validation_result, cols = c(\"EXP_HEI2015_GREENNBEAN\", \"HEI2015_GREENNBEAN\")),     HEI2015_TOTALPRO = list(data = HEI2015_validation_result, cols = c(\"EXP_HEI2015_TOTALPRO\", \"HEI2015_TOTALPRO\")),     HEI2015_SEAPLANTPRO = list(data = HEI2015_validation_result, cols = c(\"EXP_HEI2015_SEAPLANTPRO\", \"HEI2015_SEAPLANTPRO\")),     HEI2015_WHOLEGRAIN = list(data = HEI2015_validation_result, cols = c(\"EXP_HEI2015_WHOLEGRAIN\", \"HEI2015_WHOLEGRAIN\")),     HEI2015_DAIRY = list(data = HEI2015_validation_result, cols = c(\"EXP_HEI2015_DAIRY\", \"HEI2015_DAIRY\")),     HEI2015_FATTYACID = list(data = HEI2015_validation_result, cols = c(\"EXP_HEI2015_FATTYACID\", \"HEI2015_FATTYACID\")),     HEI2015_REFINEDGRAIN = list(data = HEI2015_validation_result, cols = c(\"EXP_HEI2015_REFINEDGRAIN\", \"HEI2015_REFINEDGRAIN\")),     HEI2015_SODIUM = list(data = HEI2015_validation_result, cols = c(\"EXP_HEI2015_SODIUM\", \"HEI2015_SODIUM\")),     HEI2015_ADDEDSUGAR = list(data = HEI2015_validation_result, cols = c(\"EXP_HEI2015_ADDEDSUGAR\", \"HEI2015_ADDEDSUGAR\")),     HEI2015_SATFAT = list(data = HEI2015_validation_result, cols = c(\"EXP_HEI2015_SATFAT\", \"HEI2015_SATFAT\")) )  # Compute accuracy for each dataset in HEI2015 for (name in names(datasets_HEI2015)) {     dataset <- datasets_HEI2015[[name]]     accuracy <- get_accuracy(dataset$data[[dataset$cols[1]]], dataset$data[[dataset$cols[2]]])     results_HEI2015 <- rbind(results_HEI2015, data.frame(Dataset = name, Accuracy = accuracy)) }  # Print results print(results_HEI2015) ##                 Dataset Accuracy ## 1           HEI2015_ALL      100 ## 2      HEI2015_TOTALFRT      100 ## 3           HEI2015_FRT      100 ## 4           HEI2015_VEG      100 ## 5    HEI2015_GREENNBEAN      100 ## 6      HEI2015_TOTALPRO      100 ## 7   HEI2015_SEAPLANTPRO      100 ## 8    HEI2015_WHOLEGRAIN      100 ## 9         HEI2015_DAIRY      100 ## 10    HEI2015_FATTYACID      100 ## 11 HEI2015_REFINEDGRAIN      100 ## 12       HEI2015_SODIUM      100 ## 13   HEI2015_ADDEDSUGAR      100 ## 14       HEI2015_SATFAT      100 # Plot results ggplot(results_HEI2015, aes(x = Dataset, y = Accuracy, fill=Dataset)) +     geom_bar(stat = \"identity\") +     ylab(\"Accuracy (%)\") +     xlab(NULL) +     ggtitle(\"Comparison of Accuracy: dietaryindex-calculated vs. hand-calculated Dietary Index Values\") +     # add a subtitie     labs(subtitle = \"Exact match by rounding both results to the nearest two decimal places\") +     # increase the title size     theme(         plot.title = element_text(size = 15),         plot.subtitle = element_text(size = 10),         axis.title = element_text(size = 15),         axis.text = element_text(size = 10),         legend.text = element_text(size = 10),         legend.title = element_text(size = 15),         axis.text.x = element_blank()         ) ################### HEI2020 validation ###########################################################  # Initialize a data frame to store results for all HEI2020 component scores results_HEI2020 <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  # List of all the datasets and their corresponding column names for HEI2020 datasets_HEI2020 <- list(   HEI2020_ALL = list(data = HEI2020_validation_result, cols = c(\"EXP_HEI2020_ALL\", \"HEI2020_ALL\")),   HEI2020_TOTALFRT = list(data = HEI2020_validation_result, cols = c(\"EXP_HEI2020_TOTALFRT\", \"HEI2020_TOTALFRT\")),   HEI2020_FRT = list(data = HEI2020_validation_result, cols = c(\"EXP_HEI2020_FRT\", \"HEI2020_FRT\")),   HEI2020_VEG = list(data = HEI2020_validation_result, cols = c(\"EXP_HEI2020_VEG\", \"HEI2020_VEG\")),   HEI2020_GREENNBEAN = list(data = HEI2020_validation_result, cols = c(\"EXP_HEI2020_GREENNBEAN\", \"HEI2020_GREENNBEAN\")),   HEI2020_TOTALPRO = list(data = HEI2020_validation_result, cols = c(\"EXP_HEI2020_TOTALPRO\", \"HEI2020_TOTALPRO\")),   HEI2020_SEAPLANTPRO = list(data = HEI2020_validation_result, cols = c(\"EXP_HEI2020_SEAPLANTPRO\", \"HEI2020_SEAPLANTPRO\")),   HEI2020_WHOLEGRAIN = list(data = HEI2020_validation_result, cols = c(\"EXP_HEI2020_WHOLEGRAIN\", \"HEI2020_WHOLEGRAIN\")),   HEI2020_DAIRY = list(data = HEI2020_validation_result, cols = c(\"EXP_HEI2020_DAIRY\", \"HEI2020_DAIRY\")),   HEI2020_FATTYACID = list(data = HEI2020_validation_result, cols = c(\"EXP_HEI2020_FATTYACID\", \"HEI2020_FATTYACID\")),   HEI2020_REFINEDGRAIN = list(data = HEI2020_validation_result, cols = c(\"EXP_HEI2020_REFINEDGRAIN\", \"HEI2020_REFINEDGRAIN\")),   HEI2020_SODIUM = list(data = HEI2020_validation_result, cols = c(\"EXP_HEI2020_SODIUM\", \"HEI2020_SODIUM\")),   HEI2020_ADDEDSUGAR = list(data = HEI2020_validation_result, cols = c(\"EXP_HEI2020_ADDEDSUGAR\", \"HEI2020_ADDEDSUGAR\")),   HEI2020_SATFAT = list(data = HEI2020_validation_result, cols = c(\"EXP_HEI2020_SATFAT\", \"HEI2020_SATFAT\")) )  # Compute accuracy for each dataset in HEI2020 for (name in names(datasets_HEI2020)) {   dataset <- datasets_HEI2020[[name]]   accuracy <- get_accuracy(dataset$data[[dataset$cols[1]]], dataset$data[[dataset$cols[2]]])   results_HEI2020 <- rbind(results_HEI2020, data.frame(Dataset = name, Accuracy = accuracy)) }  # Print results print(results_HEI2020) ##                 Dataset Accuracy ## 1           HEI2020_ALL      100 ## 2      HEI2020_TOTALFRT      100 ## 3           HEI2020_FRT      100 ## 4           HEI2020_VEG      100 ## 5    HEI2020_GREENNBEAN      100 ## 6      HEI2020_TOTALPRO      100 ## 7   HEI2020_SEAPLANTPRO      100 ## 8    HEI2020_WHOLEGRAIN      100 ## 9         HEI2020_DAIRY      100 ## 10    HEI2020_FATTYACID      100 ## 11 HEI2020_REFINEDGRAIN      100 ## 12       HEI2020_SODIUM      100 ## 13   HEI2020_ADDEDSUGAR      100 ## 14       HEI2020_SATFAT      100 # Plot results ggplot(results_HEI2020, aes(x = Dataset, y = Accuracy, fill = Dataset)) +   geom_bar(stat = \"identity\") +   ylab(\"Accuracy (%)\") +   xlab(NULL) +   ggtitle(\"Comparison of Accuracy: dietaryindex-calculated vs. hand-calculated Dietary Index Values\") +   # add a subtitie   labs(subtitle = \"Exact match by rounding both results to the nearest two decimal places\") +   # increase the title size   theme(     plot.title = element_text(size = 20),     plot.subtitle = element_text(size = 15),     axis.title = element_text(size = 20),     axis.text = element_text(size = 15),     legend.text = element_text(size = 15),     legend.title = element_text(size = 20),     axis.text.x = element_blank()   ) ################### MED validation ###########################################################  # Initialize a data frame to store results for all MED component scores results_MED <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  # List of all the datasets and their corresponding column names for MED datasets_MED <- list(   MED_ALL = list(data = MED_validation_result, cols = c(\"EXP_MED_ALL\", \"MED_ALL\")),   MED_FRUIT = list(data = MED_validation_result, cols = c(\"EXP_MED_FRUIT\", \"MED_FRT\")),   MED_VEGETABLE = list(data = MED_validation_result, cols = c(\"EXP_MED_VEGETABLE\", \"MED_VEG\")),   MED_WHOLE_GRAIN = list(data = MED_validation_result, cols = c(\"EXP_MED_WHOLE_GRAIN\", \"MED_WGRAIN\")),   MED_LEGUME = list(data = MED_validation_result, cols = c(\"EXP_MED_LEGUME\", \"MED_LEGUMES\")),   MED_NUT = list(data = MED_validation_result, cols = c(\"EXP_MED_NUT\", \"MED_NUTS\")),   MED_FISH = list(data = MED_validation_result, cols = c(\"EXP_MED_FISH\", \"MED_FISH\")),   MED_RED_PROCESSED_MEAT = list(data = MED_validation_result, cols = c(\"EXP_MED_RED_PROCESSED_MEAT\", \"MED_REDPROC_MEAT\")),   MED_MONOFAT_SATFAT = list(data = MED_validation_result, cols = c(\"EXP_MED_MONOFAT_SATFAT\", \"MED_MONSATFAT\")),   MED_ALCOHOL = list(data = MED_validation_result, cols = c(\"EXP_MED_ALCOHOL\", \"MED_ALCOHOL\")) )  # Compute accuracy for each dataset in MED for (name in names(datasets_MED)) {   dataset <- datasets_MED[[name]]   accuracy <- get_accuracy(dataset$data[[dataset$cols[1]]], dataset$data[[dataset$cols[2]]])   results_MED <- rbind(results_MED, data.frame(Dataset = name, Accuracy = accuracy)) }  # Print results print(results_MED) ##                   Dataset Accuracy ## 1                 MED_ALL      100 ## 2               MED_FRUIT      100 ## 3           MED_VEGETABLE      100 ## 4         MED_WHOLE_GRAIN      100 ## 5              MED_LEGUME      100 ## 6                 MED_NUT      100 ## 7                MED_FISH      100 ## 8  MED_RED_PROCESSED_MEAT      100 ## 9      MED_MONOFAT_SATFAT      100 ## 10            MED_ALCOHOL      100 # Plot results ggplot(results_MED, aes(x = Dataset, y = Accuracy, fill = Dataset)) +   geom_bar(stat = \"identity\") +   ylab(\"Accuracy (%)\") +   xlab(NULL) +   ggtitle(\"Comparison of Accuracy: dietaryindex-calculated vs. hand-calculated Dietary Index Values\") +   # add a subtitie   labs(subtitle = \"Exact match by rounding both results to the nearest two decimal places\") +   # increase the title size   theme(     plot.title = element_text(size = 20),     plot.subtitle = element_text(size = 15),     axis.title = element_text(size = 20),     axis.text = element_text(size = 15),     legend.text = element_text(size = 15),     legend.title = element_text(size = 20),     axis.text.x = element_blank()   ) ################### MEDI validation ###########################################################  # Initialize a data frame to store results for all MEDI component scores results_MEDI <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  # List of all the datasets and their corresponding column names for MEDI datasets_MEDI <- list(   MEDI_ALL = list(data = MEDI_validation_result, cols = c(\"EXP_MEDI_ALL\", \"MEDI_ALL\")),   MEDI_OLIVE_OIL = list(data = MEDI_validation_result, cols = c(\"EXP_MEDI_OLIVE_OIL\", \"MEDI_OLIVE_OIL\")),   MEDI_VEGETABLE = list(data = MEDI_validation_result, cols = c(\"EXP_MEDI_VEGETABLE\", \"MEDI_VEG\")),   MEDI_FRUIT = list(data = MEDI_validation_result, cols = c(\"EXP_MEDI_FRUIT\", \"MEDI_FRT\")),   MEDI_LEGUME = list(data = MEDI_validation_result, cols = c(\"EXP_MEDI_LEGUME\", \"MEDI_LEGUMES\")),   MEDI_NUT = list(data = MEDI_validation_result, cols = c(\"EXP_MEDI_NUT\", \"MEDI_NUTS\")),   MEDI_FISH = list(data = MEDI_validation_result, cols = c(\"EXP_MEDI_FISH\", \"MEDI_FISH\")),   MEDI_ALCOHOL = list(data = MEDI_validation_result, cols = c(\"EXP_MEDI_ALCOHOL\", \"MEDI_ALCOHOL\")),   MEDI_SSB = list(data = MEDI_validation_result, cols = c(\"EXP_MEDI_SSB\", \"MEDI_SSB\")),   MEDI_SWEETS = list(data = MEDI_validation_result, cols = c(\"EXP_MEDI_SWEETS\", \"MEDI_SWEETS\")),   MEDI_DISCRET_FAT = list(data = MEDI_validation_result, cols = c(\"EXP_MEDI_DISCRET_FAT\", \"MEDI_DISCRET_FAT\")),   MEDI_RED_MEAT = list(data = MEDI_validation_result, cols = c(\"EXP_MEDI_RED_MEAT\", \"MEDI_REDPROC_MEAT\")) )  # Compute accuracy for each dataset in MEDI for (name in names(datasets_MEDI)) {   dataset <- datasets_MEDI[[name]]   accuracy <- get_accuracy(dataset$data[[dataset$cols[1]]], dataset$data[[dataset$cols[2]]])   results_MEDI <- rbind(results_MEDI, data.frame(Dataset = name, Accuracy = accuracy)) }  # Print results print(results_MEDI) ##             Dataset Accuracy ## 1          MEDI_ALL      100 ## 2    MEDI_OLIVE_OIL      100 ## 3    MEDI_VEGETABLE      100 ## 4        MEDI_FRUIT      100 ## 5       MEDI_LEGUME      100 ## 6          MEDI_NUT      100 ## 7         MEDI_FISH      100 ## 8      MEDI_ALCOHOL      100 ## 9          MEDI_SSB      100 ## 10      MEDI_SWEETS      100 ## 11 MEDI_DISCRET_FAT      100 ## 12    MEDI_RED_MEAT      100 # Plot results ggplot(results_MEDI, aes(x = Dataset, y = Accuracy, fill = Dataset)) +   geom_bar(stat = \"identity\") +   ylab(\"Accuracy (%)\") +   xlab(NULL) +   ggtitle(\"Comparison of Accuracy: dietaryindex-calculated vs. hand-calculated Dietary Index Values\") +   # add a subtitie   labs(subtitle = \"Exact match by rounding both results to the nearest two decimal places\") +   # increase the title size   theme(     plot.title = element_text(size = 20),     plot.subtitle = element_text(size = 15),     axis.title = element_text(size = 20),     axis.text = element_text(size = 15),     legend.text = element_text(size = 15),     legend.title = element_text(size = 20),     axis.text.x = element_blank()   ) ################### MEDI_V2 validation ###########################################################  # Initialize a data frame to store results for all MEDI_V2 component scores results_MEDI_V2 <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  # List of all the datasets and their corresponding column names for MEDI_V2 datasets_MEDI_V2 <- list(   MEDI_V2_ALL = list(data = MEDI_V2_validation_result, cols = c(\"EXP_MEDI_ALL\", \"MEDI_V2_ALL\")),   MEDI_V2_OLIVE_OIL = list(data = MEDI_V2_validation_result, cols = c(\"EXP_MEDI_OLIVE_OIL\", \"MEDI_OLIVE_OIL\")),   MEDI_V2_VEGETABLE = list(data = MEDI_V2_validation_result, cols = c(\"EXP_MEDI_VEGETABLE\", \"MEDI_VEG\")),   MEDI_V2_FRUIT = list(data = MEDI_V2_validation_result, cols = c(\"EXP_MEDI_FRUIT\", \"MEDI_FRT\")),   MEDI_V2_LEGUME = list(data = MEDI_V2_validation_result, cols = c(\"EXP_MEDI_LEGUME\", \"MEDI_LEGUMES\")),   MEDI_V2_NUT = list(data = MEDI_V2_validation_result, cols = c(\"EXP_MEDI_NUT\", \"MEDI_NUTS\")),   MEDI_V2_FISH = list(data = MEDI_V2_validation_result, cols = c(\"EXP_MEDI_FISH\", \"MEDI_FISH\")),   MEDI_V2_ALCOHOL = list(data = MEDI_V2_validation_result, cols = c(\"EXP_MEDI_ALCOHOL\", \"MEDI_ALCOHOL\")),   MEDI_V2_SSB = list(data = MEDI_V2_validation_result, cols = c(\"EXP_MEDI_SSB\", \"MEDI_SSB\")),   MEDI_V2_SWEETS = list(data = MEDI_V2_validation_result, cols = c(\"EXP_MEDI_SWEETS\", \"MEDI_SWEETS\")),   MEDI_V2_DISCRET_FAT = list(data = MEDI_V2_validation_result, cols = c(\"EXP_MEDI_DISCRET_FAT\", \"MEDI_DISCRET_FAT\")),   MEDI_V2_RED_MEAT = list(data = MEDI_V2_validation_result, cols = c(\"EXP_MEDI_RED_MEAT\", \"MEDI_REDPROC_MEAT\")) )  # Compute accuracy for each dataset in MEDI_V2 for (name in names(datasets_MEDI_V2)) {   dataset <- datasets_MEDI_V2[[name]]   accuracy <- get_accuracy(dataset$data[[dataset$cols[1]]], dataset$data[[dataset$cols[2]]])   results_MEDI_V2 <- rbind(results_MEDI_V2, data.frame(Dataset = name, Accuracy = accuracy)) }  # Print results print(results_MEDI_V2) ##                Dataset Accuracy ## 1          MEDI_V2_ALL      100 ## 2    MEDI_V2_OLIVE_OIL      100 ## 3    MEDI_V2_VEGETABLE      100 ## 4        MEDI_V2_FRUIT      100 ## 5       MEDI_V2_LEGUME      100 ## 6          MEDI_V2_NUT      100 ## 7         MEDI_V2_FISH      100 ## 8      MEDI_V2_ALCOHOL      100 ## 9          MEDI_V2_SSB      100 ## 10      MEDI_V2_SWEETS      100 ## 11 MEDI_V2_DISCRET_FAT      100 ## 12    MEDI_V2_RED_MEAT      100 # Plot results ggplot(results_MEDI_V2, aes(x = Dataset, y = Accuracy, fill = Dataset)) +   geom_bar(stat = \"identity\") +   ylab(\"Accuracy (%)\") +   xlab(NULL) +   ggtitle(\"Comparison of Accuracy: dietaryindex-calculated vs. hand-calculated Dietary Index Values\") +   # add a subtitie   labs(subtitle = \"Exact match by rounding both results to the nearest two decimal places\") +   # increase the title size   theme(     plot.title = element_text(size = 20),     plot.subtitle = element_text(size = 15),     axis.title = element_text(size = 20),     axis.text = element_text(size = 15),     legend.text = element_text(size = 15),     legend.title = element_text(size = 20),     axis.text.x = element_blank()   ) ################### PHDI validation ###########################################################  # Initialize a data frame to store results for all PHDI component scores results_PHDI <- data.frame(   Dataset = character(),   Accuracy = numeric(),   stringsAsFactors = FALSE )  # List of all the datasets and their corresponding column names for PHDI datasets_PHDI <- list(   PHDI_ALL = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_ALL\", \"PHDI_ALL\")),   PHDI_WGRAIN = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_WGRAIN\", \"PHDI_WGRAIN\")),   PHDI_STARCHY_VEG = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_STARCHY_VEG\", \"PHDI_STARCHY_VEG\")),   PHDI_VEG = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_VEG\", \"PHDI_VEG\")),   PHDI_FRT = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_FRT\", \"PHDI_FRT\")),   PHDI_DAIRY = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_DAIRY\", \"PHDI_DAIRY\")),   PHDI_REDPROC_MEAT = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_REDPROC_MEAT\", \"PHDI_REDPROC_MEAT\")),   PHDI_POULTRY = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_POULTRY\", \"PHDI_POULTRY\")),   PHDI_EGG = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_EGG\", \"PHDI_EGG\")),   PHDI_FISH = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_FISH\", \"PHDI_FISH\")),   PHDI_NUTS = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_NUTS\", \"PHDI_NUTS\")),   PHDI_LEGUMES = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_LEGUMES\", \"PHDI_LEGUMES\")),   PHDI_SOY = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_SOY\", \"PHDI_SOY\")),   PHDI_ADDED_FAT_UNSAT = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_ADDED_FAT_UNSAT\", \"PHDI_ADDED_FAT_UNSAT\")),   PHDI_ADDED_FAT_SAT = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_ADDED_FAT_SAT\", \"PHDI_ADDED_FAT_SAT\")),   PHDI_ADDED_SUGAR = list(data = PHDI_validation_result, cols = c(\"EXP_PHDI_ADDED_SUGAR\", \"PHDI_ADDED_SUGAR\")) )  # Compute accuracy for each dataset in PHDI for (name in names(datasets_PHDI)) {   dataset <- datasets_PHDI[[name]]   accuracy <- get_accuracy(dataset$data[[dataset$cols[1]]], dataset$data[[dataset$cols[2]]])   results_PHDI <- rbind(results_PHDI, data.frame(Dataset = name, Accuracy = accuracy)) }  # Print results print(results_PHDI) ##                 Dataset Accuracy ## 1              PHDI_ALL      100 ## 2           PHDI_WGRAIN      100 ## 3      PHDI_STARCHY_VEG      100 ## 4              PHDI_VEG      100 ## 5              PHDI_FRT      100 ## 6            PHDI_DAIRY      100 ## 7     PHDI_REDPROC_MEAT      100 ## 8          PHDI_POULTRY      100 ## 9              PHDI_EGG      100 ## 10            PHDI_FISH      100 ## 11            PHDI_NUTS      100 ## 12         PHDI_LEGUMES      100 ## 13             PHDI_SOY      100 ## 14 PHDI_ADDED_FAT_UNSAT      100 ## 15   PHDI_ADDED_FAT_SAT      100 ## 16     PHDI_ADDED_SUGAR      100 # Plot results ggplot(results_PHDI, aes(x = Dataset, y = Accuracy, fill = Dataset)) +   geom_bar(stat = \"identity\") +   ylab(\"Accuracy (%)\") +   xlab(NULL) +   ggtitle(\"Comparison of Accuracy: dietaryindex-calculated vs. hand-calculated Dietary Index Values\") +   # add a subtitie   labs(subtitle = \"Exact match by rounding both results to the nearest two decimal places\") +   # increase the title size   theme(     plot.title = element_text(size = 20),     plot.subtitle = element_text(size = 15),     axis.title = element_text(size = 20),     axis.text = element_text(size = 15),     legend.text = element_text(size = 15),     legend.title = element_text(size = 20),     axis.text.x = element_blank()   )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Zhan. Author, maintainer. Becky Hodge. Author.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhan JJ, Hodge RA, Dunlop AL, et al. Dietaryindex: user-friendly versatile R package standardizing dietary pattern analysis epidemiological clinical studies. J Clin Nutr doi:10.1016/j.ajcnut.2024.08.021","code":"@Article{,   author = {Jiada James Zhan and Rebecca A Hodge and Anne L Dunlop and Matthew M Lee and Linh Bui and Donghai Liang and Erin P Ferranti},   title = {Dietaryindex: A User-Friendly and Versatile R Package for Standardizing Dietary Pattern Analysis in Epidemiological and Clinical Studies},   journal = {Am J Clin Nutr},   year = {2024},   publisher = {American Society for Nutrition},   url = {https://github.com/jamesjiadazhan/dietaryindex}, }"},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Dietary Pattern Index Calculation Package","text":"dietaryindex R package provides user-friendly, streamlined methods standardizing compilation dietary intake data index-based dietary patterns enable assessment adherence patterns epidemiologic clinical studies. peer-reviewed published American Journal Clinical Nutrition.","code":""},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/index.html","id":"we-have-created-a-modern-user-friendly-tutorial-page-for-the-dietaryindex-package","dir":"","previous_headings":"User-friendly tutorial page","what":"We have created a modern, user-friendly tutorial page for the dietaryindex package.","title":"Dietary Pattern Index Calculation Package","text":"Click ","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Dietary Pattern Index Calculation Package","text":"using Dietaryindex package research, please sure cite original work. , add credibility findings also recognize appreciate intellectual efforts contributions. appropriate citation follows: - American Journal Clinical Nutrition: - https://doi.org/10.1016/j.ajcnut.2024.08.021 - Preprint: - Jiada James Zhan, Rebecca Hodge, Anne Dunlop, et al. Dietaryindex: User-Friendly Versatile R Package Standardizing Dietary Pattern Analysis Epidemiological Clinical Studies. bioRxiv. Published online August 07, 2023:2023.08.07.548466. doi:10.1101/2023.08.07.548466 - https://www.biorxiv.org/content/10.1101/2023.08.07.548466v2","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/index.html","id":"how-dietaryindex-works","dir":"","previous_headings":"","what":"How dietaryindex works","title":"Dietary Pattern Index Calculation Package","text":"dietaryindex package performs calculations two steps: Computation serving size food nutrient category. Computation individual dietary index using serving size information.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/index.html","id":"what-dietaryindex-can-do","dir":"","previous_headings":"","what":"What dietaryindex can do","title":"Dietary Pattern Index Calculation Package","text":"package can calculate following dietary pattern indexes. details, check Healthy Eating Index 2020 (HEI2020 & HEI-Toddlers-2020) Healthy Eating Index 2015 (HEI2015) Alternative Healthy Eating Index (AHEI) Dietary Approaches Stop Hypertension Index (DASH) DASH Index serving sizes DASH trial (DASHI) Alternate Mediterranean Diet Score (aMED) MED Index serving sizes PREDIMED trial (MEDI) Dietary Inflammation Index (DII) American Cancer Society 2020 diet score (ACS2020_V1 ACS2020_V2) Planetary Health Diet Index EAT-Lancet Commission (PHDI)","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/index.html","id":"how-to-use-dietaryindex-functions-appropriately-with-specific-data-inputs","dir":"","previous_headings":"","what":"How to use dietaryindex functions appropriately with specific data inputs","title":"Dietary Pattern Index Calculation Package","text":"detailed explanation indexes, please check attached Excel files: dietaryindex_SERVING_SIZE_DEFINITION.xlsx dietaryindex_SCORING_ALGORITHM.xlsx","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/index.html","id":"validation","dir":"","previous_headings":"","what":"Validation","title":"Dietary Pattern Index Calculation Package","text":"dietaryindex thoroughly validated accuracy reliability. ’ve ensured functions dietaryindex work expected.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/index.html","id":"validation-r-codes-can-be-found-in-the-validation-page-within-article-header-on-the-top-of-the-page","dir":"","previous_headings":"Validation","what":"Validation R codes can be found in the Validation page within Article header on the top of the page","title":"Dietary Pattern Index Calculation Package","text":"Click validation details, download Validation file publication.zip obtain following files: Validation.r: R script contains code used generate final validation files validation process. Validation figures.r: R script contains codes used produce validation figures validation. Raw validation files: folder houses raw simulation data files utilized validation. Final validation files: folder contains final output files validation process. Columns prefixed “EXP” represent manually computed dietary index results, serve gold standard. subsequent columns show results produced dietaryindex package. HEI2015_NHANES_SAS_1718: folder includes data files used validating HEI2015 results. compared SAS results (obtained using SAS codes https://epi.grants.cancer.gov/hei/sas-code.html) dietaryindex results using NHANES 1718 dataset. results found 100% match, rounding two decimal places. Figure 1. Comparison Accuracy: dietaryindex-calculated vs. hand-calculated Dietary Index Values using simulation datasets (sample sizes range 10 26). Figure 2. Accuracy HEI2015 NHANES: dietaryindex-calculated vs. SAS-calculated results National Cancer Institute using NHANES 2017-2018 data (n=7122). Figure 3. Accuracy HEI2015 ASA24: dietaryindex-calculated vs. SAS-calculated results National Cancer Institute using ASA24 example data (n=21). Figure 4. Accuracy HEI2015 DHQ3: dietaryindex-calculated vs. internal-calculated results National Cancer Institute using DHQ3 example data (n=23). Supplementary Material 3 Validation Figures.docx: word document includes figures detailed validation dietary index, including total dietary index individual component dietary indexes.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Dietary Pattern Index Calculation Package","text":"Currently, dietaryindex available [CRAN] install GitHub repository, use devtools package: Package dependencies: dplyr, readr, haven (automatically installed). previous steps working, can try following steps: something happens like following, first try enter 1 terminal (lower box). successful, try enter 2. take new R user.","code":"install.packages(\"devtools\") #If you don't have \"devtools\" installed already devtools::install_github(\"jamesjiadazhan/dietaryindex\") # Install the package from GitHub library(devtools) # Load devtools install_github(\"jamesjiadazhan/dietaryindex\") These packages have more recent versions available.   It is recommended to update all of them.   Which would you like to update?    1: All                             2: CRAN packages only              3: None                            4: tzdb  (0.3.0 -> 0.4.0) [CRAN]   5: vroom (1.6.1 -> 1.6.3) [CRAN]"},{"path":[]},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/index.html","id":"check-the-get-started-header-on-the-top-of-the-page","dir":"","previous_headings":"Getting Started","what":"Check the “Get started” header on the top of the page","title":"Dietary Pattern Index Calculation Package","text":"Click ","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related Work","title":"Dietary Pattern Index Calculation Package","text":"dietaryindex mainly intended versatile tool help calculating different dietary indexes conveniently. designed flexible work almost types dietary assessment tools, including food frequency questionnaires, 24-hour dietary recalls, even food records, also supports many 1-step dietary index calculations NHANES, ASA24, DHQ3. Please follow instruction specific dietary assessment tools relevant articles regarding accurately define serving size (see ) provided package, key obtaining high-quality dietary indexes. dietaryindex also provides help defining serving size help file, argument section. Note: specific dietary index components (low-fat dairy products sugar-sweetened beverages) easily available thus difficult assess. author used individual-level food data compute population-level food group data. example, sugar-sweetened beverage serving estimated dividing total added sugar intake grams beverages 26, 1 bottle (8 oz) Coke 26 g added sugars used benchmark, different sugar-sweetened beverages largely different added sugar contents. Please use judgment determine dietary indexes calculated using dietaryindex package appropriate research. NHANES data: FPED individual files look like FPED_DR1IFF FPED_DR2IFF. NUTRIENT individual files look like DR1IFF_D DR2IFF_D. DEMO file refers DEMO file Demographic Variables & Sample Weights (example: 05-06 https://wwwn.cdc.gov/nchs/nhanes/search/datapage.aspx?Component=Demographics&CycleBeginYear=2005) FPED, NUTRIENT, DEMO files available within package another GitHub repository Google Drive collected package developer convenience - https://github.com/jamesjiadazhan/dietaryindex_manual - https://drive.google.com/drive/folders/1umjhuS22aHEW_bU5AjYa8vrae91gsb0D?usp=share_link","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/index.html","id":"contributing--notes","dir":"","previous_headings":"Related Work","what":"Contributing & Notes","title":"Dietary Pattern Index Calculation Package","text":"dietaryindex licensed MIT License. Please check Contribution guide questions, feature requests, bug reports. maintainer review pull requests incorporate contributions discretion. may also reach maintainer, Jiada (James) Zhan, via email: jzha832@emory.edu. Jiada (James) Zhan home page Emory : https://www.sph.emory.edu/phd-students/profile/index.php?FID=jiada-zhan-12906. Becky Hodge American Cancer Society provided substantial contributions validate package. Michael L Orr Dean Jones/ Young-Mi Go Lab Emory University helped design dietaryindex logo. Thanks lot help.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/ACS2020_V1.html","id":null,"dir":"Reference","previous_headings":"","what":"ACS2020_V1 — ACS2020_V1","title":"ACS2020_V1 — ACS2020_V1","text":"Calculate American Cancer Society 2020 dietary index, using daily serving sizes foods consumed calculate vegetable, fruit, whole grain, red processed meat, sugar-sweetened beverages components. version uses percent daily calories highly processed foods refined grains calculate component’s scores preferred method calculating ACS 2020 diet score.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/ACS2020_V1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACS2020_V1 — ACS2020_V1","text":"","code":"ACS2020_V1(   SERV_DATA,   RESPONDENTID,   GENDER,   VEG_SERV_ACS2020,   VEG_ITEMS_SERV_ACS2020,   FRT_SERV_ACS2020,   FRT_ITEMS_SERV_ACS2020,   WGRAIN_SERV_ACS2020,   REDPROC_MEAT_SERV_ACS2020,   HPFRG_RATIO_SERV_ACS2020,   SSB_FRTJ_SERV_ACS2020 )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/ACS2020_V1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ACS2020_V1 — ACS2020_V1","text":"SERV_DATA raw data file includes serving sizes foods nutrients RESPONDENTID unique participant ID participant GENDER gender participant, 1=male, 2=female VEG_SERV_ACS2020 serving size vegetable except potatoes starchy vegetable, unit=servings/day (0.5 c vege; 1 cup green leafy (1 cup = 236.59 g) VEG_ITEMS_SERV_ACS2020 total number unique vegetables (e.g., vegetable line items) reported participant. example, report 3 servings lettuce, 1 serving kale, 0.5 servings broccoli count 3 vegetable line items. FRT_SERV_ACS2020 serving size whole fruits fruit juice, unit=servings/day (0.5 c berries; 1 cup fruits=236.59 g; 1 med fruit; 0.5 medium avocado) FRT_ITEMS_SERV_ACS2020 number unique fruits (e.g., fruit line items) asked survey/app (measuring variety fruits). example, 3 serving apple, 3 servings banana, 3 servings blueberry just 3 total number line items WGRAIN_SERV_ACS2020 serving size whole grains, unit=grams/day REDPROC_MEAT_SERV_ACS2020 serving size red processed meats, including Beef, pork, lamb, goat, veal, sausages, bacon, salami, ham, hot dog, deli meat, unit=servings/day; 1 srv= 4 oz. unprocessed meat; 1.5 oz. processed meat (1 oz. = 28.35 g) HPFRG_RATIO_SERV_ACS2020 ratio calories highly processed foods refined grains total daily calories (e.g. 35 % calories HPF ref grains), note: ultra-processed variable score double count foods included parts score, example, sugar-sweetened beverages processed meats SSB_FRTJ_SERV_ACS2020 serving size sugar-sweetened beverages non-100% fruit juice, unit=servings/day = 1 ser= 8oz (1 oz. = 28.35 g)","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/ACS2020_V1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ACS2020_V1 — ACS2020_V1","text":"ACS2020_V1 index/score component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/ACS2020_V2.html","id":null,"dir":"Reference","previous_headings":"","what":"ACS2020_V2 — ACS2020_V2","title":"ACS2020_V2 — ACS2020_V2","text":"Calculate American Cancer Society 2020 dietary index version 2 (using servings/d per 1000 kcal), using given serving sizes foods nutrients consumed per 1 day.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/ACS2020_V2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ACS2020_V2 — ACS2020_V2","text":"","code":"ACS2020_V2(   SERV_DATA,   RESPONDENTID,   GENDER,   TOTALKCAL_ACS2020,   VEG_SERV_ACS2020,   VEG_ITEMS_SERV_ACS2020,   FRT_SERV_ACS2020,   FRT_ITEMS_SERV_ACS2020,   WGRAIN_SERV_ACS2020,   REDPROC_MEAT_SERV_ACS2020,   HPFRG_SERV_ACS2020,   SSB_FRTJ_SERV_ACS2020 )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/ACS2020_V2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ACS2020_V2 — ACS2020_V2","text":"SERV_DATA raw data file includes serving sizes foods nutrients RESPONDENTID unique participant ID participant GENDER gender participant, 1=male, 2=female TOTALKCAL_ACS2020 total kcal VEG_SERV_ACS2020 serving size vegetable except potatoes starchy vegetable, unit=servings/day (0.5 c vege; 1 cup green leafy (1 cup = 236.59 g) VEG_ITEMS_SERV_ACS2020 total number unique vegetables (e.g., vegetable line items) reported participant. example, report 3 servings lettuce, 1 serving kale, 0.5 servings broccoli count 3 vegetable line items. FRT_SERV_ACS2020 serving size whole fruits fruit juice, unit=servings/day (0.5 c berries; 1 cup=236.59 g; 1 med fruit; 0.5 medium avocado) FRT_ITEMS_SERV_ACS2020 number unique fruits (e.g., fruit line items) asked survey/app (measuring variety fruits). example, 3 serving apple, 3 servings banana, 3 servings blueberry just 3 total number line items WGRAIN_SERV_ACS2020 serving size whole grains, unit=grams/day REDPROC_MEAT_SERV_ACS2020 serving size red processed meats, including Beef, pork, lamb, goat, veal, sausages, bacon, salami, ham, hot dog, deli meat, unit=servings/day; 1 srv= 4 oz. unprocessed meat; 1.5 oz. processed meat (1 oz. = 28.35 g) HPFRG_SERV_ACS2020 daily servings highly processed foods refined grains per 1000 kcal, note: ultra-processed variable score double count foods included parts score, example, sugar-sweetened beverages processed meats SSB_FRTJ_SERV_ACS2020 serving size sugar-sweetened beverages non-100% fruit juice, unit=servings/day = 1 ser= 8oz (1 oz. = 28.35 g)","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/ACS2020_V2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ACS2020_V2 — ACS2020_V2","text":"ACS2020_V2 index/score component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI.html","id":null,"dir":"Reference","previous_headings":"","what":"AHEI Calculation — AHEI","title":"AHEI Calculation — AHEI","text":"Calculate AHEI dietary index, Alternative Healthy Eating Index, using given serving sizes foods nutrients consumed per 1 day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AHEI Calculation — AHEI","text":"","code":"AHEI(   SERV_DATA,   RESPONDENTID,   GENDER,   TOTALKCAL_AHEI,   VEG_SERV_AHEI,   FRT_SERV_AHEI,   WGRAIN_SERV_AHEI,   NUTSLEG_SERV_AHEI,   N3FAT_SERV_AHEI,   PUFA_SERV_AHEI,   SSB_FRTJ_SERV_AHEI,   REDPROC_MEAT_SERV_AHEI,   TRANS_SERV_AHEI,   SODIUM_SERV_AHEI,   ALCOHOL_SERV_AHEI )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AHEI Calculation — AHEI","text":"SERV_DATA raw data file includes serving sizes foods nutrients RESPONDENTID unique participant ID participant GENDER gender participant. 2 female 1 male. TOTALKCAL_AHEI total kcal, adjusting sodium intake VEG_SERV_AHEI serving size vegetable except potatoes legume, unit=servings/day (0.5 c vege; 1 cup green leafy (1 cup = 236.59 g) FRT_SERV_AHEI serving size whole fruits fruit juice, unit=servings/day (0.5 c berries; 1 cup=236.59 g; 1 med fruit (1 cup = 236.59 g) WGRAIN_SERV_AHEI serving size whole grains, unit=grams/day NUTSLEG_SERV_AHEI serving size Nuts, legumes, vegetable protein (e.g., tofu), unit=servings/day = 1 srv=1oz (28.35 g) nuts legume 1 TBLSP peanut butter (15 mL), 1 cup legume = 4 oz N3FAT_SERV_AHEI serving size omega 3 fatty acid, unit=mg/day ( oz. = 28.35 g) PUFA_SERV_AHEI serving size PUFA, unit=% energy SSB_FRTJ_SERV_AHEI serving size sugar-sweetened beverages non-100% fruit juice, unit=servings/day = 1 ser= 8oz (1 oz. = 28.35 g) REDPROC_MEAT_SERV_AHEI serving size red processed meats, including Beef, pork, lamb, goat, veal, sausages, bacon, salami, ham, hot dog, deli meat, unit=servings/day; 1 srv= 4 oz. unprocessed meat; 1.5 oz. processed meat (1 oz. = 28.35 g) TRANS_SERV_AHEI serving size trans fat, unit=% energy SODIUM_SERV_AHEI serving size sodium, unit=mg/day per 2000 kcal ALCOHOL_SERV_AHEI serving size alcohol, including Wine, beer, \"light\" beer, liquor, unit=drink/day (12 oz beer; 5 oz wine; 1.5 oz spirits) 1 oz = 28.35 g","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AHEI Calculation — AHEI","text":"AHEI index/score, AHEI","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AHEI Calculation — AHEI","text":"","code":"data(\"AHEI_VALIDATION\") AHEI(SERV_DATA = AHEI_VALIDATION, RESPONDENTID = AHEI_VALIDATION$id, GENDER = AHEI_VALIDATION$gender, TOTALKCAL_AHEI = AHEI_VALIDATION$kcal, VEG_SERV_AHEI = AHEI_VALIDATION$vegetable, FRT_SERV_AHEI = AHEI_VALIDATION$fruit, WGRAIN_SERV_AHEI = AHEI_VALIDATION$whole_grain, NUTSLEG_SERV_AHEI = AHEI_VALIDATION$nut_legume, N3FAT_SERV_AHEI = AHEI_VALIDATION$n3_fat, PUFA_SERV_AHEI = AHEI_VALIDATION$pufa, SSB_FRTJ_SERV_AHEI = AHEI_VALIDATION$ssb_fruit_juice, REDPROC_MEAT_SERV_AHEI = AHEI_VALIDATION$red_processed_meat, TRANS_SERV_AHEI = AHEI_VALIDATION$trans_fat, SODIUM_SERV_AHEI = AHEI_VALIDATION$sodium, ALCOHOL_SERV_AHEI = AHEI_VALIDATION$alcohol) #> # A tibble: 22 × 15 #>    RESPONDENTID GENDER AHEI_ALL AHEI_NOETOH AHEI_VEG AHEI_FRT AHEI_WGRAIN #>           <dbl>  <dbl>    <dbl>       <dbl>    <dbl>    <dbl>       <dbl> #>  1            1      2     42.5        40          0      0             0 #>  2            2      2     46          43.5        2      2.5           1 #>  3            3      2     55          47          4      5             2 #>  4            4      2     61.8        51.8        6      7.5           3 #>  5            5      2     66.5        56.5        8     10             4 #>  6            6      2     68.8        58.8       10     10             5 #>  7            7      2     69          59         10     10             6 #>  8            8      2     64.2        59.2       10     10             7 #>  9            9      2     59.5        59.5       10     10             8 #> 10           10      2     59.8        59.8       10     10             9 #> # ℹ 12 more rows #> # ℹ 8 more variables: AHEI_NUTSLEG <dbl>, AHEI_N3FAT <dbl>, AHEI_PUFA <dbl>, #> #   AHEI_SSB_FRTJ <dbl>, AHEI_REDPROC_MEAT <dbl>, AHEI_TRANS <dbl>, #> #   AHEI_SODIUM <dbl>, AHEI_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEIP.html","id":null,"dir":"Reference","previous_headings":"","what":"AHEIP Calculation — AHEIP","title":"AHEIP Calculation — AHEIP","text":"Calculate AHEIP dietary index (serving size-based), Mediterranean, using given serving sizes foods nutrients consumed per 1 day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEIP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AHEIP Calculation — AHEIP","text":"","code":"AHEIP(   SERV_DATA,   RESPONDENTID,   VEG_SERV_AHEIP,   FRT_SERV_AHEIP,   WHITERED_RT_SERV_AHEIP,   FIBER_SERV_AHEIP,   TRANS_SERV_AHEIP,   POLYSAT_RT_SERV_AHEIP,   CALCIUM_SERV_AHEIP,   FOLATE_SERV_AHEIP,   IRON_SERV_AHEIP )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEIP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AHEIP Calculation — AHEIP","text":"SERV_DATA raw data file includes serving sizes foods nutrients RESPONDENTID unique participant ID participant VEG_SERV_AHEIP serving size vegetable except potatoes legume, unit=servings/day (0.5 c vege; 1 cup green leafy (1 cup = 236.59 g) FRT_SERV_AHEIP serving size whole fruits fruit juice, unit=servings/day (0.5 c berries; 1 cup=236.59 g; 1 med fruit (1 cup = 236.59 g) WHITERED_RT_SERV_AHEIP serving size ratio white red meats, White meat = poultry + fish, red meat = pork + beef + lamb + organ meats + processed meat, unit=servings/day; 1 srv= 4 oz. unprocessed meat; 1.5 oz. processed meat (1 oz. = 28.35 g) FIBER_SERV_AHEIP serving size fibers, unit=grams/day TRANS_SERV_AHEIP serving size trans fat, unit='% energy' POLYSAT_RT_SERV_AHEIP serving size polyunsaturated/saturated fats, unit=ratio CALCIUM_SERV_AHEIP serving size calcium, unit=mg/day FOLATE_SERV_AHEIP serving size folate, unit=mcg/day IRON_SERV_AHEIP serving size iron, unit=mg/day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEIP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AHEIP Calculation — AHEIP","text":"AHEIP index/score","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEIP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AHEIP Calculation — AHEIP","text":"","code":"data(\"AHEIP_VALIDATION\") AHEIP(SERV_DATA = AHEIP_VALIDATION, RESPONDENTID = AHEIP_VALIDATION$id, VEG_SERV_AHEIP = AHEIP_VALIDATION$vegetable, FRT_SERV_AHEIP = AHEIP_VALIDATION$whole_fruit, WHITERED_RT_SERV_AHEIP = AHEIP_VALIDATION$white_meat_red_meat, FIBER_SERV_AHEIP = AHEIP_VALIDATION$fiber, TRANS_SERV_AHEIP = AHEIP_VALIDATION$trans_fat, POLYSAT_RT_SERV_AHEIP = AHEIP_VALIDATION$poly_fat_sat_fat, CALCIUM_SERV_AHEIP = AHEIP_VALIDATION$calcium, FOLATE_SERV_AHEIP = AHEIP_VALIDATION$folate, IRON_SERV_AHEIP = AHEIP_VALIDATION$iron) #> # A tibble: 11 × 11 #>    RESPONDENTID AHEIP_ALL AHEIP_VEG AHEIP_FRT AHEIP_WHITEREAD AHEIP_FIBER #>           <dbl>     <dbl>     <dbl>     <dbl>           <dbl>       <dbl> #>  1            1        10         0         0               0           0 #>  2            2        17         1         1               1           1 #>  3            3        24         2         2               2           2 #>  4            4        31         3         3               3           3 #>  5            5        38         4         4               4           4 #>  6            6        45         5         5               5           5 #>  7            7        52         6         6               6           6 #>  8            8        59         7         7               7           7 #>  9            9        66         8         8               8           8 #> 10           10        73         9         9               9           9 #> 11           11        80        10        10              10          10 #> # ℹ 5 more variables: AHEIP_TRANS <dbl>, AHEIP_POLYSAT <dbl>, #> #   AHEIP_CALCIUM <dbl>, AHEIP_FOLATE <dbl>, AHEIP_IRON <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEIP_BLOCK.html","id":null,"dir":"Reference","previous_headings":"","what":"AHEIP_BLOCK Calculation — AHEIP_BLOCK","title":"AHEIP_BLOCK Calculation — AHEIP_BLOCK","text":"Calculate AHEIP dietary index (serving size based) per 1 day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEIP_BLOCK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AHEIP_BLOCK Calculation — AHEIP_BLOCK","text":"","code":"AHEIP_BLOCK(RAW_DATA)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEIP_BLOCK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AHEIP_BLOCK Calculation — AHEIP_BLOCK","text":"RAW_DATA raw data file includes results raw data dietary assessment","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEIP_BLOCK.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AHEIP_BLOCK Calculation — AHEIP_BLOCK","text":"AHEIP index/score components","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEIP_BLOCK.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AHEIP_BLOCK Calculation — AHEIP_BLOCK","text":"","code":"data(\"BLOCK_exp\") AHEIP_BLOCK(BLOCK_exp) #> # A tibble: 5 × 11 #>   RESPONDENTID AHEIP_ALL AHEIP_VEG AHEIP_FRT AHEIP_WHITEREAD AHEIP_FIBER #>          <dbl>     <dbl>     <dbl>     <dbl>           <dbl>       <dbl> #> 1            1      38.3     1.58      3.69            0.351        5.41 #> 2            2      26.0     0.695     0.527           0.717        4.42 #> 3            3      51.6     3.94      2.63            0.477        8.3  #> 4            4      47.4     1.79      5.39            0.756        9.93 #> 5            5      62.5     6.06      9.18            2.06         8.45 #> # ℹ 5 more variables: AHEIP_TRANS <dbl>, AHEIP_POLYSAT <dbl>, #> #   AHEIP_CALCIUM <dbl>, AHEIP_FOLATE <dbl>, AHEIP_IRON <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_BLOCK.html","id":null,"dir":"Reference","previous_headings":"","what":"AHEI_BLOCK Calculation — AHEI_BLOCK","title":"AHEI_BLOCK Calculation — AHEI_BLOCK","text":"Calculate AHEI dietary index Block FFQ (2013) per 1 day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_BLOCK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AHEI_BLOCK Calculation — AHEI_BLOCK","text":"","code":"AHEI_BLOCK(RAW_DATA)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_BLOCK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AHEI_BLOCK Calculation — AHEI_BLOCK","text":"RAW_DATA raw data file includes results raw responses dietary assessment","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_BLOCK.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AHEI_BLOCK Calculation — AHEI_BLOCK","text":"AHEI component scores. Sodium energy adjusted: sodium_serv/(total kcal / 1000)","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_BLOCK.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AHEI_BLOCK Calculation — AHEI_BLOCK","text":"","code":"data(\"BLOCK_exp\") AHEI_BLOCK(BLOCK_exp) #> # A tibble: 5 × 15 #>   RESPONDENTID GENDER AHEI_ALL AHEI_NOETOH AHEI_VEG AHEI_FRT AHEI_WGRAIN #>          <dbl>  <dbl>    <dbl>       <dbl>    <dbl>    <dbl>       <dbl> #> 1            1      1     48.1        45.6    1.58     3.69        5.01  #> 2            2      1     33.5        31.0    0.695    0.527       0.794 #> 3            3      1     49.1        39.1    3.94     2.63        5.89  #> 4            4      1     47.1        44.6    1.79     5.39        5.17  #> 5            5      1     52.5        50.0    6.06     9.18        3.94  #> # ℹ 8 more variables: AHEI_NUTSLEG <dbl>, AHEI_N3FAT <dbl>, AHEI_PUFA <dbl>, #> #   AHEI_SSB_FRTJ <dbl>, AHEI_REDPROC_MEAT <dbl>, AHEI_TRANS <dbl>, #> #   AHEI_SODIUM <dbl>, AHEI_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_DHQ3.html","id":null,"dir":"Reference","previous_headings":"","what":"AHEI_DHQ3 — AHEI_DHQ3","title":"AHEI_DHQ3 — AHEI_DHQ3","text":"Calculate AHEI DHQ3 data within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_DHQ3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AHEI_DHQ3 — AHEI_DHQ3","text":"","code":"AHEI_DHQ3(DATA_PATH)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_DHQ3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AHEI_DHQ3 — AHEI_DHQ3","text":"DATA_PATH file path data. data Detailed analysis file, ending detail.csv","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_DHQ3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AHEI_DHQ3 — AHEI_DHQ3","text":"AHEI component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_DHQ3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AHEI_DHQ3 — AHEI_DHQ3","text":"","code":"data(\"DHQ3_exp_detailed\") AHEI_DHQ3(DHQ3_exp_detailed) #> # A tibble: 23 × 15 #>    RESPONDENTID GENDER AHEI_ALL AHEI_NOETOH AHEI_VEG AHEI_FRT AHEI_WGRAIN #>           <dbl>  <dbl>    <dbl>       <dbl>    <dbl>    <dbl>       <dbl> #>  1            1      1     61.7        59.2     5.36    2.3         7.18  #>  2            2      2     68.5        66.0     3.62    2.12        4.84  #>  3            3      2     58.3        49.9    10       3.33        2.65  #>  4            4      2     46.1        43.6     1.72    2.33        2.99  #>  5            5      2     60.4        50.4     2.68    2.75        1.06  #>  6            6      2     51.7        48.9     1.58    0.175       3.21  #>  7            7      1     54.8        52.3     4.12    3.18        1.48  #>  8            8      2     52.8        45.8     4.54    1.8         1.97  #>  9            9      2     61.7        51.7     1.58    2.55        0.983 #> 10           10      2     54.2        50.6     2.1     0.175       5.44  #> # ℹ 13 more rows #> # ℹ 8 more variables: AHEI_NUTSLEG <dbl>, AHEI_N3FAT <dbl>, AHEI_PUFA <dbl>, #> #   AHEI_SSB_FRTJ <dbl>, AHEI_REDPROC_MEAT <dbl>, AHEI_TRANS <dbl>, #> #   AHEI_SODIUM <dbl>, AHEI_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_F_ASA24.html","id":null,"dir":"Reference","previous_headings":"","what":"AHEI_F_ASA24 — AHEI_F_ASA24","title":"AHEI_F_ASA24 — AHEI_F_ASA24","text":"Calculate AHEI (female ) ASA24 data within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_F_ASA24.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AHEI_F_ASA24 — AHEI_F_ASA24","text":"","code":"AHEI_F_ASA24(DATA_PATH, SSB_code = NULL, RECALL_SUMMARIZE = TRUE)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_F_ASA24.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AHEI_F_ASA24 — AHEI_F_ASA24","text":"DATA_PATH file path data. file name like: Items.csv SSB_code food code sugar sweetened beverage, default SSB code 17-18 FNDDS file RECALL_SUMMARIZE Whether summarize recalls participant level, default TRUE","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_F_ASA24.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AHEI_F_ASA24 — AHEI_F_ASA24","text":"AHEI component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_F_ASA24.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AHEI_F_ASA24 — AHEI_F_ASA24","text":"","code":"data(\"ASA24_exp_detailed\") AHEI_F_ASA24(ASA24_exp_detailed, SSB_code = NULL, RECALL_SUMMARIZE = TRUE) #> Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. #> RECALL_SUMMARIZE = TRUE, summarizing HEI2015 for ASA24 data by averaging over all possible recalls per person per day... #> Reminder: this AHEI index is for female only. Please stratify your data first and provide female only data. #> # A tibble: 21 × 15 #> # Groups:   UserName, UserID [21] #>    UserName UserID          AHEI_ALL AHEI_NOETOH AHEI_VEG AHEI_FRT AHEI_WGRAIN_F #>    <chr>    <chr>              <dbl>       <dbl>    <dbl>    <dbl>         <dbl> #>  1 THR01    e6541891-8a22-…     52.2        49.7    5.36     0.988         6.74  #>  2 THR02    dbb278b0-b589-…     44.9        42.4    6.94     0             0.302 #>  3 THR03    f0115426-e6f8-…     39.1        36.6    9.24     2.48          1.03  #>  4 THR04    337d84a7-3bff-…     52.7        50.2    3.84     0             3.80  #>  5 THR05    998f098a-8584-…     46.1        36.7    0        0             2.06  #>  6 THR06    aae330db-8f22-…     45.1        42.6    3.16     2.56          0     #>  7 THR07    76e0f3e1-8e17-…     51.8        49.3    7.66     1.58          3.24  #>  8 THR08    24de994f-e06a-…     72.1        65.3    2.62     2.97         10     #>  9 THR09    8f61ae64-6a82-…     48.6        46.1    0.202    3.16          2.10  #> 10 THR10    b47ab1b8-e62b-…     58.6        56.1    5.27     0            10     #> # ℹ 11 more rows #> # ℹ 8 more variables: AHEI_NUTSLEG <dbl>, AHEI_N3FAT <dbl>, AHEI_PUFA <dbl>, #> #   AHEI_SSB_FRTJ <dbl>, AHEI_REDPROC_MEAT <dbl>, AHEI_SODIUM <dbl>, #> #   AHEI_ALCOHOL_F <dbl>, SSB_FRTJ_SERV <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_M_ASA24.html","id":null,"dir":"Reference","previous_headings":"","what":"AHEI_M_ASA24 — AHEI_M_ASA24","title":"AHEI_M_ASA24 — AHEI_M_ASA24","text":"Calculate AHEI (male ) ASA24 data within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_M_ASA24.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AHEI_M_ASA24 — AHEI_M_ASA24","text":"","code":"AHEI_M_ASA24(DATA_PATH, SSB_code = NULL, RECALL_SUMMARIZE = TRUE)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_M_ASA24.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AHEI_M_ASA24 — AHEI_M_ASA24","text":"DATA_PATH file path data. file name like: Items.csv SSB_code food code sugar sweetened beverage, default SSB code 17-18 FNDDS file RECALL_SUMMARIZE Whether summarize recalls participant level, default TRUE","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_M_ASA24.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AHEI_M_ASA24 — AHEI_M_ASA24","text":"AHEI component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_M_ASA24.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AHEI_M_ASA24 — AHEI_M_ASA24","text":"","code":"data(\"ASA24_exp_detailed\") AHEI_M_ASA24(ASA24_exp_detailed, SSB_code = NULL, RECALL_SUMMARIZE = TRUE) # for participants who are all male #> Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. #> RECALL_SUMMARIZE = TRUE, summarizing HEI2015 for ASA24 data by averaging over all possible recalls per person per day... #> Reminder: this AHEI index is for male only. Please stratify your data first and provide male only data. #> # A tibble: 21 × 14 #> # Groups:   UserName, UserID [21] #>    UserName UserID          AHEI_ALL AHEI_NOETOH AHEI_VEG AHEI_FRT AHEI_WGRAIN_M #>    <chr>    <chr>              <dbl>       <dbl>    <dbl>    <dbl>         <dbl> #>  1 THR01    e6541891-8a22-…     51.1        48.6    5.36     0.988         5.62  #>  2 THR02    dbb278b0-b589-…     44.9        42.4    6.94     0             0.251 #>  3 THR03    f0115426-e6f8-…     39.0        36.5    9.24     2.48          0.857 #>  4 THR04    337d84a7-3bff-…     52.1        49.6    3.84     0             3.17  #>  5 THR05    998f098a-8584-…     45.7        36.3    0        0             1.72  #>  6 THR06    aae330db-8f22-…     45.1        42.6    3.16     2.56          0     #>  7 THR07    76e0f3e1-8e17-…     51.2        48.7    7.66     1.58          2.70  #>  8 THR08    24de994f-e06a-…     75.3        65.3    2.62     2.97         10     #>  9 THR09    8f61ae64-6a82-…     48.2        45.7    0.202    3.16          1.75  #> 10 THR10    b47ab1b8-e62b-…     58.6        56.1    5.27     0            10     #> # ℹ 11 more rows #> # ℹ 7 more variables: AHEI_NUTSLEG <dbl>, AHEI_N3FAT <dbl>, AHEI_PUFA <dbl>, #> #   AHEI_SSB_FRTJ <dbl>, AHEI_REDPROC_MEAT <dbl>, AHEI_SODIUM <dbl>, #> #   AHEI_ALCOHOL_M <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_NHANES_FPED.html","id":null,"dir":"Reference","previous_headings":"","what":"AHEI_NHANES_FPED — AHEI_NHANES_FPED","title":"AHEI_NHANES_FPED — AHEI_NHANES_FPED","text":"Calculate AHEI NHANES_FPED data (2005) within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_NHANES_FPED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AHEI_NHANES_FPED — AHEI_NHANES_FPED","text":"","code":"AHEI_NHANES_FPED(   FPED_IND_PATH = NULL,   NUTRIENT_IND_PATH = NULL,   FPED_IND_PATH2 = NULL,   NUTRIENT_IND_PATH2 = NULL,   SSB_code = NULL )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_NHANES_FPED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AHEI_NHANES_FPED — AHEI_NHANES_FPED","text":"FPED_IND_PATH file path FPED IND data day 1. file name like: fped_dr1iff.sas7bdat NUTRIENT_IND_PATH file path NUTRIENT IND data day 1. file name like: DR1IFF_J FPED_IND_PATH2 file path FPED IND data day 2. file name like: fped_dr2iff.sas7bdat NUTRIENT_IND_PATH2 file path NUTRIENT IND data day 2. file name like: DR2IFF_J SSB_code food code sugar sweetened beverage, default SSB code 17-18 FNDDS file.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_NHANES_FPED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AHEI_NHANES_FPED — AHEI_NHANES_FPED","text":"AHEI component scores serving sizes","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_NHANES_FPED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AHEI_NHANES_FPED — AHEI_NHANES_FPED","text":"","code":"data(\"NHANES_20172018\") AHEI_NHANES_FPED(NHANES_20172018$FPED_IND, NHANES_20172018$NUTRIENT_IND, NHANES_20172018$FPED_IND2, NHANES_20172018$NUTRIENT_IND2) #> Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. #> Trans fat is not avaiable for NHANES, so it is not included in the AHEI score. #> # A tibble: 6,490 × 13 #>     SEQN AHEI_ALL AHEI_NOETOH AHEI_VEG AHEI_FRT AHEI_WGRAIN AHEI_NUTSLEG #>    <dbl>    <dbl>       <dbl>    <dbl>    <dbl>       <dbl>        <dbl> #>  1 93704     43.8        42.6     0.22    1.34        1.13          0    #>  2 93705     39.9        38.6     3.05    0           0            10    #>  3 93707     33.6        32.4     1.42    0           6.42          0.35 #>  4 93708     49.1        47.9     5.18    0.612       0.643         5    #>  5 93710     44.2        42.9     0.43    2.11        2.83          1.25 #>  6 93711     53.3        48.5     6.75    1.62        3.97         10    #>  7 93712     26.4        25.2     3.5     2.28        2.69          5    #>  8 93713     38.8        37.6     6.08    4.61        0.961         1.85 #>  9 93714     34.8        33.6     0.04    0.25        4.99          0    #> 10 93715     20.1        18.9     0.44    0.4         0             0    #> # ℹ 6,480 more rows #> # ℹ 6 more variables: AHEI_N3FAT <dbl>, AHEI_PUFA <dbl>, AHEI_SSB_FRTJ <dbl>, #> #   AHEI_REDPROC_MEAT <dbl>, AHEI_SODIUM <dbl>, AHEI_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_NHANES_MPED.html","id":null,"dir":"Reference","previous_headings":"","what":"AHEI_NHANES_MPED — AHEI_NHANES_MPED","title":"AHEI_NHANES_MPED — AHEI_NHANES_MPED","text":"Calculate AHEI NHANES_MPED data (2005, 1999-2004) within 1 step day 1, day 2, day 1 2 combined (age >= 2 )","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_NHANES_MPED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AHEI_NHANES_MPED — AHEI_NHANES_MPED","text":"","code":"AHEI_NHANES_MPED(   MPED_PER_100_GRAM_PATH = NULL,   WJFRT = NULL,   NUTRIENT_PATH = NULL,   NUTRIENT_IND_PATH = NULL,   DEMO_PATH,   NUTRIENT_PATH2 = NULL,   NUTRIENT_IND_PATH2 = NULL,   SSB_code = NULL )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_NHANES_MPED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AHEI_NHANES_MPED — AHEI_NHANES_MPED","text":"MPED_PER_100_GRAM_PATH file path MPED per 100 gram data day 1 day 2 data. file name like: pyr_tot_d1.sas7bdat WJFRT file path WJFRT data day 1 day2 data. file name like: wjfrt.sas7bdat NUTRIENT_PATH file path NUTRIENT data day 1 data. file name like: DR1TOT_J.XPT DRXTOT_B.XPT NUTRIENT_IND_PATH file path NUTRIENT_IND data day 1 data. file name like: DR1IFF_J.XPT DEMO_PATH file path DEMOGRAPHIC data. file name like: DEMO_J.XPT NUTRIENT_PATH2 file path NUTRIENT2 data day 2 data. file name like: DR2TOT_J.XPT NUTRIENT_IND_PATH2 file path NUTRIENT_IND2 data day 2 data file name like: DR2IFF_J.XPT SSB_code food code sugar sweetened beverage, default SSB code 17-18 FNDDS file.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_NHANES_MPED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AHEI_NHANES_MPED — AHEI_NHANES_MPED","text":"AHEI component scores serving sizes","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/AHEI_NHANES_MPED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AHEI_NHANES_MPED — AHEI_NHANES_MPED","text":"","code":"data(\"NHANES_20032004\") AHEI_NHANES_MPED(MPED_PER_100_GRAM_PATH = NHANES_20032004$MPED_PER_100_GRAM, WJFRT = NHANES_20032004$WJFRT, NUTRIENT_PATH = NHANES_20032004$NUTRIENT, NUTRIENT_IND_PATH = NHANES_20032004$NUTRIENT_IND, DEMO_PATH = NHANES_20032004$DEMO, NUTRIENT_PATH2 = NHANES_20032004$NUTRIENT2, NUTRIENT_IND_PATH2 = NHANES_20032004$NUTRIENT_IND2) #> [1] \"Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used.\" #> # A tibble: 7,650 × 13 #>     SEQN AHEI_ALL AHEI_NOETOH AHEI_VEG AHEI_FRT AHEI_WGRAIN AHEI_NUTSLEG #>    <dbl>    <dbl>       <dbl>    <dbl>    <dbl>       <dbl>        <dbl> #>  1 21005     25.9        23.4    1.79     0          5            2.07   #>  2 21006     24.4        21.9    0.761    0          1.21         1.48   #>  3 21007     26.0        23.5    3.09     0.154      0            0      #>  4 21008     21.3        18.8    4.71     0          2.31         0.0363 #>  5 21009     37.1        34.6    3.29     0.277      0.0156       0.458  #>  6 21010     30.8        28.3    1.27     0.353      0            5.59   #>  7 21012     23.5        20.1    2.60     0          1.44         5.06   #>  8 21013     20.9        18.4    1.30     0.653      0            0.0617 #>  9 21014     41.5        39.0    4.83     0.445      1.06         5.03   #> 10 21015     46.3        43.8    3.04     2.11       3.38         5.03   #> # ℹ 7,640 more rows #> # ℹ 6 more variables: AHEI_N3FAT <dbl>, AHEI_PUFA <dbl>, AHEI_SSB_FRTJ <dbl>, #> #   AHEI_REDPROC_MEAT <dbl>, AHEI_SODIUM <dbl>, AHEI_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH.html","id":null,"dir":"Reference","previous_headings":"","what":"DASH Calculation — DASH","title":"DASH Calculation — DASH","text":"Calculate DASH dietary index, Dietary Approaches Stop Hypertension, using given serving sizes foods nutrients consumed per 1 day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DASH Calculation — DASH","text":"","code":"DASH(   SERV_DATA,   RESPONDENTID,   TOTALKCAL_DASH,   FRT_FRTJ_SERV_DASH,   VEG_SERV_DASH,   NUTSLEG_SERV_DASH,   WGRAIN_SERV_DASH,   LOWF_DAIRY_SERV_DASH,   SODIUM_SERV_DASH,   REDPROC_MEAT_SERV_DASH,   SSB_FRTJ_SERV_DASH )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DASH Calculation — DASH","text":"SERV_DATA raw data file includes serving sizes foods nutrients RESPONDENTID unique participant ID participant TOTALKCAL_DASH total energy intake, unit = kcal/day FRT_FRTJ_SERV_DASH serving size fruits 100% fruit juice, unit=servings/day (0.5 c berries; 1 cup=236.59 g; 1 med fruit (1 cup = 236.59 g); 1 cup fruit juice VEG_SERV_DASH serving size vegetable except potatoes legume, unit=servings/day (0.5 c vege; 1 cup green leafy (1 cup = 236.59 g) NUTSLEG_SERV_DASH serving size Nuts, legumes, vegetable protein (e.g., tofu), unit=servings/day = 1 srv=1oz (28.35 g) nuts 1 TBLSP peanut butter (15 mL), 1 cup legume = 4 oz WGRAIN_SERV_DASH serving size whole grains, unit=1oz LOWF_DAIRY_SERV_DASH serving size low fat dairy, including 2% less fat milk + yogurt + low-fat ice cream frozen yogurt + low-fat cheese, unit=servings/day = 1 glass milk + 1 cup yogurt + 1/2 cup ice cream/frozen yogurt + 1 slice cheese SODIUM_SERV_DASH serving size sodium, unit=mg/day per 2000 kcal REDPROC_MEAT_SERV_DASH serving size red processed meats, including Beef, pork, lamb, goat, veal, sausages, bacon, salami, ham, hot dog, deli meat, unit=servings/day; 1 srv= 4 oz. unprocessed meat; 1.5 oz. processed meat (1 oz. = 28.35 g) SSB_FRTJ_SERV_DASH serving size sugar-sweetened beverages non-100% fruit juice, unit=servings/day = 1 ser= 8oz (1 oz. = 28.35 g)","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DASH Calculation — DASH","text":"DASH index/score","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DASH Calculation — DASH","text":"","code":"data(\"DASH_VALIDATION\") DASH(DASH_VALIDATION, RESPONDENTID = DASH_VALIDATION$id, TOTALKCAL_DASH = DASH_VALIDATION$kcal, FRT_FRTJ_SERV_DASH = DASH_VALIDATION$fruit, VEG_SERV_DASH = DASH_VALIDATION$vegetable, NUTSLEG_SERV_DASH = DASH_VALIDATION$nut_legume, WGRAIN_SERV_DASH = DASH_VALIDATION$whole_grain, LOWF_DAIRY_SERV_DASH = DASH_VALIDATION$low_fat_dairy, SODIUM_SERV_DASH = DASH_VALIDATION$sodium, REDPROC_MEAT_SERV_DASH = DASH_VALIDATION$red_processed_meat, SSB_FRTJ_SERV_DASH = DASH_VALIDATION$ssb) #> Reminder: this DASH index uses quintiles to rank participants' food/drink serving sizes and then calculate DASH component scores, which may generate results that are specific to your study population but not comparable to other populations. #> Error in dplyr::mutate(., RESPONDENTID = RESPONDENTID, DASH_FRT = quintile_healthy(FRT_FRTJ_SERV_DASH),     DASH_VEG = quintile_healthy(VEG_SERV_DASH), DASH_NUTSLEG = quintile_healthy(NUTSLEG_SERV_DASH),     DASH_WGRAIN = quintile_healthy(WGRAIN_SERV_DASH), DASH_LOWF_DAIRY = quintile_healthy(LOWF_DAIRY_SERV_DASH),     DASH_SODIUM = quintile_unhealthy(SODIUM_SERV_DASH/(TOTALKCAL_DASH/2000)),     DASH_REDPROC_MEAT = quintile_unhealthy(REDPROC_MEAT_SERV_DASH),     DASH_SSB_FRTJ = quintile_unhealthy(SSB_FRTJ_SERV_DASH), DASH_ALL = DASH_FRT +         DASH_VEG + DASH_NUTSLEG + DASH_WGRAIN + DASH_LOWF_DAIRY +         DASH_SODIUM + DASH_REDPROC_MEAT + DASH_SSB_FRTJ): ℹ In argument: `DASH_FRT = quintile_healthy(FRT_FRTJ_SERV_DASH)`. #> Caused by error: #> ! `DASH_FRT` must be size 10 or 1, not 0."},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASHI.html","id":null,"dir":"Reference","previous_headings":"","what":"DASHI — DASHI","title":"DASHI — DASHI","text":"Calculate DASHI dietary index (nutrient-based), Dietary Approaches Stop Hypertension, using given nutrients consumed per 1 day. nutrients divided (total energy/2000 kcal) adjust energy intake.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASHI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DASHI — DASHI","text":"","code":"DASHI(   SERV_DATA,   RESPONDENTID,   TOTALKCAL_DASHI,   TOTAL_FAT_DASHI,   SAT_FAT_DASHI,   PROTEIN_DASHI,   CHOLESTEROL_DASHI,   FIBER_DASHI,   POTASSIUM_DASHI,   MAGNESIUM_DASHI,   CALCIUM_DASHI,   SODIUM_DASHI )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASHI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DASHI — DASHI","text":"SERV_DATA raw data file includes serving sizes foods nutrients RESPONDENTID unique participant ID participant TOTALKCAL_DASHI total energy intake, unit = kcal/day TOTAL_FAT_DASHI total fat intake, unit = percent total daily kcal SAT_FAT_DASHI saturated fat intake, unit = percent total daily kcal PROTEIN_DASHI protein intake, unit = percent total daily kcal CHOLESTEROL_DASHI cholesterol intake, unit = mg/day per 2000 kcal FIBER_DASHI fiber intake, unit = g/day per 2000 kcal POTASSIUM_DASHI potassium intake, unit = mg/day per 2000 kcal MAGNESIUM_DASHI magnesium intake, unit = mg/day per 2000 kcal CALCIUM_DASHI calcium intake, unit = mg/day per 2000 kcal SODIUM_DASHI sodium intake, unit = mg/day per 2000 kcal","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASHI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DASHI — DASHI","text":"DASHI index/score","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASHI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DASHI — DASHI","text":"","code":"data(\"DASH_trial\") DASHI(SERV_DATA = DASH_trial, RESPONDENTID = DASH_trial$Diet_Type, TOTALKCAL_DASHI = DASH_trial$Kcal, TOTAL_FAT_DASHI = DASH_trial$Totalfat_Percent, SAT_FAT_DASHI = DASH_trial$Satfat_Percent, PROTEIN_DASHI = DASH_trial$Protein_Percent, CHOLESTEROL_DASHI = DASH_trial$Cholesterol, FIBER_DASHI = DASH_trial$Fiber, POTASSIUM_DASHI = DASH_trial$Potassium, MAGNESIUM_DASHI = DASH_trial$Magnesium, CALCIUM_DASHI = DASH_trial$Calcium, SODIUM_DASHI = DASH_trial$Sodium) #> # A tibble: 5 × 12 #>   RESPONDENTID    DASHI_ALL TOTALKCAL_DASHI DASHI_TOTAL_FAT DASHI_SAT_FAT #>   <chr>               <dbl>           <dbl>           <dbl>         <dbl> #> 1 DASH                7.79             2100           1              0.9  #> 2 DASH_lowSodium      8.79             2100           1              0.9  #> 3 DASH_MedSodium      8.76             2100           1              0.9  #> 4 DASH_HighSodium     7.79             2100           1              0.9  #> 5 Control             0.833            2100           0.130          0.19 #> # ℹ 7 more variables: DASHI_PROTEIN <dbl>, DASHI_CHOLESTEROL <dbl>, #> #   DASHI_FIBER <dbl>, DASHI_POTASSIUM <dbl>, DASHI_MAGNESIUM <dbl>, #> #   DASHI_CALCIUM <dbl>, DASHI_SODIUM <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASHI_NHANES_FPED.html","id":null,"dir":"Reference","previous_headings":"","what":"DASHI_NHANES_FPED — DASHI_NHANES_FPED","title":"DASHI_NHANES_FPED — DASHI_NHANES_FPED","text":"Calculate DASHI (nutrient-based) NHANES_FPED data (2005) within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASHI_NHANES_FPED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DASHI_NHANES_FPED — DASHI_NHANES_FPED","text":"","code":"DASHI_NHANES_FPED(NUTRIENT_PATH = NULL, NUTRIENT_PATH2 = NULL)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASHI_NHANES_FPED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DASHI_NHANES_FPED — DASHI_NHANES_FPED","text":"NUTRIENT_PATH file path NUTRIENT data. file name like: DR1TOT_J.XPT NUTRIENT_PATH2 file path NUTRIENT2 data. file name like: DR2TOT_J.XPT","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASHI_NHANES_FPED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DASHI_NHANES_FPED — DASHI_NHANES_FPED","text":"DASHI component scores serving sizes","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASHI_NHANES_FPED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DASHI_NHANES_FPED — DASHI_NHANES_FPED","text":"","code":"data(\"NHANES_20172018\") DASHI_NHANES_FPED(NUTRIENT_PATH = NHANES_20172018$NUTRIENT, NUTRIENT_PATH2 = NHANES_20172018$NUTRIENT2) #> # A tibble: 6,491 × 11 #>     SEQN DASHI_ALL DASHI_TOTAL_FAT DASHI_SAT_FAT DASHI_CHOLESTEROL DASHI_SODIUM #>    <dbl>     <dbl>           <dbl>         <dbl>             <dbl>        <dbl> #>  1 93704      4.72          0.768         0.840              0.680       0.5    #>  2 93705      2.49          0             0.472              0.5         0      #>  3 93707      1.15          0             0.0199             0           0.0844 #>  4 93708      2.80          0             0.173              0.5         0      #>  5 93710      4.21          0.653         0.490              0.5         0.5    #>  6 93711      3.62          0.0920        0.490              0.312       0.5    #>  7 93712      3.89          0.844         0.640              0.629       0      #>  8 93713      3.79          0.5           0.428              0.889       0.772  #>  9 93714      1.68          0             0                  0           0      #> 10 93715      1.82          0             0.239              0.162       0.5    #> # ℹ 6,481 more rows #> # ℹ 5 more variables: DASHI_PROTEIN <dbl>, DASHI_FIBER <dbl>, #> #   DASHI_POTASSIUM <dbl>, DASHI_MAGNESIUM <dbl>, DASHI_CALCIUM <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASHI_NHANES_MPED.html","id":null,"dir":"Reference","previous_headings":"","what":"DASHI_NHANES_MPED — DASHI_NHANES_MPED","title":"DASHI_NHANES_MPED — DASHI_NHANES_MPED","text":"Calculate DASHI NHANES_MPED data (2005, 1999-2004) within 1 step day 1, day 2, day 1 2 combined (age >= 2 )","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASHI_NHANES_MPED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DASHI_NHANES_MPED — DASHI_NHANES_MPED","text":"","code":"DASHI_NHANES_MPED(   MPED_PER_100_GRAM_PATH = NULL,   WJFRT = NULL,   NUTRIENT_PATH = NULL,   NUTRIENT_IND_PATH = NULL,   DEMO_PATH,   NUTRIENT_PATH2 = NULL,   NUTRIENT_IND_PATH2 = NULL )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASHI_NHANES_MPED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DASHI_NHANES_MPED — DASHI_NHANES_MPED","text":"MPED_PER_100_GRAM_PATH file path MPED per 100 gram data day 1 day 2 data. file name like: pyr_tot_d1.sas7bdat WJFRT file path WJFRT data day 1 day2 data. file name like: wjfrt.sas7bdat NUTRIENT_PATH file path NUTRIENT data day 1 data. file name like: DR1TOT_J.XPT DRXTOT_B.XPT NUTRIENT_IND_PATH file path NUTRIENT_IND data day 1 data. file name like: DR1IFF_J.XPT DEMO_PATH file path DEMOGRAPHIC data. file name like: DEMO_J.XPT NUTRIENT_PATH2 file path NUTRIENT2 data day 2 data. file name like: DR2TOT_J.XPT NUTRIENT_IND_PATH2 file path NUTRIENT_IND2 data day 2 data file name like: DR2IFF_J.XPT","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASHI_NHANES_MPED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DASHI_NHANES_MPED — DASHI_NHANES_MPED","text":"DASHI component scores serving sizes","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASHI_NHANES_MPED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DASHI_NHANES_MPED — DASHI_NHANES_MPED","text":"","code":"data(\"NHANES_20032004\") DASHI_NHANES_MPED(MPED_PER_100_GRAM_PATH = NHANES_20032004$MPED_PER_100_GRAM, WJFRT = NHANES_20032004$WJFRT, NUTRIENT_PATH = NHANES_20032004$NUTRIENT, NUTRIENT_IND_PATH = NHANES_20032004$NUTRIENT_IND, DEMO_PATH = NHANES_20032004$DEMO, NUTRIENT_PATH2 = NHANES_20032004$NUTRIENT2, NUTRIENT_IND_PATH2 = NHANES_20032004$NUTRIENT_IND2) #> # A tibble: 7,650 × 11 #>     SEQN DASHI_ALL DASHI_TOTAL_FAT DASHI_SAT_FAT DASHI_CHOLESTEROL DASHI_SODIUM #>    <dbl>     <dbl>           <dbl>         <dbl>             <dbl>        <dbl> #>  1 21005      2.28           0.321         0.585             0.550        0     #>  2 21006      2.53           0.591         0.577             0.5          0     #>  3 21007      2.97           0.5           0.546             0.5          0.300 #>  4 21008      1.54           0.185         0.313             0.381        0     #>  5 21009      1.73           0             0.454             0.294        0.5   #>  6 21010      4.92           0.812         0.435             0.781        1     #>  7 21012      1.30           0.113         0.388             0            0     #>  8 21013      2.94           0.410         0.614             0.968        0.672 #>  9 21014      5.17           0.725         0.373             0.742        0     #> 10 21015      4.84           0.373         0.394             0.661        0.677 #> # ℹ 7,640 more rows #> # ℹ 5 more variables: DASHI_PROTEIN <dbl>, DASHI_FIBER <dbl>, #> #   DASHI_POTASSIUM <dbl>, DASHI_MAGNESIUM <dbl>, DASHI_CALCIUM <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_ASA24.html","id":null,"dir":"Reference","previous_headings":"","what":"DASH_ASA24 — DASH_ASA24","title":"DASH_ASA24 — DASH_ASA24","text":"Calculate DASH ASA24 data within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_ASA24.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DASH_ASA24 — DASH_ASA24","text":"","code":"DASH_ASA24(   DATA_PATH,   SKIM_MILK_code = NULL,   LOWF_CHEESE_code = NULL,   SSB_code = NULL,   RECALL_SUMMARIZE = TRUE )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_ASA24.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DASH_ASA24 — DASH_ASA24","text":"DATA_PATH file path data. file name like: Items.csv SKIM_MILK_code food code skim milk, default skim milk code 17-18 FNDDS file LOWF_CHEESE_code food code low-fat cheese, default low-fat cheese code 17-18 FNDDS file SSB_code food code sugar sweetened beverage, default SSB code 17-18 FNDDS file RECALL_SUMMARIZE Whether summarize recalls person level, default TRUE","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_ASA24.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DASH_ASA24 — DASH_ASA24","text":"DASH component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_ASA24.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DASH_ASA24 — DASH_ASA24","text":"","code":"data(\"ASA24_exp_detailed\") DASH_ASA24(ASA24_exp_detailed, SKIM_MILK_code = NULL, LOWF_CHEESE_code = NULL, SSB_code = NULL, RECALL_SUMMARIZE = TRUE) #> Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. #> Since no skim milk code is provided, the default skim milk code from 17-18 FNDDS file is used. #> Since no low-fat cheese code is provided, the default low-fat cheese code from 17-18 FNDDS file is used. #> RECALL_SUMMARIZE = TRUE, summarizing HEI2015 for ASA24 data by averaging over all possible recalls per person per day... #> Reminder: this DASH index uses quintiles to rank participants' food/drink serving sizes and then calculate DASH component scores, which may generate results that are specific to your study population but not comparable to other populations. #> # A tibble: 21 × 11 #> # Groups:   UserName, UserID [21] #>    UserName UserID           DASH_ALL DASH_FRT DASH_VEG DASH_NUTSLEG DASH_WGRAIN #>    <chr>    <chr>               <dbl>    <dbl>    <dbl>        <dbl>       <dbl> #>  1 THR01    e6541891-8a22-4…       28        5        5            5           5 #>  2 THR02    dbb278b0-b589-4…       32        5        5            5           5 #>  3 THR03    f0115426-e6f8-4…       28        5        5            5           5 #>  4 THR04    337d84a7-3bff-4…       28        1        5            5           5 #>  5 THR05    998f098a-8584-4…       16        1        1            1           5 #>  6 THR06    aae330db-8f22-4…       24        5        5            1           1 #>  7 THR07    76e0f3e1-8e17-4…       28        5        5            1           5 #>  8 THR08    24de994f-e06a-4…       36        5        5            5           5 #>  9 THR09    8f61ae64-6a82-4…       28        5        5            5           5 #> 10 THR10    b47ab1b8-e62b-4…       36        5        5            5           5 #> # ℹ 11 more rows #> # ℹ 4 more variables: DASH_LOWF_DAIRY <dbl>, DASH_SODIUM <dbl>, #> #   DASH_REDPROC_MEAT <dbl>, DASH_SSB_FRTJ <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_BLOCK.html","id":null,"dir":"Reference","previous_headings":"","what":"DASH_BLOCK Calculation — DASH_BLOCK","title":"DASH_BLOCK Calculation — DASH_BLOCK","text":"Calculate DASH dietary index Block FFQ (2013) per 1 day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_BLOCK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DASH_BLOCK Calculation — DASH_BLOCK","text":"","code":"DASH_BLOCK(RAW_DATA)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_BLOCK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DASH_BLOCK Calculation — DASH_BLOCK","text":"RAW_DATA raw data file includes results raw data dietary assessment","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_BLOCK.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DASH_BLOCK Calculation — DASH_BLOCK","text":"DASH component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_BLOCK.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DASH_BLOCK Calculation — DASH_BLOCK","text":"","code":"data(\"BLOCK_exp\") DASH_BLOCK(BLOCK_exp) #> Reminder: this DASH index uses quintiles to rank participants' food/drink serving sizes and then calculate DASH component scores, which may generate results that are specific to your study population but not comparable to other populations. #> # A tibble: 5 × 25 #>   RESPONDENTID DASH_ALL DASH_FRT DASH_VEG DASH_NUTSLEG DASH_WGRAIN #>          <dbl>    <dbl>    <dbl>    <dbl>        <dbl>       <dbl> #> 1            1       28        3        2            4           3 #> 2            2       19        1        1            5           1 #> 3            3       23        2        4            3           5 #> 4            4       23        4        3            2           4 #> 5            5       28        5        5            1           2 #> # ℹ 19 more variables: DASH_LOWF_DAIRY <dbl>, DASH_SODIUM <dbl>, #> #   DASH_REDPROC_MEAT <dbl>, DASH_SSB_FRTJ <dbl>, DT_KCAL <dbl>, #> #   F_BERRIES <dbl>, F_WHOLE <dbl>, FRT_FRTJ_SERV <dbl>, VEG_SERV <dbl>, #> #   NUTSLEG_SERV <dbl>, WGRAIN_SERV <dbl>, LOWF_MILK_SERV <dbl>, #> #   YOGURT_SERV <dbl>, LOWF_ICECREAMFROYO_SERV <dbl>, LOWF_CHEESE_SERV <dbl>, #> #   LOWF_DAIRY_SERV <dbl>, SODIUM_SERV <dbl>, REDPROC_MEAT_SERV <dbl>, #> #   SSB_FRTJ_SERV <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_DHQ3.html","id":null,"dir":"Reference","previous_headings":"","what":"DASH_DHQ3 — DASH_DHQ3","title":"DASH_DHQ3 — DASH_DHQ3","text":"Calculate DASH DHQ3 data within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_DHQ3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DASH_DHQ3 — DASH_DHQ3","text":"","code":"DASH_DHQ3(DATA_PATH)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_DHQ3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DASH_DHQ3 — DASH_DHQ3","text":"DATA_PATH file path data. data Detailed analysis file, ending detail.csv","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_DHQ3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DASH_DHQ3 — DASH_DHQ3","text":"DASH component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_DHQ3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DASH_DHQ3 — DASH_DHQ3","text":"","code":"data(\"DHQ3_exp_detailed\") DASH_DHQ3(DHQ3_exp_detailed) #> Reminder: this DASH index uses quintiles to rank participants' food/drink serving sizes and then calculate DASH component scores, which may generate results that are specific to your study population but not comparable to other populations. #> # A tibble: 23 × 10 #>    `Respondent ID` DASH_ALL DASH_FRT DASH_VEG DASH_NUTSLEG DASH_WGRAIN #>              <dbl>    <dbl>    <dbl>    <dbl>        <dbl>       <dbl> #>  1               1       25        3        4            5           5 #>  2               2       29        3        3            5           5 #>  3               3       24        5        5            4           3 #>  4               4       23        5        1            2           3 #>  5               5       25        4        2            2           2 #>  6               6       19        1        1            1           3 #>  7               7       26        4        4            3           3 #>  8               8       20        3        4            4           3 #>  9               9       20        4        1            2           1 #> 10              10       20        1        2            3           5 #> # ℹ 13 more rows #> # ℹ 4 more variables: DASH_LOWF_DAIRY <dbl>, DASH_SODIUM <dbl>, #> #   DASH_REDPROC_MEAT <dbl>, DASH_SSB_FRTJ <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_NHANES_FPED.html","id":null,"dir":"Reference","previous_headings":"","what":"DASH_NHANES_FPED — DASH_NHANES_FPED","title":"DASH_NHANES_FPED — DASH_NHANES_FPED","text":"Calculate DASH NHANES_FPED data (2005) within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_NHANES_FPED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DASH_NHANES_FPED — DASH_NHANES_FPED","text":"","code":"DASH_NHANES_FPED(   FPED_IND_PATH = NULL,   NUTRIENT_IND_PATH = NULL,   FPED_IND_PATH2 = NULL,   NUTRIENT_IND_PATH2 = NULL,   SKIM_MILK_code = NULL,   LOWF_CHEESE_code = NULL,   SSB_code = NULL )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_NHANES_FPED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DASH_NHANES_FPED — DASH_NHANES_FPED","text":"FPED_IND_PATH file path FPED IND data. file name like: fped_dr1iff.sas7bdat NUTRIENT_IND_PATH file path NUTRIENT IND data. file name like: DR1IFF_J FPED_IND_PATH2 file path FPED IND data day 2. file name like: fped_dr2iff.sas7bdat NUTRIENT_IND_PATH2 file path NUTRIENT IND data day 2. file name like: DR2IFF_J SKIM_MILK_code food code skim milk. default food codes 17-18 FNDDS file. LOWF_CHEESE_code food code low-fat cheese. default food codes 17-18 FNDDS file. SSB_code food code sugar-sweetened beverages (SSB). default food codes 17-18 FNDDS file.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_NHANES_FPED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DASH_NHANES_FPED — DASH_NHANES_FPED","text":"DASH component scores serving sizes","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_NHANES_FPED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DASH_NHANES_FPED — DASH_NHANES_FPED","text":"","code":"data(\"NHANES_20172018\") DASH_NHANES_FPED(NHANES_20172018$FPED_IND, NHANES_20172018$NUTRIENT_IND, NHANES_20172018$FPED_IND2, NHANES_20172018$NUTRIENT_IND2) #> Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. #> Since no skim milk code is provided, the default skim milk code from 17-18 FNDDS file is used. #> Since no low-fat cheese code is provided, the default low-fat cheese code from 17-18 FNDDS file is used. #> Reminder: this DASH index uses quintiles to rank participants' food/drink serving sizes and then calculate DASH component scores, which may generate results that are specific to your study population but not comparable to other populations. #> # A tibble: 6,490 × 10 #>     SEQN DASH_ALL DASH_FRT DASH_VEG DASH_NUTSLEG DASH_WGRAIN DASH_LOWF_DAIRY #>    <dbl>    <dbl>    <dbl>    <dbl>        <dbl>       <dbl>           <dbl> #>  1 93704     23.5      4.5      1            1           2.5               1 #>  2 93705     18.5      1.5      3            4           1                 1 #>  3 93707     20        1        2            2           4.5               1 #>  4 93708     23        2        3.5          3           2                 1 #>  5 93710     25.5      3.5      1.5          2.5         3.5               1 #>  6 93711     31        4.5      4.5          5           3                 5 #>  7 93712     18        3        3.5          3           3                 1 #>  8 93713     24.5      4.5      4.5          2.5         2.5               1 #>  9 93714     17.5      2.5      1            1           3                 3 #> 10 93715     14.5      2        1.5          1           1                 1 #> # ℹ 6,480 more rows #> # ℹ 3 more variables: DASH_SODIUM <dbl>, DASH_REDPROC_MEAT <dbl>, #> #   DASH_SSB_FRTJ <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_NHANES_MPED.html","id":null,"dir":"Reference","previous_headings":"","what":"DASH_NHANES_MPED — DASH_NHANES_MPED","title":"DASH_NHANES_MPED — DASH_NHANES_MPED","text":"Calculate DASH NHANES_MPED data (2005, 1999-2004) within 1 step day 1, day 2, day 1 2 combined (age >= 2 )","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_NHANES_MPED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DASH_NHANES_MPED — DASH_NHANES_MPED","text":"","code":"DASH_NHANES_MPED(   MPED_PER_100_GRAM_PATH = NULL,   WJFRT = NULL,   NUTRIENT_PATH = NULL,   NUTRIENT_IND_PATH = NULL,   DEMO_PATH,   NUTRIENT_PATH2 = NULL,   NUTRIENT_IND_PATH2 = NULL,   SKIM_MILK_code = NULL,   LOWF_CHEESE_code = NULL,   SSB_code = NULL )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_NHANES_MPED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DASH_NHANES_MPED — DASH_NHANES_MPED","text":"MPED_PER_100_GRAM_PATH file path MPED per 100 gram data day 1 day 2 data. file name like: pyr_tot_d1.sas7bdat WJFRT file path WJFRT data day 1 day2 data. file name like: wjfrt.sas7bdat NUTRIENT_PATH file path NUTRIENT data day 1 data. file name like: DR1TOT_J.XPT DRXTOT_B.XPT NUTRIENT_IND_PATH file path NUTRIENT_IND data day 1 data. file name like: DR1IFF_J.XPT DEMO_PATH file path DEMOGRAPHIC data. file name like: DEMO_J.XPT NUTRIENT_PATH2 file path NUTRIENT2 data day 2 data. file name like: DR2TOT_J.XPT NUTRIENT_IND_PATH2 file path NUTRIENT_IND2 data day 2 data file name like: DR2IFF_J.XPT SKIM_MILK_code food code skim milk. default food codes 17-18 FNDDS file. LOWF_CHEESE_code food code low-fat cheese. default food codes 17-18 FNDDS file. SSB_code food code sugar-sweetened beverages (SSB). default food codes 17-18 FNDDS file.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_NHANES_MPED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DASH_NHANES_MPED — DASH_NHANES_MPED","text":"DASH component scores serving sizes","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DASH_NHANES_MPED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DASH_NHANES_MPED — DASH_NHANES_MPED","text":"","code":"data(\"NHANES_20032004\") DASH_NHANES_MPED(MPED_PER_100_GRAM_PATH = NHANES_20032004$MPED_PER_100_GRAM, WJFRT = NHANES_20032004$WJFRT, NUTRIENT_PATH = NHANES_20032004$NUTRIENT, NUTRIENT_IND_PATH = NHANES_20032004$NUTRIENT_IND, DEMO_PATH = NHANES_20032004$DEMO, NUTRIENT_PATH2 = NHANES_20032004$NUTRIENT2, NUTRIENT_IND_PATH2 = NHANES_20032004$NUTRIENT_IND2) #> Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. #> Since no skim milk code is provided, the default skim milk code from 17-18 FNDDS file is used. #> Since no low-fat cheese code is provided, the default low-fat cheese code from 17-18 FNDDS file is used. #> Reminder: this DASH index uses quintiles to rank participants' food/drink serving sizes and then calculate DASH component scores, which may generate results that are specific to your study population but not comparable to other populations. #> # A tibble: 7,650 × 10 #>     SEQN DASH_ALL DASH_FRT DASH_VEG DASH_NUTSLEG DASH_WGRAIN DASH_LOWF_DAIRY #>    <dbl>    <dbl>    <dbl>    <dbl>        <dbl>       <dbl>           <dbl> #>  1 21005     15.5      2        2            2.5         3                 1 #>  2 21006     18        2        2            2.5         2.5               1 #>  3 21007     18        3        3            1           1                 1 #>  4 21008     17.5      1        3.5          2.5         3                 1 #>  5 21009     19.5      2        3            2           2                 1 #>  6 21010     18        1.5      2            4           1                 1 #>  7 21012     17.5      1        3            4           2.5               1 #>  8 21013     16        2.5      2            2           1                 1 #>  9 21014     25.5      3        4            4           2.5               1 #> 10 21015     27.5      3        3            4           4.5               1 #> # ℹ 7,640 more rows #> # ℹ 3 more variables: DASH_SODIUM <dbl>, DASH_REDPROC_MEAT <dbl>, #> #   DASH_SSB_FRTJ <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII.html","id":null,"dir":"Reference","previous_headings":"","what":"DII — DII","title":"DII — DII","text":"Calculate DII dietary index, Dietary Inflammation Index, using given serving sizes foods nutrients consumed per 1 day. parameters needed. can give many parameters , results include scores parameters included.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DII — DII","text":"","code":"DII(   SERV_DATA,   RESPONDENTID,   REPEATNUM = 1,   ALCOHOL_DII = NULL,   VITB12_DII = NULL,   VITB6_DII = NULL,   BCAROTENE_DII = NULL,   CAFFEINE_DII = NULL,   CARB_DII = NULL,   CHOLES_DII = NULL,   KCAL_DII = NULL,   EUGENOL_DII = NULL,   TOTALFAT_DII = NULL,   FIBER_DII = NULL,   FOLICACID_DII = NULL,   GARLIC_DII = NULL,   GINGER_DII = NULL,   IRON_DII = NULL,   MG_DII = NULL,   MUFA_DII = NULL,   NIACIN_DII = NULL,   N3FAT_DII = NULL,   N6FAT_DII = NULL,   ONION_DII = NULL,   PROTEIN_DII = NULL,   PUFA_DII = NULL,   RIBOFLAVIN_DII = NULL,   SAFFRON_DII = NULL,   SATFAT_DII = NULL,   SE_DII = NULL,   THIAMIN_DII = NULL,   TRANSFAT_DII = NULL,   TURMERIC_DII = NULL,   VITA_DII = NULL,   VITC_DII = NULL,   VITD_DII = NULL,   VITE_DII = NULL,   ZN_DII = NULL,   TEA_DII = NULL,   FLA3OL_DII = NULL,   FLAVONES_DII = NULL,   FLAVONOLS_DII = NULL,   FLAVONONES_DII = NULL,   ANTHOC_DII = NULL,   ISOFLAVONES_DII = NULL,   PEPPER_DII = NULL,   THYME_DII = NULL,   ROSEMARY_DII = NULL )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DII — DII","text":"SERV_DATA raw data file includes serving sizes foods nutrients RESPONDENTID unique participant ID participant REPEATNUM number repeated record participant, 1st collection=1, 2nd collection =2, etc. repeat number given, default 1 ALCOHOL_DII Unit=g VITB12_DII Unit=μg VITB6_DII Unit=mg BCAROTENE_DII Unit=μg CAFFEINE_DII Unit=g CARB_DII Unit=g CHOLES_DII Unit=mg KCAL_DII Unit=KCAL_DII EUGENOL_DII Unit=mg TOTALFAT_DII Unit=g FIBER_DII Unit=g FOLICACID_DII Unit=μg GARLIC_DII Unit=g GINGER_DII Unit=g IRON_DII Unit=mg MG_DII Unit=mg MUFA_DII Unit=g NIACIN_DII Unit=mg N3FAT_DII Unit=g N6FAT_DII Unit=g ONION_DII Unit=g PROTEIN_DII Unit=g PUFA_DII Unit=g RIBOFLAVIN_DII Unit=mg SAFFRON_DII Unit=g SATFAT_DII Unit=g SE_DII Unit=μg THIAMIN_DII Unit=mg TRANSFAT_DII Unit=g TURMERIC_DII Unit=mg VITA_DII Unit=RE VITC_DII Unit=mg VITD_DII Unit=μg VITE_DII Unit=mg ZN_DII Unit=mg TEA_DII Unit=g FLA3OL_DII Unit=mg FLAVONES_DII Unit=mg FLAVONOLS_DII Unit=mg FLAVONONES_DII Unit=mg ANTHOC_DII Unit=mg ISOFLAVONES_DII Unit=mg PEPPER_DII Unit=g THYME_DII Unit=mg ROSEMARY_DII Unit=mg","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DII — DII","text":"DII index/score","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DII — DII","text":"","code":"data(\"DHQ3_exp\") DII(DHQ3_exp, DHQ3_exp$`Respondent ID`, 1, DHQ3_exp$`Alcohol (g)`, DHQ3_exp$`Vitamin B12 (mcg)`, DHQ3_exp$`Vitamin B6 (mg)`) #> It is normal to see warnings if you do not provide all arguments using DII. The algorithm will only count the arguments you enter to calculate the DII. All warnings are about the first column you don't use. For example, if you only entered alcohol, vitamin b12, and vitamin b6, all warnings would remind you that bcarotene is not found. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> Warning: Unknown or uninitialised column: `BCAROTENE_DII`. #> # A tibble: 23 × 49 #> # Groups:   RESPONDENTID [23] #>    RESPONDENTID DII_ALL DII_NOETOH REPEATNUM ALCOHOL_DII VITB12_DII VITB6_DII #>           <dbl>   <dbl>      <dbl>     <dbl>       <dbl>      <dbl>     <dbl> #>  1            1  0.0479    -0.230          1       0.278    -0.0232   -0.207  #>  2            2  0.208     -0.0697         1       0.278    -0.0855    0.0157 #>  3            3 -0.115     -0.384          1       0.270    -0.0361   -0.348  #>  4            4  0.0194    -0.258          1       0.278    -0.0486   -0.210  #>  5            5  0.277      0.0425         1       0.234    -0.0760    0.119  #>  6            6  0.448      0.170          1       0.278    -0.0949    0.265  #>  7            7  0.348      0.0699         1       0.278    -0.0869    0.157  #>  8            8 -0.0124    -0.286          1       0.274    -0.0574   -0.229  #>  9            9  0.101     -0.0525         1       0.153    -0.0682    0.0157 #> 10           10  0.170     -0.108          1       0.277    -0.0297   -0.0778 #> # ℹ 13 more rows #> # ℹ 42 more variables: BCAROTENE_DII <dbl>, CAFFEINE_DII <int>, CARB_DII <int>, #> #   CHOLES_DII <int>, KCAL_DII <int>, EUGENOL_DII <int>, TOTALFAT_DII <int>, #> #   FIBER_DII <int>, FOLICACID_DII <int>, GARLIC_DII <int>, GINGER_DII <int>, #> #   IRON_DII <int>, MG_DII <int>, MUFA_DII <int>, NIACIN_DII <int>, #> #   N3FAT_DII <int>, N6FAT_DII <int>, ONION_DII <int>, PROTEIN_DII <int>, #> #   PUFA_DII <int>, RIBOFLAVIN_DII <int>, SAFFRON_DII <int>, …"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_ASA24.html","id":null,"dir":"Reference","previous_headings":"","what":"DII_ASA24 — DII_ASA24","title":"DII_ASA24 — DII_ASA24","text":"Calculate Dietary Inflammatory Index ASA24 data within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_ASA24.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DII_ASA24 — DII_ASA24","text":"","code":"DII_ASA24(DATA_PATH, RECALL_SUMMARIZE = TRUE)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_ASA24.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DII_ASA24 — DII_ASA24","text":"DATA_PATH file path data. file name like: Totals.csv. RECALL_SUMMARIZE Whether summarize food group nutrient intake days reported per individual per day. Default TRUE.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_ASA24.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DII_ASA24 — DII_ASA24","text":"DII component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_ASA24.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DII_ASA24 — DII_ASA24","text":"","code":"data(\"ASA24_exp\") DII_ASA24(ASA24_exp, RECALL_SUMMARIZE = TRUE) #> RECALL_SUMMARIZE = TRUE, summarizing HEI2015 for ASA24 data by averaging over all possible recalls per person per day... #> # A tibble: 21 × 32 #> # Groups:   UserName [21] #>    UserName UserID DII_ALL DII_NOETOH ALCOHOL   VITB12  VITB6 BCAROTENE CAFFEINE #>       <dbl> <chr>    <dbl>      <dbl>   <dbl>    <dbl>  <dbl>     <dbl>    <dbl> #>  1        1 e6541… -0.0932     -0.371   0.278 -0.0766   0.127    -0.408   0.0848 #>  2        2 dbb27…  2.93        2.65    0.278 -0.0982   0.136     0.295   0.0845 #>  3        3 f0115…  1.39        1.11    0.278 -0.0185  -0.214     0.549   0.0850 #>  4        4 337d8…  1.28        1.00    0.278  0.00997 -0.185     0.538   0.0850 #>  5        5 998f0…  3.84        3.56    0.274 -0.0934   0.239     0.565   0.0844 #>  6        6 aae33…  2.29        2.01    0.278 -0.0846  -0.359     0.554   0.0846 #>  7        7 76e0f…  1.05        0.768   0.278 -0.0781  -0.206    -0.125   0.0839 #>  8        8 24de9…  0.178       0.409  -0.231 -0.0608  -0.252     0.459   0.0850 #>  9        9 8f61a…  0.805       0.527   0.278 -0.0908   0.134     0.564   0.0847 #> 10       10 b47ab…  1.98        1.70    0.278 -0.0949   0.184     0.537   0.0845 #> # ℹ 11 more rows #> # ℹ 23 more variables: CARB <dbl>, CHOLES <dbl>, KCAL <dbl>, TOTALFAT <dbl>, #> #   FIBER <dbl>, FOLICACID <dbl>, IRON <dbl>, MG <dbl>, MUFA <dbl>, #> #   NIACIN <dbl>, N3FAT <dbl>, N6FAT <dbl>, PROTEIN <dbl>, PUFA <dbl>, #> #   RIBOFLAVIN <dbl>, SATFAT <dbl>, SE <dbl>, THIAMIN <dbl>, VITA <dbl>, #> #   VITC <dbl>, VITD <dbl>, VITE <dbl>, ZN <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_BLOCK.html","id":null,"dir":"Reference","previous_headings":"","what":"DII_BLOCK Calculation — DII_BLOCK","title":"DII_BLOCK Calculation — DII_BLOCK","text":"Calculate DII dietary index (serving size based) per 1 day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_BLOCK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DII_BLOCK Calculation — DII_BLOCK","text":"","code":"DII_BLOCK(RAW_DATA)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_BLOCK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DII_BLOCK Calculation — DII_BLOCK","text":"RAW_DATA raw data file includes results raw data dietary assessment","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_BLOCK.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DII_BLOCK Calculation — DII_BLOCK","text":"DII index/score components","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_BLOCK.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DII_BLOCK Calculation — DII_BLOCK","text":"","code":"data(\"BLOCK_exp\") DII_BLOCK(BLOCK_exp) #> # A tibble: 5 × 34 #>   RESPONDENTID DII_ALL DII_NOETOH ALCOHOL  VITB12   VITB6 BCAROTENE CAFFEINE #>          <dbl>   <dbl>      <dbl>   <dbl>   <dbl>   <dbl>     <dbl>    <dbl> #> 1            1   3.74        3.46   0.278 -0.0682 -0.0157    0.464    0.0850 #> 2            2   2.65        2.37   0.278 -0.0428  0.0928    0.552    0.0845 #> 3            3  -1.59       -1.72   0.124  0.0986 -0.346     0.403    0.0849 #> 4            4  -1.13       -1.41   0.278 -0.0588 -0.192    -0.0426   0.0842 #> 5            5  -0.724      -1.00   0.278 -0.0758 -0.204    -0.584    0.0845 #> # ℹ 26 more variables: CARB <dbl>, CHOLES <dbl>, KCAL <dbl>, TOTALFAT <dbl>, #> #   FIBER <dbl>, FOLICACID <dbl>, IRON <dbl>, MG <dbl>, MUFA <dbl>, #> #   NIACIN <dbl>, N3FAT <dbl>, N6FAT <dbl>, PROTEIN <dbl>, PUFA <dbl>, #> #   RIBOFLAVIN <dbl>, SATFAT <dbl>, SE <dbl>, THIAMIN <dbl>, TRANSFAT <dbl>, #> #   VITA <dbl>, VITC <dbl>, VITD <dbl>, VITE <dbl>, ZN <dbl>, TEA <dbl>, #> #   ISOFLAVONES <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_DHQ3.html","id":null,"dir":"Reference","previous_headings":"","what":"DII_DHQ3 — DII_DHQ3","title":"DII_DHQ3 — DII_DHQ3","text":"Calculate Dietary Inflammation Index (DII) DHQ3 data within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_DHQ3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DII_DHQ3 — DII_DHQ3","text":"","code":"DII_DHQ3(DATA_PATH)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_DHQ3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DII_DHQ3 — DII_DHQ3","text":"DATA_PATH file path data. data Total Daily Results file, ending results.csv","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_DHQ3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DII_DHQ3 — DII_DHQ3","text":"DII component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_DHQ3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DII_DHQ3 — DII_DHQ3","text":"","code":"data(\"DHQ3_exp\") DII_DHQ3(DHQ3_exp) #> It is normal to see warnings if you do not provide all arguments using DII. The algorithm will only count the arguments you enter to calculate the DII. All warnings are about the first column you don't use. For example, if you only entered alcohol, vitamin b12, and vitamin b6, all warnings would remind you that bcarotene is not found. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> Warning: Unknown or uninitialised column: `EUGENOL_DII`. #> # A tibble: 23 × 49 #> # Groups:   Respondent ID [23] #>    `Respondent ID` DII_ALL DII_NOETOH REPEATNUM ALCOHOL_DII VITB12_DII VITB6_DII #>              <dbl>   <dbl>      <dbl>     <dbl>       <dbl>      <dbl>     <dbl> #>  1               1  -2.22     -2.50           1       0.278    -0.0232   -0.207  #>  2               2   0.290     0.0119         1       0.278    -0.0855    0.0157 #>  3               3  -3.23     -3.50           1       0.270    -0.0361   -0.348  #>  4               4   1.43      1.15           1       0.278    -0.0486   -0.210  #>  5               5   2.95      2.72           1       0.234    -0.0760    0.119  #>  6               6   3.53      3.26           1       0.278    -0.0949    0.265  #>  7               7   2.29      2.01           1       0.278    -0.0869    0.157  #>  8               8   0.310     0.0356         1       0.274    -0.0574   -0.229  #>  9               9   3.07      2.91           1       0.153    -0.0682    0.0157 #> 10              10   0.199    -0.0782         1       0.277    -0.0297   -0.0778 #> # ℹ 13 more rows #> # ℹ 42 more variables: BCAROTENE_DII <dbl>, CAFFEINE_DII <dbl>, CARB_DII <dbl>, #> #   CHOLES_DII <dbl>, KCAL_DII <dbl>, EUGENOL_DII <dbl>, TOTALFAT_DII <dbl>, #> #   FIBER_DII <dbl>, FOLICACID_DII <dbl>, GARLIC_DII <int>, GINGER_DII <int>, #> #   IRON_DII <dbl>, MG_DII <dbl>, MUFA_DII <dbl>, NIACIN_DII <dbl>, #> #   N3FAT_DII <dbl>, N6FAT_DII <dbl>, ONION_DII <int>, PROTEIN_DII <dbl>, #> #   PUFA_DII <dbl>, RIBOFLAVIN_DII <dbl>, SAFFRON_DII <int>, …"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_NHANES_FPED.html","id":null,"dir":"Reference","previous_headings":"","what":"DII_NHANES_FPED — DII_NHANES_FPED","title":"DII_NHANES_FPED — DII_NHANES_FPED","text":"Calculate DII NHANES_FPED data (2005) within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_NHANES_FPED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DII_NHANES_FPED — DII_NHANES_FPED","text":"","code":"DII_NHANES_FPED(   FPED_PATH = NULL,   NUTRIENT_PATH = NULL,   DEMO_PATH,   FPED_PATH2 = NULL,   NUTRIENT_PATH2 = NULL,   OTHER_INGREDIENTS1 = NULL,   OTHER_INGREDIENTS2 = NULL )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_NHANES_FPED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DII_NHANES_FPED — DII_NHANES_FPED","text":"FPED_PATH file path FPED data. file name like: fpre_dr1tot_1718.sas7bdat NUTRIENT_PATH file path NUTRIENT data. file name like: DR1TOT_J.XPT DEMO_PATH file path DEMOGRAPHIC data. file name like: DEMO_J.XPT OTHER_INGREDIENTS1 file path DII ingredients data day 1 data. OTHER_INGREDIENTS2 file path DII ingredients data day 2 data.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_NHANES_FPED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DII_NHANES_FPED — DII_NHANES_FPED","text":"DII component scores: DII total DII score (sum component scores); DII_NOETOH DII score without alcohol","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_NHANES_FPED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DII_NHANES_FPED — DII_NHANES_FPED","text":"","code":"data(\"NHANES_20172018\") data(\"DII_OTHER_INGREDIENTS_day1\") data(\"DII_OTHER_INGREDIENTS_day2\") DII_NHANES_FPED(FPED_PATH = NHANES_20172018$FPED, NUTRIENT_PATH = NHANES_20172018$NUTRIENT, DEMO_PATH = NHANES_20172018$DEMO, FPED_PATH2 = NHANES_20172018$FPED2, NUTRIENT_PATH2 = NHANES_20172018$NUTRIENT2, OTHER_INGREDIENTS1 = DII_OTHER_INGREDIENTS_day1, OTHER_INGREDIENTS2 = DII_OTHER_INGREDIENTS_day2) #> VITD is included in the calculation in the first day of NHANES data. #> VITD is included in the calculation in the second day of NHANES data. #> Reminder: This function does not use all the original DII variables. Eugenol, trans fat, turmeric, Green/black tea, Rosemary are not included. #> Day 1 and Day 2 data are used for the calculation. #> Note: Flavonoid data is only available for NHANES 2007-2010 and 2017-2018. #> # A tibble: 6,174 × 42 #>     SEQN DII_ALL DII_NOETOH    ALCOHOL  VITB12    VITB6 BCAROTENE CAFFEINE #>    <dbl>   <dbl>      <dbl>      <dbl>   <dbl>    <dbl>     <dbl>    <dbl> #>  1 93704   5.81       5.53   0.278     -0.0263  0.0738      0.560   0.0849 #>  2 93705   5.35       5.07   0.278     -0.0942  0.305       0.223   0.0833 #>  3 93707   6.31       6.03   0.278     -0.0427  0.0267      0.564   0.0849 #>  4 93708   5.81       5.53   0.278     -0.0721  0.216       0.451   0.0849 #>  5 93711  -0.139     -0.139 -0.0000238 -0.0578 -0.185       0.223   0.0828 #>  6 93712   2.90       2.62   0.278      0.0207 -0.329       0.534   0.0845 #>  7 93713   2.13       1.85   0.278     -0.0477 -0.140       0.274   0.0826 #>  8 93714   5.95       5.67   0.278     -0.0601  0.00904     0.561   0.0846 #>  9 93715   7.07       6.79   0.278     -0.0745  0.309       0.562   0.0824 #> 10 93716   0.662      0.384  0.278      0.0245 -0.357      -0.237   0.0844 #> # ℹ 6,164 more rows #> # ℹ 34 more variables: CARB <dbl>, CHOLES <dbl>, KCAL <dbl>, TOTALFAT <dbl>, #> #   FIBER <dbl>, FOLICACID <dbl>, IRON <dbl>, MG <dbl>, MUFA <dbl>, #> #   NIACIN <dbl>, N3FAT <dbl>, N6FAT <dbl>, PROTEIN <dbl>, PUFA <dbl>, #> #   RIBOFLAVIN <dbl>, SATFAT <dbl>, SE <dbl>, THIAMIN <dbl>, VITA <dbl>, #> #   VITC <dbl>, VITE <dbl>, ZN <dbl>, VITD <dbl>, GARLIC <dbl>, GINGER <dbl>, #> #   ONION <dbl>, FLA3OL <dbl>, FLAVONES <dbl>, FLAVONOLS <dbl>, …"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_NHANES_MPED.html","id":null,"dir":"Reference","previous_headings":"","what":"DII_NHANES_MPED — DII_NHANES_MPED","title":"DII_NHANES_MPED — DII_NHANES_MPED","text":"Calculate DII NHANES_MPED data (2005, 1999-2004) within 1 step day 1, day 2, day 1 2 combined (age >= 2 )","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_NHANES_MPED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DII_NHANES_MPED — DII_NHANES_MPED","text":"","code":"DII_NHANES_MPED(   MPED_PER_100_GRAM_PATH = NULL,   WJFRT = NULL,   NUTRIENT_PATH = NULL,   NUTRIENT_IND_PATH = NULL,   DEMO_PATH,   NUTRIENT_PATH2 = NULL,   NUTRIENT_IND_PATH2 = NULL,   OTHER_INGREDIENTS1 = NULL,   OTHER_INGREDIENTS2 = NULL )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_NHANES_MPED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DII_NHANES_MPED — DII_NHANES_MPED","text":"MPED_PER_100_GRAM_PATH file path MPED per 100 gram data day 1 day 2 data. file name like: pyr_tot_d1.sas7bdat WJFRT file path WJFRT data day 1 day2 data. file name like: wjfrt.sas7bdat NUTRIENT_PATH file path NUTRIENT data day 1 data. file name like: DR1TOT_J.XPT DRXTOT_B.XPT NUTRIENT_IND_PATH file path NUTRIENT_IND data day 1 data. file name like: DR1IFF_J.XPT DEMO_PATH file path DEMOGRAPHIC data. file name like: DEMO_J.XPT NUTRIENT_PATH2 file path NUTRIENT2 data day 2 data. file name like: DR2TOT_J.XPT NUTRIENT_IND_PATH2 file path NUTRIENT_IND2 data day 2 data file name like: DR2IFF_J.XPT OTHER_INGREDIENTS1 file path DII ingredients data day 1 data. OTHER_INGREDIENTS2 file path DII ingredients data day 2 data.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_NHANES_MPED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DII_NHANES_MPED — DII_NHANES_MPED","text":"DII component scores serving sizes","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/DII_NHANES_MPED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DII_NHANES_MPED — DII_NHANES_MPED","text":"","code":"data(\"NHANES_20032004\") data(\"DII_OTHER_INGREDIENTS_day1\") data(\"DII_OTHER_INGREDIENTS_day2\") DII_NHANES_MPED(MPED_PER_100_GRAM_PATH = NHANES_20032004$MPED_PER_100_GRAM, WJFRT = NHANES_20032004$WJFRT, NUTRIENT_PATH = NHANES_20032004$NUTRIENT, NUTRIENT_IND_PATH = NHANES_20032004$NUTRIENT_IND, DEMO_PATH = NHANES_20032004$DEMO, NUTRIENT_PATH2 = NHANES_20032004$NUTRIENT2, NUTRIENT_IND_PATH2 = NHANES_20032004$NUTRIENT_IND2, OTHER_INGREDIENTS1 = DII_OTHER_INGREDIENTS_day1, OTHER_INGREDIENTS2 = DII_OTHER_INGREDIENTS_day2) #> VITD is not included in the calculation in the first day of NHANES data. #> It is normal to see warnings if you do not provide all arguments using DII. The algorithm will only count the arguments you enter to calculate the DII. All warnings are about the first column you don't use. For example, if you only entered alcohol, vitamin b12, and vitamin b6, all warnings would remind you that bcarotene is not found. #> VITD is not included in the calculation in the first day of NHANES data. #> It is normal to see warnings if you do not provide all arguments using DII. The algorithm will only count the arguments you enter to calculate the DII. All warnings are about the first column you don't use. For example, if you only entered alcohol, vitamin b12, and vitamin b6, all warnings would remind you that bcarotene is not found. #> Reminder: This function does not use all the original DII variables. Eugenol, trans fat, turmeric, Green/black tea, Rosemary are not included. #> Day 1 and Day 2 data are used for the calculation. #> Note: Flavonoid data is only available for NHANES 2007-2010 and 2017-2018. #> # A tibble: 7,650 × 48 #>     SEQN DII_ALL DII_NOETOH ALCOHOL_DII VITB12_DII VITB6_DII BCAROTENE_DII #>    <dbl>   <dbl>      <dbl>       <dbl>      <dbl>     <dbl>         <dbl> #>  1 21005    2.68      2.40        0.278    -0.0305   -0.107          0.555 #>  2 21006    4.76      4.48        0.278    -0.0868    0.224          0.563 #>  3 21007    4.82      4.54        0.278    -0.0904    0.277          0.540 #>  4 21008    4.28      4.00        0.278    -0.0383    0.150          0.537 #>  5 21009    1.21      0.937       0.278     0.0337   -0.293          0.528 #>  6 21010    3.34      3.61       -0.274    -0.0499    0.0303         0.563 #>  7 21012    3.23      3.51       -0.278     0.0360   -0.194          0.549 #>  8 21013    4.57      4.29        0.278    -0.0565    0.150          0.559 #>  9 21014    1.93      1.65        0.278     0.0706   -0.204          0.524 #> 10 21015    2.39      2.11        0.278    -0.0551   -0.0627         0.134 #> # ℹ 7,640 more rows #> # ℹ 41 more variables: CAFFEINE_DII <dbl>, CARB_DII <dbl>, CHOLES_DII <dbl>, #> #   KCAL_DII <dbl>, EUGENOL_DII <dbl>, TOTALFAT_DII <dbl>, FIBER_DII <dbl>, #> #   FOLICACID_DII <dbl>, GARLIC_DII <dbl>, GINGER_DII <dbl>, IRON_DII <dbl>, #> #   MG_DII <dbl>, MUFA_DII <dbl>, NIACIN_DII <dbl>, N3FAT_DII <dbl>, #> #   N6FAT_DII <dbl>, ONION_DII <dbl>, PROTEIN_DII <dbl>, PUFA_DII <dbl>, #> #   RIBOFLAVIN_DII <dbl>, SAFFRON_DII <dbl>, SATFAT_DII <dbl>, SE_DII <dbl>, …"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015.html","id":null,"dir":"Reference","previous_headings":"","what":"HEI2015 Calculation — HEI2015","title":"HEI2015 Calculation — HEI2015","text":"Calculate HEI2015 dietary index, Healthy eating index 2015, using given serving sizes foods nutrients consumed per 1 day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HEI2015 Calculation — HEI2015","text":"","code":"HEI2015(   SERV_DATA,   RESPONDENTID,   TOTALKCAL_HEI2015,   TOTALFRT_SERV_HEI2015,   FRT_SERV_HEI2015,   VEG_SERV_HEI2015,   GREENNBEAN_SERV_HEI2015,   TOTALPRO_SERV_HEI2015,   SEAPLANTPRO_SERV_HEI2015,   WHOLEGRAIN_SERV_HEI2015,   DAIRY_SERV_HEI2015,   FATTYACID_SERV_HEI2015,   REFINEDGRAIN_SERV_HEI2015,   SODIUM_SERV_HEI2015,   ADDEDSUGAR_SERV_HEI2015,   SATFAT_SERV_HEI2015 )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HEI2015 Calculation — HEI2015","text":"SERV_DATA raw data file includes serving sizes foods nutrients RESPONDENTID unique participant ID participant TOTALKCAL_HEI2015 total calorie foods drinks TOTALFRT_SERV_HEI2015 serving size total fruits including fruit juice, unit= cup eq. FRT_SERV_HEI2015 serving size Citrus, Melons, Berries + Intact Fruits, unit= cup eq. VEG_SERV_HEI2015 serving size vegetables Total Vegetables + Legumes (Beans Peas) cup equivalents, unit= cup eq. GREENNBEAN_SERV_HEI2015 serving size Dark Green Vegetables + Legumes (Beans Peas) cup equivalents, unit= cup eq. TOTALPRO_SERV_HEI2015 serving size Total Meat, Poultry, Seafood (including organ meats cured meats) + Eggs + Nuts Seeds + Soy + Legumes (Beans Peas) oz equivalents, unit=oz. eq., 1 cup legume = 4 oz SEAPLANTPRO_SERV_HEI2015 serving size Seafood (high n-3) + Seafood (low n-3) + Soy + Nuts Seeds + Legumes (Beans Peas) oz equivalents, unit=oz. eq., 1 cup legume = 4 oz WHOLEGRAIN_SERV_HEI2015 serving size whole grains, unit=oz. eq. DAIRY_SERV_HEI2015 serving size dairy, unit=cup eq. FATTYACID_SERV_HEI2015 serving size (Total Monounsaturated Fatty Acids + Total Polyunsaturated Fatty Acids)/Total Saturated Fatty Acids, unit=g REFINEDGRAIN_SERV_HEI2015 serving size refined grains, unit=oz. eq. SODIUM_SERV_HEI2015 serving size sodium, unit=mg ADDEDSUGAR_SERV_HEI2015 serving size added sugar, unit=tsp SATFAT_SERV_HEI2015 serving size Total Saturated Fatty Acids, unit=g","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HEI2015 Calculation — HEI2015","text":"HEI2015 index/score","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HEI2015 Calculation — HEI2015","text":"","code":"data(\"HEI2015_VALIDATION\") HEI2015(SERV_DATA = HEI2015_VALIDATION, RESPONDENTID = HEI2015_VALIDATION$id, TOTALKCAL_HEI2015 = HEI2015_VALIDATION$kcal, TOTALFRT_SERV_HEI2015 = HEI2015_VALIDATION$total_fruit, FRT_SERV_HEI2015 = HEI2015_VALIDATION$whole_fruit, VEG_SERV_HEI2015 = HEI2015_VALIDATION$total_vegetable, GREENNBEAN_SERV_HEI2015 = HEI2015_VALIDATION$green_and_bean, TOTALPRO_SERV_HEI2015 = HEI2015_VALIDATION$total_protein, SEAPLANTPRO_SERV_HEI2015 = HEI2015_VALIDATION$seafood_plant_protein, WHOLEGRAIN_SERV_HEI2015 = HEI2015_VALIDATION$whole_grain, DAIRY_SERV_HEI2015 = HEI2015_VALIDATION$dairy, FATTYACID_SERV_HEI2015 = HEI2015_VALIDATION$fatty_acid, REFINEDGRAIN_SERV_HEI2015 = HEI2015_VALIDATION$refined_grain, SODIUM_SERV_HEI2015 = HEI2015_VALIDATION$sodium, ADDEDSUGAR_SERV_HEI2015 = HEI2015_VALIDATION$added_sugar, SATFAT_SERV_HEI2015 = HEI2015_VALIDATION$saturated_fat) #> # A tibble: 11 × 16 #>    RESPONDENTID TOTALKCAL_HEI2015 HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT #>           <dbl>             <dbl>       <dbl>            <dbl>       <dbl> #>  1            1              1000          40              0           0   #>  2            2              1000          42              0.5         0.5 #>  3            3              1000          44              1           1   #>  4            4              1000          46              1.5         1.5 #>  5            5              1000          48              2           2   #>  6            6              1000          50              2.5         2.5 #>  7            7              1000          52              3           3   #>  8            8              1000          54              3.5         3.5 #>  9            9              1000          56              4           4   #> 10           10              1000          58              4.5         4.5 #> 11           11              1000          60              5           5   #> # ℹ 11 more variables: HEI2015_VEG <dbl>, HEI2015_GREENNBEAN <dbl>, #> #   HEI2015_TOTALPRO <dbl>, HEI2015_SEAPLANTPRO <dbl>, #> #   HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, HEI2015_FATTYACID <dbl>, #> #   HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, HEI2015_ADDEDSUGAR <dbl>, #> #   HEI2015_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_ASA24.html","id":null,"dir":"Reference","previous_headings":"","what":"HEI2015_ASA24 — HEI2015_ASA24","title":"HEI2015_ASA24 — HEI2015_ASA24","text":"Calculate HEI2015 ASA24 data within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_ASA24.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HEI2015_ASA24 — HEI2015_ASA24","text":"","code":"HEI2015_ASA24(DATA_PATH, RECALL_SUMMARIZE = TRUE)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_ASA24.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HEI2015_ASA24 — HEI2015_ASA24","text":"DATA_PATH file path data. file name like: Totals.csv. RECALL_SUMMARIZE TRUE, function calculates total food group nutrient intake possible days average reporting dietary index per individual per day. FALSE, function calculates dietary index per individual per recall.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_ASA24.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HEI2015_ASA24 — HEI2015_ASA24","text":"average HEI2015 component scores individual per day.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_ASA24.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HEI2015_ASA24 — HEI2015_ASA24","text":"","code":"data(\"ASA24_exp\") HEI2015_ASA24(ASA24_exp, RECALL_SUMMARIZE = TRUE) #> RECALL_SUMMARIZE = TRUE, summarizing HEI2015 for ASA24 data by averaging over all possible recalls per person per day... #> # A tibble: 21 × 17 #> # Groups:   UserName, UserID [21] #>    UserName UserID            TOTALKCAL HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT #>       <dbl> <chr>                 <dbl>       <dbl>            <dbl>       <dbl> #>  1        1 e6541891-8a22-49…     1514.        69.8             1.26        2.45 #>  2        2 dbb278b0-b589-44…      935.        52.8             5           0    #>  3        3 f0115426-e6f8-4c…     1655.        51.2             5           5    #>  4        4 337d84a7-3bff-48…     1571.        47.5             0           0    #>  5        5 998f098a-8584-49…      907.        45.2             0           0    #>  6        6 aae330db-8f22-4d…     1271.        52.9             3.78        5    #>  7        7 76e0f3e1-8e17-49…     2662.        48.4             1.51        2.23 #>  8        8 24de994f-e06a-41…     2039.        69.0             2.76        5    #>  9        9 8f61ae64-6a82-4f…     1469.        70.9             5           5    #> 10       10 b47ab1b8-e62b-4b…     1636.        61.2             2.64        0    #> # ℹ 11 more rows #> # ℹ 11 more variables: HEI2015_VEG <dbl>, HEI2015_GREENNBEAN <dbl>, #> #   HEI2015_TOTALPRO <dbl>, HEI2015_SEAPLANTPRO <dbl>, #> #   HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, HEI2015_FATTYACID <dbl>, #> #   HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, HEI2015_ADDEDSUGAR <dbl>, #> #   HEI2015_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_BLOCK.html","id":null,"dir":"Reference","previous_headings":"","what":"HEI2015_BLOCK Calculation — HEI2015_BLOCK","title":"HEI2015_BLOCK Calculation — HEI2015_BLOCK","text":"Calculate HEI2015 dietary index (serving size based) per 1 day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_BLOCK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HEI2015_BLOCK Calculation — HEI2015_BLOCK","text":"","code":"HEI2015_BLOCK(RAW_DATA)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_BLOCK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HEI2015_BLOCK Calculation — HEI2015_BLOCK","text":"RAW_DATA raw data file includes results raw data dietary assessment","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_BLOCK.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HEI2015_BLOCK Calculation — HEI2015_BLOCK","text":"HEI2015 index/score components","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_BLOCK.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HEI2015_BLOCK Calculation — HEI2015_BLOCK","text":"","code":"data(\"BLOCK_exp\") HEI2015_BLOCK(BLOCK_exp) #> # A tibble: 5 × 15 #>   RESPONDENTID HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT HEI2015_VEG #>          <dbl>       <dbl>            <dbl>       <dbl>       <dbl> #> 1            1        76.6            5            5           2.57 #> 2            2        42.0            0.986        1.08        1.32 #> 3            3        56.0            2.25         3.56        2.42 #> 4            4        48.7            5            5           1.11 #> 5            5        65.7            5            5           5    #> # ℹ 10 more variables: HEI2015_GREENNBEAN <dbl>, HEI2015_TOTALPRO <dbl>, #> #   HEI2015_SEAPLANTPRO <dbl>, HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, #> #   HEI2015_FATTYACID <dbl>, HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, #> #   HEI2015_ADDEDSUGAR <dbl>, HEI2015_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_DHQ3.html","id":null,"dir":"Reference","previous_headings":"","what":"HEI2015_DHQ3 — HEI2015_DHQ3","title":"HEI2015_DHQ3 — HEI2015_DHQ3","text":"Calculate HEI2015 DHQ3 data within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_DHQ3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HEI2015_DHQ3 — HEI2015_DHQ3","text":"","code":"HEI2015_DHQ3(DATA_PATH)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_DHQ3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HEI2015_DHQ3 — HEI2015_DHQ3","text":"DATA_PATH file path data. data Total Daily Results file, ending results.csv","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_DHQ3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HEI2015_DHQ3 — HEI2015_DHQ3","text":"HEI2015 component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_DHQ3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HEI2015_DHQ3 — HEI2015_DHQ3","text":"","code":"data(\"DHQ3_exp\") HEI2015_DHQ3(DHQ3_exp) #> # A tibble: 23 × 16 #>    `Respondent ID` TOTALKCAL HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT #>              <dbl>     <dbl>       <dbl>            <dbl>       <dbl> #>  1               1     1849.        74.7            3.14        5     #>  2               2     1109.        77.9            4.96        5     #>  3               3     2134.        69.5            5           5     #>  4               4     1170.        77.1            5           5     #>  5               5     1238.        63.3            5           5     #>  6               6      759.        59.5            1.32        1.48  #>  7               7      727.        67.9            5           5     #>  8               8     1462.        66.7            3.59        5     #>  9               9     1080.        72.4            5           5     #> 10              10     1552.        55.5            0.684       0.644 #> # ℹ 13 more rows #> # ℹ 11 more variables: HEI2015_VEG <dbl>, HEI2015_GREENNBEAN <dbl>, #> #   HEI2015_TOTALPRO <dbl>, HEI2015_SEAPLANTPRO <dbl>, #> #   HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, HEI2015_FATTYACID <dbl>, #> #   HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, HEI2015_ADDEDSUGAR <dbl>, #> #   HEI2015_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_NHANES_FPED.html","id":null,"dir":"Reference","previous_headings":"","what":"HEI2015_NHANES_FPED — HEI2015_NHANES_FPED","title":"HEI2015_NHANES_FPED — HEI2015_NHANES_FPED","text":"Calculate HEI2015 NHANES_FPED data (2005) within 1 step day 1, day 2, day 1 2 combined","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_NHANES_FPED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HEI2015_NHANES_FPED — HEI2015_NHANES_FPED","text":"","code":"HEI2015_NHANES_FPED(   FPED_PATH = NULL,   NUTRIENT_PATH = NULL,   DEMO_PATH,   FPED_PATH2 = NULL,   NUTRIENT_PATH2 = NULL )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_NHANES_FPED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HEI2015_NHANES_FPED — HEI2015_NHANES_FPED","text":"FPED_PATH file path FPED data. file name like: fped_dr1tot_1112.sas7bdat NUTRIENT_PATH file path NUTRIENT data. file name like: DR1TOT_J.XPT DEMO_PATH file path DEMOGRAPHIC data. file name like: DEMO_J.XPT FPED_PATH2 file path FPED2 data. file name like: fped_DR2tot_1112.sas7bdat NUTRIENT_PATH2 file path NUTRIENT2 data. file name like: DR2TOT_J.XPT","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_NHANES_FPED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HEI2015_NHANES_FPED — HEI2015_NHANES_FPED","text":"HEI2015 component scores serving sizes","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_NHANES_FPED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HEI2015_NHANES_FPED — HEI2015_NHANES_FPED","text":"","code":"data(\"NHANES_20172018\") HEI2015_NHANES_FPED(FPED_PATH = NHANES_20172018$FPED, NUTRIENT_PATH = NHANES_20172018$NUTRIENT, DEMO_PATH = NHANES_20172018$DEMO, FPED_PATH2 = NHANES_20172018$FPED2, NUTRIENT_PATH2 = NHANES_20172018$NUTRIENT2) #> # A tibble: 6,177 × 15 #>     SEQN HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT HEI2015_VEG HEI2015_GREENNBEAN #>    <dbl>       <dbl>            <dbl>       <dbl>       <dbl>              <dbl> #>  1 93704        61.7           5            2.5         1.55                0    #>  2 93705        43.0           0.0759       0           3.46                4.83 #>  3 93707        38.9           0            0           2.09                0    #>  4 93708        49.9           1.22         2.45        3.20                0    #>  5 93711        69.0           3.57         2.85        3.75                4.27 #>  6 93712        46.4           2.5          2.5         2.42                2.5  #>  7 93713        55.4           4.84         5           3.47                1.13 #>  8 93714        36.1           0.321        0.617       1.85                0    #>  9 93715        30.7           0.777        1.55        0.614               0    #> 10 93716        65.0           5            5           4.03                4.73 #> # ℹ 6,167 more rows #> # ℹ 9 more variables: HEI2015_TOTALPRO <dbl>, HEI2015_SEAPLANTPRO <dbl>, #> #   HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, HEI2015_FATTYACID <dbl>, #> #   HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, HEI2015_ADDEDSUGAR <dbl>, #> #   HEI2015_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_NHANES_MPED.html","id":null,"dir":"Reference","previous_headings":"","what":"HEI2015_NHANES_MPED — HEI2015_NHANES_MPED","title":"HEI2015_NHANES_MPED — HEI2015_NHANES_MPED","text":"Calculate HEI2015 NHANES_MPED data (2005, 1999-2004) within 1 step day 1, day 2, day 1 2 combined (age >= 2 )","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_NHANES_MPED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HEI2015_NHANES_MPED — HEI2015_NHANES_MPED","text":"","code":"HEI2015_NHANES_MPED(   MPED_PER_100_GRAM_PATH = NULL,   WJFRT = NULL,   NUTRIENT_PATH = NULL,   NUTRIENT_IND_PATH = NULL,   DEMO_PATH,   NUTRIENT_PATH2 = NULL,   NUTRIENT_IND_PATH2 = NULL )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_NHANES_MPED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HEI2015_NHANES_MPED — HEI2015_NHANES_MPED","text":"MPED_PER_100_GRAM_PATH file path MPED per 100 gram data day 1 day 2 data. file name like: pyr_tot_d1.sas7bdat WJFRT file path WJFRT data day 1 day2 data. file name like: wjfrt.sas7bdat NUTRIENT_PATH file path NUTRIENT data day 1 data. file name like: DR1TOT_J.XPT DRXTOT_B.XPT NUTRIENT_IND_PATH file path NUTRIENT_IND data day 1 data. file name like: DR1IFF_J.XPT DEMO_PATH file path DEMOGRAPHIC data. file name like: DEMO_J.XPT NUTRIENT_PATH2 file path NUTRIENT2 data day 2 data. file name like: DR2TOT_J.XPT NUTRIENT_IND_PATH2 file path NUTRIENT_IND2 data day 2 data file name like: DR2IFF_J.XPT","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_NHANES_MPED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HEI2015_NHANES_MPED — HEI2015_NHANES_MPED","text":"HEI2015 component scores serving sizes","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2015_NHANES_MPED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HEI2015_NHANES_MPED — HEI2015_NHANES_MPED","text":"","code":"data(\"NHANES_20032004\") HEI2015_NHANES_MPED(MPED_PER_100_GRAM_PATH = NHANES_20032004$MPED_PER_100_GRAM, WJFRT = NHANES_20032004$WJFRT, NUTRIENT_PATH = NHANES_20032004$NUTRIENT, NUTRIENT_IND_PATH = NHANES_20032004$NUTRIENT_IND, DEMO_PATH = NHANES_20032004$DEMO, NUTRIENT_PATH2 = NHANES_20032004$NUTRIENT2, NUTRIENT_IND_PATH2 = NHANES_20032004$NUTRIENT_IND2) #> # A tibble: 7,650 × 16 #>     SEQN TOTALKCAL_HEI2015 HEI2015_ALL HEI2015_TOTALFRT HEI2015_FRT HEI2015_VEG #>    <dbl>             <dbl>       <dbl>            <dbl>       <dbl>       <dbl> #>  1 21005             2598.        53.7            0.489       0            2.28 #>  2 21006             1198         46.3            0.738       0            3.95 #>  3 21007              943         42.5            3.97        1.03         3.15 #>  4 21008             2236.        45.8            0           0            2.37 #>  5 21009             4540.        59.3            0.182       0.311        3.01 #>  6 21010             1834.        59.4            0.406       0.812        4.10 #>  7 21012             2786         54.0            0           0            2.89 #>  8 21013             1420.        50.6            2.44        2.5          2.52 #>  9 21014             2079         63.4            2.5         0.880        4.25 #> 10 21015             1638.        73.7            3.37        4.87         3.42 #> # ℹ 7,640 more rows #> # ℹ 10 more variables: HEI2015_GREENNBEAN <dbl>, HEI2015_TOTALPRO <dbl>, #> #   HEI2015_SEAPLANTPRO <dbl>, HEI2015_WHOLEGRAIN <dbl>, HEI2015_DAIRY <dbl>, #> #   HEI2015_FATTYACID <dbl>, HEI2015_REFINEDGRAIN <dbl>, HEI2015_SODIUM <dbl>, #> #   HEI2015_ADDEDSUGAR <dbl>, HEI2015_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020.html","id":null,"dir":"Reference","previous_headings":"","what":"HEI2020 Calculation — HEI2020","title":"HEI2020 Calculation — HEI2020","text":"Calculate HEI2020 dietary index, Healthy eating index 2020 HEI-Toddlers-2020, using given serving sizes foods nutrients consumed per 1 day. version uses percent total energy added sugar saturated fat sodium grams original HEI2020.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HEI2020 Calculation — HEI2020","text":"","code":"HEI2020(   SERV_DATA,   RESPONDENTID,   AGE,   TOTALKCAL_HEI2020,   TOTALFRT_SERV_HEI2020,   FRT_SERV_HEI2020,   VEG_SERV_HEI2020,   GREENNBEAN_SERV_HEI2020,   TOTALPRO_SERV_HEI2020,   SEAPLANTPRO_SERV_HEI2020,   WHOLEGRAIN_SERV_HEI2020,   DAIRY_SERV_HEI2020,   FATTYACID_SERV_HEI2020,   REFINEDGRAIN_SERV_HEI2020,   SODIUM_SERV_HEI2020,   ADDEDSUGAR_SERV_HEI2020,   SATFAT_SERV_HEI2020 )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HEI2020 Calculation — HEI2020","text":"SERV_DATA raw data file includes serving sizes foods nutrients RESPONDENTID unique participant ID participant AGE age participant years TOTALKCAL_HEI2020 total calorie foods drinks TOTALFRT_SERV_HEI2020 serving size total fruits including fruit juice, unit= cup eq. FRT_SERV_HEI2020 serving size Citrus, Melons, Berries + Intact Fruits, unit= cup eq. VEG_SERV_HEI2020 serving size vegetables Total Vegetables + Legumes (Beans Peas) cup equivalents, unit= cup eq. GREENNBEAN_SERV_HEI2020 serving size Dark Green Vegetables + Legumes (Beans Peas) cup equivalents, unit= cup eq. TOTALPRO_SERV_HEI2020 serving size Total Meat, Poultry, Seafood (including organ meats cured meats) + Eggs + Nuts Seeds + Soy + Legumes (Beans Peas) oz equivalents, unit=oz. eq., 1 cup legume = 4 oz SEAPLANTPRO_SERV_HEI2020 serving size Seafood (high n-3) + Seafood (low n-3) + Soy + Nuts Seeds + Legumes (Beans Peas) oz equivalents, unit=oz. eq., 1 cup legume = 4 oz WHOLEGRAIN_SERV_HEI2020 serving size whole grains, unit=oz. eq. DAIRY_SERV_HEI2020 serving size dairy, unit=cup eq. FATTYACID_SERV_HEI2020 serving size (Total Monounsaturated Fatty Acids + Total Polyunsaturated Fatty Acids)/Total Saturated Fatty Acids, unit=g REFINEDGRAIN_SERV_HEI2020 serving size refined grains, unit=oz. eq. SODIUM_SERV_HEI2020 serving size sodium, unit=g ADDEDSUGAR_SERV_HEI2020 Added sugar, unit=percent total energy SATFAT_SERV_HEI2020 Total Saturated Fatty Acids, unit=percent total energy","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HEI2020 Calculation — HEI2020","text":"HEI2020 index/score","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HEI2020 Calculation — HEI2020","text":"","code":"data(\"HEI2020_VALIDATION\") HEI2020(SERV_DATA = HEI2020_VALIDATION, RESPONDENTID = HEI2020_VALIDATION$id, AGE = HEI2020_VALIDATION$age, TOTALKCAL_HEI2020 = HEI2020_VALIDATION$kcal, TOTALFRT_SERV_HEI2020 = HEI2020_VALIDATION$total_fruit, FRT_SERV_HEI2020 = HEI2020_VALIDATION$whole_fruit, VEG_SERV_HEI2020 = HEI2020_VALIDATION$total_vegetable, GREENNBEAN_SERV_HEI2020 = HEI2020_VALIDATION$green_and_bean, TOTALPRO_SERV_HEI2020 = HEI2020_VALIDATION$total_protein, SEAPLANTPRO_SERV_HEI2020 = HEI2020_VALIDATION$seafood_plant_protein, WHOLEGRAIN_SERV_HEI2020 = HEI2020_VALIDATION$whole_grain, DAIRY_SERV_HEI2020 = HEI2020_VALIDATION$dairy, FATTYACID_SERV_HEI2020 = HEI2020_VALIDATION$fatty_acid, REFINEDGRAIN_SERV_HEI2020 = HEI2020_VALIDATION$refined_grain, SODIUM_SERV_HEI2020 = HEI2020_VALIDATION$sodium, ADDEDSUGAR_SERV_HEI2020 = HEI2020_VALIDATION$added_sugar, SATFAT_SERV_HEI2020 = HEI2020_VALIDATION$saturated_fat) #> # A tibble: 22 × 17 #>    RESPONDENTID   AGE TOTALKCAL_HEI2020 HEI2020_ALL HEI2020_TOTALFRT HEI2020_FRT #>           <dbl> <dbl>             <dbl>       <dbl>            <dbl>       <dbl> #>  1            1    18              1000          40              0           0   #>  2            2    18              1000          42              0.5         0.5 #>  3            3    18              1000          44              1           1   #>  4            4    18              1000          46              1.5         1.5 #>  5            5    18              1000          48              2           2   #>  6            6    18              1000          50              2.5         2.5 #>  7            7    18              1000          52              3           3   #>  8            8    18              1000          54              3.5         3.5 #>  9            9    18              1000          56              4           4   #> 10           10    18              1000          58              4.5         4.5 #> # ℹ 12 more rows #> # ℹ 11 more variables: HEI2020_VEG <dbl>, HEI2020_GREENNBEAN <dbl>, #> #   HEI2020_TOTALPRO <dbl>, HEI2020_SEAPLANTPRO <dbl>, #> #   HEI2020_WHOLEGRAIN <dbl>, HEI2020_DAIRY <dbl>, HEI2020_FATTYACID <dbl>, #> #   HEI2020_REFINEDGRAIN <dbl>, HEI2020_SODIUM <dbl>, HEI2020_ADDEDSUGAR <dbl>, #> #   HEI2020_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_ASA24.html","id":null,"dir":"Reference","previous_headings":"","what":"HEI2020_ASA24 — HEI2020_ASA24","title":"HEI2020_ASA24 — HEI2020_ASA24","text":"Calculate HEI2020 ASA24 data within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_ASA24.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HEI2020_ASA24 — HEI2020_ASA24","text":"","code":"HEI2020_ASA24(DATA_PATH, RECALL_SUMMARIZE = TRUE)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_ASA24.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HEI2020_ASA24 — HEI2020_ASA24","text":"DATA_PATH file path data. file name like: Totals.csv.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_ASA24.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HEI2020_ASA24 — HEI2020_ASA24","text":"average HEI2020 component scores individual per day.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_ASA24.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HEI2020_ASA24 — HEI2020_ASA24","text":"","code":"data(\"ASA24_exp\") HEI2020_ASA24(ASA24_exp, RECALL_SUMMARIZE = TRUE) #> [1] \"RECALL_SUMMARIZE = TRUE, summarizing HEI2020 for ASA24 data by averaging over all possible recalls per person per day...\" #> [1] \"The results should be only used for HEI-2020 (non-toddlers, age > 2 years), not including HEI-Toddlers 2020 (age 1-2 years).\" #> # A tibble: 21 × 17 #> # Groups:   UserName, UserID [21] #>    UserName UserID            TOTALKCAL HEI2020_ALL HEI2020_TOTALFRT HEI2020_FRT #>       <dbl> <chr>                 <dbl>       <dbl>            <dbl>       <dbl> #>  1        1 e6541891-8a22-49…     1514.        69.8             1.26        2.45 #>  2        2 dbb278b0-b589-44…      935.        52.8             5           0    #>  3        3 f0115426-e6f8-4c…     1655.        51.2             5           5    #>  4        4 337d84a7-3bff-48…     1571.        47.5             0           0    #>  5        5 998f098a-8584-49…      907.        45.2             0           0    #>  6        6 aae330db-8f22-4d…     1271.        52.9             3.78        5    #>  7        7 76e0f3e1-8e17-49…     2662.        48.4             1.51        2.23 #>  8        8 24de994f-e06a-41…     2039.        69.0             2.76        5    #>  9        9 8f61ae64-6a82-4f…     1469.        70.9             5           5    #> 10       10 b47ab1b8-e62b-4b…     1636.        61.2             2.64        0    #> # ℹ 11 more rows #> # ℹ 11 more variables: HEI2020_VEG <dbl>, HEI2020_GREENNBEAN <dbl>, #> #   HEI2020_TOTALPRO <dbl>, HEI2020_SEAPLANTPRO <dbl>, #> #   HEI2020_WHOLEGRAIN <dbl>, HEI2020_DAIRY <dbl>, HEI2020_FATTYACID <dbl>, #> #   HEI2020_REFINEDGRAIN <dbl>, HEI2020_SODIUM <dbl>, HEI2020_ADDEDSUGAR <dbl>, #> #   HEI2020_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_NHANES_FPED.html","id":null,"dir":"Reference","previous_headings":"","what":"HEI2020_NHANES_FPED — HEI2020_NHANES_FPED","title":"HEI2020_NHANES_FPED — HEI2020_NHANES_FPED","text":"Calculate HEI2020 NHANES_FPED data (2005) within 1 step day 1, day 2, day 1 2 combined, including HEI2020 HEI-Toddlers-2020","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_NHANES_FPED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HEI2020_NHANES_FPED — HEI2020_NHANES_FPED","text":"","code":"HEI2020_NHANES_FPED(   FPED_PATH = NULL,   NUTRIENT_PATH = NULL,   DEMO_PATH,   FPED_PATH2 = NULL,   NUTRIENT_PATH2 = NULL )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_NHANES_FPED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HEI2020_NHANES_FPED — HEI2020_NHANES_FPED","text":"FPED_PATH file path FPED data. file name like: fped_dr1tot_1112.sas7bdat NUTRIENT_PATH file path NUTRIENT data. file name like: DR1TOT_J.XPT DEMO_PATH file path DEMOGRAPHIC data. file name like: DEMO_J.XPT FPED_PATH2 file path FPED2 data. file name like: fped_DR2tot_1112.sas7bdat NUTRIENT_PATH2 file path NUTRIENT2 data. file name like: DR2TOT_J.XPT","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_NHANES_FPED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HEI2020_NHANES_FPED — HEI2020_NHANES_FPED","text":"HEI2020 component scores serving sizes","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_NHANES_FPED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HEI2020_NHANES_FPED — HEI2020_NHANES_FPED","text":"","code":"data(\"NHANES_20172018\") HEI2020_NHANES_FPED(FPED_PATH = NHANES_20172018$FPED, NUTRIENT_PATH = NHANES_20172018$NUTRIENT, DEMO_PATH = NHANES_20172018$DEMO, FPED_PATH2 = NHANES_20172018$FPED2, NUTRIENT_PATH2 = NHANES_20172018$NUTRIENT2) #> # A tibble: 6,318 × 16 #>     SEQN RIDAGEYR HEI2020_ALL HEI2020_TOTALFRT HEI2020_FRT HEI2020_VEG #>    <dbl>    <dbl>       <dbl>            <dbl>       <dbl>       <dbl> #>  1 93704        2        61.7           5            2.5         1.55  #>  2 93705       66        43.0           0.0759       0           3.46  #>  3 93707       13        38.9           0            0           2.09  #>  4 93708       66        49.9           1.22         2.45        3.20  #>  5 93711       56        69.0           3.57         2.85        3.75  #>  6 93712       18        46.4           2.5          2.5         2.42  #>  7 93713       67        55.4           4.84         5           3.47  #>  8 93714       54        36.1           0.321        0.617       1.85  #>  9 93715       71        30.7           0.777        1.55        0.614 #> 10 93716       61        65.0           5            5           4.03  #> # ℹ 6,308 more rows #> # ℹ 10 more variables: HEI2020_GREENNBEAN <dbl>, HEI2020_TOTALPRO <dbl>, #> #   HEI2020_SEAPLANTPRO <dbl>, HEI2020_WHOLEGRAIN <dbl>, HEI2020_DAIRY <dbl>, #> #   HEI2020_FATTYACID <dbl>, HEI2020_REFINEDGRAIN <dbl>, HEI2020_SODIUM <dbl>, #> #   HEI2020_ADDEDSUGAR <dbl>, HEI2020_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_NHANES_MPED.html","id":null,"dir":"Reference","previous_headings":"","what":"HEI2020_NHANES_MPED — HEI2020_NHANES_MPED","title":"HEI2020_NHANES_MPED — HEI2020_NHANES_MPED","text":"Calculate HEI2020 NHANES_MPED data (1999-2004) within 1 step day 1, day 2, day 1 2 combined, including HEI2020 HEI-Toddlers-2020","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_NHANES_MPED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HEI2020_NHANES_MPED — HEI2020_NHANES_MPED","text":"","code":"HEI2020_NHANES_MPED(   MPED_PER_100_GRAM_PATH = NULL,   WJFRT = NULL,   NUTRIENT_PATH = NULL,   NUTRIENT_IND_PATH = NULL,   DEMO_PATH,   NUTRIENT_PATH2 = NULL,   NUTRIENT_IND_PATH2 = NULL )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_NHANES_MPED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HEI2020_NHANES_MPED — HEI2020_NHANES_MPED","text":"MPED_PER_100_GRAM_PATH file path MPED per 100 gram data day 1 day 2 data. file name like: pyr_tot_d1.sas7bdat WJFRT file path WJFRT data day 1 day2 data. file name like: wjfrt.sas7bdat NUTRIENT_PATH file path NUTRIENT data day 1 data. file name like: DR1TOT_J.XPT DRXTOT_B.XPT NUTRIENT_IND_PATH file path NUTRIENT_IND data day 1 data. file name like: DR1IFF_J.XPT DEMO_PATH file path DEMOGRAPHIC data. file name like: DEMO_J.XPT NUTRIENT_PATH2 file path NUTRIENT2 data day 2 data. file name like: DR2TOT_J.XPT NUTRIENT_IND_PATH2 file path NUTRIENT_IND2 data day 2 data file name like: DR2IFF_J.XPT","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_NHANES_MPED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HEI2020_NHANES_MPED — HEI2020_NHANES_MPED","text":"HEI2020 component scores serving sizes","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_NHANES_MPED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HEI2020_NHANES_MPED — HEI2020_NHANES_MPED","text":"","code":"data(\"NHANES_20032004\") HEI2020_NHANES_MPED(MPED_PER_100_GRAM_PATH = NHANES_20032004$MPED_PER_100_GRAM, WJFRT = NHANES_20032004$WJFRT, NUTRIENT_PATH = NHANES_20032004$NUTRIENT, NUTRIENT_IND_PATH = NHANES_20032004$NUTRIENT_IND, DEMO_PATH = NHANES_20032004$DEMO, NUTRIENT_PATH2 = NHANES_20032004$NUTRIENT2, NUTRIENT_IND_PATH2 = NHANES_20032004$NUTRIENT_IND2) #> # A tibble: 7,918 × 17 #>     SEQN TOTALKCAL_HEI2020 RIDAGEYR HEI2020_ALL HEI2020_TOTALFRT HEI2020_FRT #>    <dbl>             <dbl>    <dbl>       <dbl>            <dbl>       <dbl> #>  1 21005             2598.       19        39.0            0.489       0     #>  2 21006             1198        16        37.8            0.738       0     #>  3 21007              943        14        43.0            3.97        1.03  #>  4 21008             2236.       17        28.4            0           0     #>  5 21009             4540.       55        43.4            0.182       0.311 #>  6 21010             1834.       52        53.7            0.406       0.812 #>  7 21012             2786        63        37.5            0           0     #>  8 21013             1420.       13        44.6            2.44        2.5   #>  9 21014             2079         3        49.0            2.5         0.880 #> 10 21015             1638.       83        66.8            3.37        4.87  #> # ℹ 7,908 more rows #> # ℹ 11 more variables: HEI2020_VEG <dbl>, HEI2020_GREENNBEAN <dbl>, #> #   HEI2020_TOTALPRO <dbl>, HEI2020_SEAPLANTPRO <dbl>, #> #   HEI2020_WHOLEGRAIN <dbl>, HEI2020_DAIRY <dbl>, HEI2020_FATTYACID <dbl>, #> #   HEI2020_REFINEDGRAIN <dbl>, HEI2020_SODIUM <dbl>, HEI2020_ADDEDSUGAR <dbl>, #> #   HEI2020_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_TODDLERS_ASA24.html","id":null,"dir":"Reference","previous_headings":"","what":"HEI2020_TODDLERS_ASA24 — HEI2020_TODDLERS_ASA24","title":"HEI2020_TODDLERS_ASA24 — HEI2020_TODDLERS_ASA24","text":"Calculate HEI2020_TODDLERS ASA24 data within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_TODDLERS_ASA24.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HEI2020_TODDLERS_ASA24 — HEI2020_TODDLERS_ASA24","text":"","code":"HEI2020_TODDLERS_ASA24(DATA_PATH, RECALL_SUMMARIZE = TRUE)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_TODDLERS_ASA24.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HEI2020_TODDLERS_ASA24 — HEI2020_TODDLERS_ASA24","text":"DATA_PATH file path data. file name like: Totals.csv.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_TODDLERS_ASA24.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HEI2020_TODDLERS_ASA24 — HEI2020_TODDLERS_ASA24","text":"average HEI2020_TODDLERS component scores individual per day.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_TODDLERS_ASA24.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HEI2020_TODDLERS_ASA24 — HEI2020_TODDLERS_ASA24","text":"","code":"data(\"ASA24_exp\") HEI2020_TODDLERS_ASA24(ASA24_exp, RECALL_SUMMARIZE = TRUE) #> [1] \"RECALL_SUMMARIZE = TRUE, summarizing HEI2020_TODDLERS for ASA24 data by averaging over all possible recalls per person per day...\" #> [1] \"The results should be only used for HEI-Toddlers 2020 (age 1-2 years), not for HEI-2020 (non-toddlers, age > 2 years).\" #> # A tibble: 21 × 17 #> # Groups:   UserName, UserID [21] #>    UserName UserID         TOTALKCAL HEI2020_TODDLERS_ALL HEI2020_TODDLERS_TOT…¹ #>       <dbl> <chr>              <dbl>                <dbl>                  <dbl> #>  1        1 e6541891-8a22…     1514.                 60.8                   1.44 #>  2        2 dbb278b0-b589…      935.                 55.2                   5    #>  3        3 f0115426-e6f8…     1655.                 47.8                   5    #>  4        4 337d84a7-3bff…     1571.                 50.7                   0    #>  5        5 998f098a-8584…      907.                 39.3                   0    #>  6        6 aae330db-8f22…     1271.                 46.9                   4.32 #>  7        7 76e0f3e1-8e17…     2662.                 45.4                   1.73 #>  8        8 24de994f-e06a…     2039.                 70.3                   3.16 #>  9        9 8f61ae64-6a82…     1469.                 69.1                   5    #> 10       10 b47ab1b8-e62b…     1636.                 59.2                   3.01 #> # ℹ 11 more rows #> # ℹ abbreviated name: ¹​HEI2020_TODDLERS_TOTALFRT #> # ℹ 12 more variables: HEI2020_TODDLERS_FRT <dbl>, HEI2020_TODDLERS_VEG <dbl>, #> #   HEI2020_TODDLERS_GREENNBEAN <dbl>, HEI2020_TODDLERS_TOTALPRO <dbl>, #> #   HEI2020_TODDLERS_SEAPLANTPRO <dbl>, HEI2020_TODDLERS_WHOLEGRAIN <dbl>, #> #   HEI2020_TODDLERS_DAIRY <dbl>, HEI2020_TODDLERS_FATTYACID <dbl>, #> #   HEI2020_TODDLERS_REFINEDGRAIN <dbl>, HEI2020_TODDLERS_SODIUM <dbl>, …"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_V2.html","id":null,"dir":"Reference","previous_headings":"","what":"HEI2020_V2 Calculation — HEI2020_V2","title":"HEI2020_V2 Calculation — HEI2020_V2","text":"Calculate HEI2020 dietary index, Healthy eating index 2020 HEI-Toddlers-2020, using given serving sizes foods nutrients consumed per 1 day. version Added sugar serving size tsp (teaspoon) saturated fat serving size g (gram), instead ","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_V2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HEI2020_V2 Calculation — HEI2020_V2","text":"","code":"HEI2020_V2(   SERV_DATA,   RESPONDENTID,   AGE,   TOTALKCAL_HEI2020,   TOTALFRT_SERV_HEI2020,   FRT_SERV_HEI2020,   VEG_SERV_HEI2020,   GREENNBEAN_SERV_HEI2020,   TOTALPRO_SERV_HEI2020,   SEAPLANTPRO_SERV_HEI2020,   WHOLEGRAIN_SERV_HEI2020,   DAIRY_SERV_HEI2020,   FATTYACID_SERV_HEI2020,   REFINEDGRAIN_SERV_HEI2020,   SODIUM_SERV_HEI2020,   ADDEDSUGAR_SERV_HEI2020,   SATFAT_SERV_HEI2020 )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_V2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HEI2020_V2 Calculation — HEI2020_V2","text":"SERV_DATA raw data file includes serving sizes foods nutrients RESPONDENTID unique participant ID participant AGE age participant years TOTALKCAL_HEI2020 total calorie foods drinks TOTALFRT_SERV_HEI2020 serving size total fruits including fruit juice, unit= cup eq. FRT_SERV_HEI2020 serving size Citrus, Melons, Berries + Intact Fruits, unit= cup eq. VEG_SERV_HEI2020 serving size vegetables Total Vegetables + Legumes (Beans Peas) cup equivalents, unit= cup eq. GREENNBEAN_SERV_HEI2020 serving size Dark Green Vegetables + Legumes (Beans Peas) cup equivalents, unit= cup eq. TOTALPRO_SERV_HEI2020 serving size Total Meat, Poultry, Seafood (including organ meats cured meats) + Eggs + Nuts Seeds + Soy + Legumes (Beans Peas) oz equivalents, unit=oz. eq., 1 cup legume = 4 oz SEAPLANTPRO_SERV_HEI2020 serving size Seafood (high n-3) + Seafood (low n-3) + Soy + Nuts Seeds + Legumes (Beans Peas) oz equivalents, unit=oz. eq., 1 cup legume = 4 oz WHOLEGRAIN_SERV_HEI2020 serving size whole grains, unit=oz. eq. DAIRY_SERV_HEI2020 serving size dairy, unit=cup eq. FATTYACID_SERV_HEI2020 serving size (Total Monounsaturated Fatty Acids + Total Polyunsaturated Fatty Acids)/Total Saturated Fatty Acids, unit=g REFINEDGRAIN_SERV_HEI2020 serving size refined grains, unit=oz. eq. SODIUM_SERV_HEI2020 serving size sodium, unit=mg ADDEDSUGAR_SERV_HEI2020 serving size added sugar, unit=tsp SATFAT_SERV_HEI2020 serving size Total Saturated Fatty Acids, unit=g","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_V2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HEI2020_V2 Calculation — HEI2020_V2","text":"HEI2020 index/score","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/HEI2020_V2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HEI2020_V2 Calculation — HEI2020_V2","text":"","code":"data(\"HEI2020_V2_VALIDATION\") HEI2020_V2(SERV_DATA = HEI2020_V2_VALIDATION, RESPONDENTID = HEI2020_V2_VALIDATION$id, AGE = HEI2020_V2_VALIDATION$age, TOTALKCAL_HEI2020 = HEI2020_V2_VALIDATION$kcal, TOTALFRT_SERV_HEI2020 = HEI2020_V2_VALIDATION$total_fruit, FRT_SERV_HEI2020 = HEI2020_V2_VALIDATION$whole_fruit, VEG_SERV_HEI2020 = HEI2020_V2_VALIDATION$total_vegetable, GREENNBEAN_SERV_HEI2020 = HEI2020_V2_VALIDATION$green_and_bean, TOTALPRO_SERV_HEI2020 = HEI2020_V2_VALIDATION$total_protein, SEAPLANTPRO_SERV_HEI2020 = HEI2020_V2_VALIDATION$seafood_plant_protein, WHOLEGRAIN_SERV_HEI2020 = HEI2020_V2_VALIDATION$whole_grain, DAIRY_SERV_HEI2020 = HEI2020_V2_VALIDATION$dairy, FATTYACID_SERV_HEI2020 = HEI2020_V2_VALIDATION$fatty_acid, REFINEDGRAIN_SERV_HEI2020 = HEI2020_V2_VALIDATION$refined_grain, SODIUM_SERV_HEI2020 = HEI2020_V2_VALIDATION$sodium, ADDEDSUGAR_SERV_HEI2020 = HEI2020_V2_VALIDATION$added_sugar, SATFAT_SERV_HEI2020 = HEI2020_V2_VALIDATION$saturated_fat) #> # A tibble: 22 × 17 #>    RESPONDENTID   AGE TOTALKCAL_HEI2020 HEI2020_ALL HEI2020_TOTALFRT HEI2020_FRT #>           <dbl> <dbl>             <dbl>       <dbl>            <dbl>       <dbl> #>  1            1    18              1000        40                0           0   #>  2            2    18              1000        42                0.5         0.5 #>  3            3    18              1000        44.0              1           1   #>  4            4    18              1000        46.0              1.5         1.5 #>  5            5    18              1000        48.0              2           2   #>  6            6    18              1000        50.0              2.5         2.5 #>  7            7    18              1000        52                3           3   #>  8            8    18              1000        54                3.5         3.5 #>  9            9    18              1000        56                4           4   #> 10           10    18              1000        58                4.5         4.5 #> # ℹ 12 more rows #> # ℹ 11 more variables: HEI2020_VEG <dbl>, HEI2020_GREENNBEAN <dbl>, #> #   HEI2020_TOTALPRO <dbl>, HEI2020_SEAPLANTPRO <dbl>, #> #   HEI2020_WHOLEGRAIN <dbl>, HEI2020_DAIRY <dbl>, HEI2020_FATTYACID <dbl>, #> #   HEI2020_REFINEDGRAIN <dbl>, HEI2020_SODIUM <dbl>, HEI2020_ADDEDSUGAR <dbl>, #> #   HEI2020_SATFAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED.html","id":null,"dir":"Reference","previous_headings":"","what":"MED Calculation — MED","title":"MED Calculation — MED","text":"Calculate MED dietary index, Mediterranean, using given serving sizes foods nutrients consumed per 1 day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MED Calculation — MED","text":"","code":"MED(   SERV_DATA,   RESPONDENTID,   FRT_FRTJ_SERV_MED,   VEG_SERV_MED,   WGRAIN_SERV_MED,   LEGUMES_SERV_MED,   NUTS_SERV_MED,   FISH_SERV_MED,   REDPROC_MEAT_SERV_MED,   MONSATFAT_SERV_MED,   ALCOHOL_SERV_MED )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MED Calculation — MED","text":"SERV_DATA raw data file includes serving sizes foods nutrients RESPONDENTID unique participant ID participant FRT_FRTJ_SERV_MED serving size fruits 100% fruit juices, unit=servings/day (0.5 c berries; 1 cup=236.59 g; 1 med fruit (1 cup = 236.59 g); 1 cup fruit juice VEG_SERV_MED serving size vegetables except potatoes legumes, unit=0.5 c vege; 1 cup green leafy WGRAIN_SERV_MED serving size whole grains, including Whole-grain ready--eat cereals, cooked cereals, crackers, dark breads, brown rice, grains, wheat germ, bran, popcorn, unit=1oz LEGUMES_SERV_MED serving size legumes, including Tofu, string beans, peas, beans, unit=*oz, 1 cup legume = 4 oz NUTS_SERV_MED serving size nuts, including Nuts, peanut butter, unit=1oz FISH_SERV_MED serving size fish, including Fish shrimp, breaded fish, unit=4oz REDPROC_MEAT_SERV_MED serving size red processed meats, including Beef, pork, lamb, goat, veal, sausages, bacon, salami, ham, hot dog, deli meat, unit=serving (4 oz. unprocessed meat; 1.5 oz. processed meat) MONSATFAT_SERV_MED serving size ratio monounsaturated fat saturated fat, unit=ratio ALCOHOL_SERV_MED serving size alcohol, unit=13g","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MED Calculation — MED","text":"MED index/score","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MED Calculation — MED","text":"","code":"data(\"MED_VALIDATION\") MED(MED_VALIDATION, RESPONDENTID = MED_VALIDATION$id, FRT_FRTJ_SERV_MED = MED_VALIDATION$fruit, VEG_SERV_MED = MED_VALIDATION$vegetable, WGRAIN_SERV_MED = MED_VALIDATION$whole_grain, LEGUMES_SERV_MED = MED_VALIDATION$legume, NUTS_SERV_MED = MED_VALIDATION$nut, FISH_SERV_MED = MED_VALIDATION$fish, REDPROC_MEAT_SERV_MED = MED_VALIDATION$red_processed_meat, MONSATFAT_SERV_MED = MED_VALIDATION$monofat_satfat, ALCOHOL_SERV_MED = MED_VALIDATION$alcohol) #> Reminder: this MED index uses medians to rank participants' food/drink serving sizes and then calculate MED component scores, which may generate results that are specific to your study population but not comparable to other populations. #> # A tibble: 11 × 12 #>    RESPONDENTID MED_ALL MED_NOETOH MED_FRT MED_VEG MED_WGRAIN MED_LEGUMES #>           <dbl>   <dbl>      <dbl>   <dbl>   <dbl>      <dbl>       <dbl> #>  1            1       1          1       0       0          0           0 #>  2            2       1          1       0       0          0           0 #>  3            3       1          1       0       0          0           0 #>  4            4       1          1       0       0          0           0 #>  5            5       2          1       0       0          0           0 #>  6            6       8          7       1       1          1           1 #>  7            7       8          7       1       1          1           1 #>  8            8       8          7       1       1          1           1 #>  9            9       8          7       1       1          1           1 #> 10           10       7          7       1       1          1           1 #> 11           11       7          7       1       1          1           1 #> # ℹ 5 more variables: MED_NUTS <dbl>, MED_FISH <dbl>, MED_REDPROC_MEAT <dbl>, #> #   MED_MONSATFAT <dbl>, MED_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI.html","id":null,"dir":"Reference","previous_headings":"","what":"MEDI Calculation — MEDI","title":"MEDI Calculation — MEDI","text":"Calculate MEDI dietary index (serving size-based 0/1 point based), Mediterranean, using given serving sizes foods nutrients consumed per 1 day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MEDI Calculation — MEDI","text":"","code":"MEDI(   SERV_DATA,   RESPONDENTID,   OLIVE_OIL_SERV_MEDI,   FRT_SERV_MEDI,   VEG_SERV_MEDI,   LEGUMES_SERV_MEDI,   NUTS_SERV_MEDI,   FISH_SEAFOOD_SERV_MEDI,   ALCOHOL_SERV_MEDI,   SSB_SERV_MEDI,   SWEETS_SERV_MEDI,   DISCRET_FAT_SERV_MEDI,   REDPROC_MEAT_SERV_MEDI )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MEDI Calculation — MEDI","text":"SERV_DATA raw data file includes serving sizes foods nutrients RESPONDENTID unique participant ID participant OLIVE_OIL_SERV_MEDI serving size olive oil, unit= 10 g 0.8 tbsp = 1 serving FRT_SERV_MEDI serving size whole fruits, unit= 125 g = 1 serving  (approximately 1 c) VEG_SERV_MEDI serving size vegetables except potatoes legumes, unit= 125 g = 1 serving (approximately 1 c non green leafy vege; 2 cup green leafy vege) LEGUMES_SERV_MEDI serving size legumes, including Dried beans, lentils, peas, soups (split pea), tofu, soymilk, unit= 40 g = 1 serving (1.5 oz) NUTS_SERV_MEDI serving size nuts seeds, including Peanuts, almonds, sunflower seeds, cashews, walnuts, unit= 25 g = 1 serving (1 oz) FISH_SEAFOOD_SERV_MEDI serving size fishes seafoods, including Fresh-water sea-water fish; preserved fish salted fish, canned fish; shellfish (squid, prawns, mollusks), unit=125 g = 1 serving (4 oz) ALCOHOL_SERV_MEDI serving size alcohol, including Wine, beer, \"light\" beer, liquor, unit= 14 g pure alcohol = 1 serving (12 ounces beer, 5 ounces wine, 1.5 ounces hard liquor, vodka whiskey) SSB_SERV_MEDI serving size sugar sweetened beverages, unit=1 serving = 1 cup (8 oz) 240 mL 240 g SWEETS_SERV_MEDI serving size sweets, including Candy, chocolate, ice cream, cookies, cakes, pies, pastries, unit= 50 g = 1 serving (1.5 oz ) = 1 piece candy, 1 chocolate bar, 1 scoop ice cream, 1 cookie, 1 cake slice, 1 pie slice, 1 pastry DISCRET_FAT_SERV_MEDI serving size discretionary fats, including Butter, margarine, mayonnaise, salad dressing, unit= 10 g = 1 serving (0.8 tbsp) REDPROC_MEAT_SERV_MEDI serving size red processed meats, including Beef, pork, lamb, goat, veal, sausages, bacon, salami, ham, hot dog, deli meat, unit= 150 g = 1 serving (5 oz)","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MEDI Calculation — MEDI","text":"MEDI index/score component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MEDI Calculation — MEDI","text":"","code":"data(\"PREDIMED_trial\") MEDI(SERV_DATA = PREDIMED_trial, RESPONDENTID = PREDIMED_trial$Diet_Type, OLIVE_OIL_SERV_MEDI = PREDIMED_trial$Virgin_Oliveoil, FRT_SERV_MEDI = PREDIMED_trial$Fruits, VEG_SERV_MEDI = PREDIMED_trial$Vegetables, LEGUMES_SERV_MEDI = PREDIMED_trial$Legumes, NUTS_SERV_MEDI = PREDIMED_trial$Total_nuts, FISH_SEAFOOD_SERV_MEDI = PREDIMED_trial$Fish_Seafood, ALCOHOL_SERV_MEDI = PREDIMED_trial$Alcohol, SSB_SERV_MEDI = PREDIMED_trial$Soda_Drinks, SWEETS_SERV_MEDI = PREDIMED_trial$Sweets, DISCRET_FAT_SERV_MEDI = PREDIMED_trial$Refined_Oliveoil, REDPROC_MEAT_SERV_MEDI = PREDIMED_trial$Meat) #> # A tibble: 3 × 14 #>   RESPONDENTID MEDI_ALL MEDI_NOETOH MEDI_OLIVE_OIL MEDI_FRT MEDI_VEG #>   <chr>           <dbl>       <dbl>          <dbl>    <dbl>    <dbl> #> 1 Med_Oliveoil        8           7              1        1        1 #> 2 Med_Nuts            7           7              0        1        1 #> 3 Control             5           5              0        0        1 #> # ℹ 8 more variables: MEDI_LEGUMES <dbl>, MEDI_NUTS <dbl>, MEDI_FISH <dbl>, #> #   MEDI_ALCOHOL <dbl>, MEDI_SSB <dbl>, MEDI_SWEETS <dbl>, #> #   MEDI_DISCRET_FAT <dbl>, MEDI_REDPROC_MEAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI_NHANES_FPED.html","id":null,"dir":"Reference","previous_headings":"","what":"MEDI_NHANES_FPED — MEDI_NHANES_FPED","title":"MEDI_NHANES_FPED — MEDI_NHANES_FPED","text":"Calculate MEDI (serving size-based) using binary cutoff NHANES_FPED data (2005) within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI_NHANES_FPED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MEDI_NHANES_FPED — MEDI_NHANES_FPED","text":"","code":"MEDI_NHANES_FPED(   FPED_IND_PATH = NULL,   NUTRIENT_IND_PATH = NULL,   FPED_IND_PATH2 = NULL,   NUTRIENT_IND_PATH2 = NULL,   SWEETS_code = NULL,   FAT_OIL_code = NULL,   SSB_code = NULL,   OLIVE_OIL_code = NULL )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI_NHANES_FPED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MEDI_NHANES_FPED — MEDI_NHANES_FPED","text":"FPED_IND_PATH file path FPED IND data. file name like: fped_dr1iff.sas7bdat NUTRIENT_IND_PATH file path NUTRIENT IND data. file name like: DR1IFF_J FPED_IND_PATH2 file path FPED IND data day 2. file name like: fped_dr1iff.sas7bdat NUTRIENT_IND_PATH2 file path NUTRIENT IND data day 2. file name like: DR2IFF_J SWEETS_code code sweets FPED data. default food codes FPED data NHANES 2017-2018 FAT_OIL_code code fat oil FPED data. default food codes FPED data NHANES 2017-2018 SSB_code code sugar-sweetened beverages FPED data. default food codes FPED data NHANES 2017-2018 OLIVE_OIL_code code olive oil FPED data. default food codes FPED data NHANES 2017-2018","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI_NHANES_FPED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MEDI_NHANES_FPED — MEDI_NHANES_FPED","text":"MEDI component scores serving sizes","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI_NHANES_FPED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MEDI_NHANES_FPED — MEDI_NHANES_FPED","text":"","code":"data(\"NHANES_20172018\") MEDI_NHANES_FPED(FPED_IND_PATH = NHANES_20172018$FPED_IND, NUTRIENT_IND_PATH = NHANES_20172018$NUTRIENT_IND, FPED_IND_PATH2 = NHANES_20172018$FPED_IND2, NUTRIENT_IND_PATH2 = NHANES_20172018$NUTRIENT_IND2) #> Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. #> Since no SWEETS code is provided, the default SSB code from 17-18 FNDDS file is used #> Since no FAT_OIL code is provided, the default FAT_OIL code from 17-18 FNDDS file is used #> Since no OLIVE_OIL code is provided, the default OLIVE_OIL code from 17-18 FNDDS file is used #> # A tibble: 6,490 × 14 #>     SEQN MEDI_ALL MEDI_NOETOH MEDI_OLIVE_OIL MEDI_FRT MEDI_VEG MEDI_LEGUMES #>    <dbl>    <dbl>       <dbl>          <dbl>    <dbl>    <dbl>        <dbl> #>  1 93704      3           3                0        0      0            0   #>  2 93705      3.5         3.5              0        0      0            1   #>  3 93707      2           2                0        0      0            0   #>  4 93708      3.5         3.5              0        0      0.5          0   #>  5 93710      3           3                0        0      0            0   #>  6 93711      5           4.5              0        0      0.5          1   #>  7 93712      3           3                0        0      0            0.5 #>  8 93713      2.5         2.5              0        0      0.5          0   #>  9 93714      3           3                0        0      0            0   #> 10 93715      3           3                0        0      0            0   #> # ℹ 6,480 more rows #> # ℹ 7 more variables: MEDI_NUTS <dbl>, MEDI_FISH <dbl>, MEDI_ALCOHOL <dbl>, #> #   MEDI_SSB <dbl>, MEDI_SWEETS <dbl>, MEDI_DISCRET_FAT <dbl>, #> #   MEDI_REDPROC_MEAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI_NHANES_MPED.html","id":null,"dir":"Reference","previous_headings":"","what":"MEDI_NHANES_MPED — MEDI_NHANES_MPED","title":"MEDI_NHANES_MPED — MEDI_NHANES_MPED","text":"Calculate MEDI NHANES_MPED data (2005, 1999-2004) within 1 step day 1, day 2, day 1 2 combined (age >= 2 )","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI_NHANES_MPED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MEDI_NHANES_MPED — MEDI_NHANES_MPED","text":"","code":"MEDI_NHANES_MPED(   MPED_PER_100_GRAM_PATH = NULL,   WJFRT = NULL,   NUTRIENT_PATH = NULL,   NUTRIENT_IND_PATH = NULL,   DEMO_PATH,   NUTRIENT_PATH2 = NULL,   NUTRIENT_IND_PATH2 = NULL,   SWEETS_code = NULL,   FAT_OIL_code = NULL,   SSB_code = NULL,   OLIVE_OIL_code = NULL )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI_NHANES_MPED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MEDI_NHANES_MPED — MEDI_NHANES_MPED","text":"MPED_PER_100_GRAM_PATH file path MPED per 100 gram data day 1 day 2 data. file name like: pyr_tot_d1.sas7bdat WJFRT file path WJFRT data day 1 day2 data. file name like: wjfrt.sas7bdat NUTRIENT_PATH file path NUTRIENT data day 1 data. file name like: DR1TOT_J.XPT DRXTOT_B.XPT NUTRIENT_IND_PATH file path NUTRIENT_IND data day 1 data. file name like: DR1IFF_J.XPT DEMO_PATH file path DEMOGRAPHIC data. file name like: DEMO_J.XPT NUTRIENT_PATH2 file path NUTRIENT2 data day 2 data. file name like: DR2TOT_J.XPT NUTRIENT_IND_PATH2 file path NUTRIENT_IND2 data day 2 data file name like: DR2IFF_J.XPT SWEETS_code code sweets FPED data. default food codes FPED data NHANES 2017-2018 FAT_OIL_code code fat oil FPED data. default food codes FPED data NHANES 2017-2018 SSB_code code sugar-sweetened beverages FPED data. default food codes FPED data NHANES 2017-2018 OLIVE_OIL_code code olive oil FPED data. default food codes FPED data NHANES 2017-2018","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI_NHANES_MPED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MEDI_NHANES_MPED — MEDI_NHANES_MPED","text":"MEDI component scores serving sizes","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI_NHANES_MPED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MEDI_NHANES_MPED — MEDI_NHANES_MPED","text":"","code":"data(\"NHANES_20032004\") MEDI_NHANES_MPED(MPED_PER_100_GRAM_PATH = NHANES_20032004$MPED_PER_100_GRAM, WJFRT = NHANES_20032004$WJFRT, NUTRIENT_PATH = NHANES_20032004$NUTRIENT, NUTRIENT_IND_PATH = NHANES_20032004$NUTRIENT_IND, DEMO_PATH = NHANES_20032004$DEMO, NUTRIENT_PATH2 = NHANES_20032004$NUTRIENT2, NUTRIENT_IND_PATH2 = NHANES_20032004$NUTRIENT_IND2) #> Since no SSB code is provided, the default SSB code from 17-18 FNDDS file is used. #> Since no SWEETS code is provided, the default SSB code from 17-18 FNDDS file is used #> Since no FAT_OIL code is provided, the default FAT_OIL code from 17-18 FNDDS file is used #> Since no OLIVE_OIL code is provided, the default OLIVE_OIL code from 17-18 FNDDS file is used #> # A tibble: 7,650 × 14 #>     SEQN MEDI_ALL MEDI_NOETOH MEDI_OLIVE_OIL MEDI_FRT MEDI_VEG MEDI_LEGUMES #>    <dbl>    <dbl>       <dbl>          <dbl>    <dbl>    <dbl>        <dbl> #>  1 21005      1.5         1.5              0        0        0          0   #>  2 21006      3.5         3.5              0        0        0          0   #>  3 21007      2           2                0        0        0          0   #>  4 21008      2.5         2.5              0        0        0          0   #>  5 21009      2.5         2.5              0        0        0          0   #>  6 21010      4           3                0        0        0          0.5 #>  7 21012      2.5         1.5              0        0        0          0.5 #>  8 21013      1.5         1.5              0        0        0          0   #>  9 21014      4           4                0        0        0          0.5 #> 10 21015      3           3                0        0        0          0   #> # ℹ 7,640 more rows #> # ℹ 7 more variables: MEDI_NUTS <dbl>, MEDI_FISH <dbl>, MEDI_ALCOHOL <dbl>, #> #   MEDI_SSB <dbl>, MEDI_SWEETS <dbl>, MEDI_DISCRET_FAT <dbl>, #> #   MEDI_REDPROC_MEAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI_V2.html","id":null,"dir":"Reference","previous_headings":"","what":"MEDI_V2 Calculation — MEDI_V2","title":"MEDI_V2 Calculation — MEDI_V2","text":"Calculate Mediterranean dietary index serving size-based 5 point scoring criteria, using given serving sizes foods nutrients consumed per 1 day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI_V2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MEDI_V2 Calculation — MEDI_V2","text":"","code":"MEDI_V2(   SERV_DATA,   RESPONDENTID,   OLIVE_OIL_SERV_MEDI,   FRT_SERV_MEDI,   VEG_SERV_MEDI,   LEGUMES_SERV_MEDI,   NUTS_SERV_MEDI,   FISH_SEAFOOD_SERV_MEDI,   ALCOHOL_SERV_MEDI,   SSB_SERV_MEDI,   SWEETS_SERV_MEDI,   DISCRET_FAT_SERV_MEDI,   REDPROC_MEAT_SERV_MEDI )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI_V2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MEDI_V2 Calculation — MEDI_V2","text":"SERV_DATA raw data file includes serving sizes foods nutrients RESPONDENTID unique participant ID participant OLIVE_OIL_SERV_MEDI serving size olive oil, unit= 10 g 0.8 tbsp = 1 serving FRT_SERV_MEDI serving size whole fruits, unit= 125 g = 1 serving  (approximately 1 c) VEG_SERV_MEDI serving size vegetables except potatoes legumes, unit= 125 g = 1 serving (approximately 1 c non green leafy vege; 2 cup green leafy vege) LEGUMES_SERV_MEDI serving size legumes, including Dried beans, lentils, peas, soups (split pea), tofu, soymilk, unit= 40 g = 1 serving (1.5 oz) NUTS_SERV_MEDI serving size nuts seeds, including Peanuts, almonds, sunflower seeds, cashews, walnuts, unit= 25 g = 1 serving (1 oz) FISH_SEAFOOD_SERV_MEDI serving size fishes seafoods, including Fresh-water sea-water fish; preserved fish salted fish, canned fish; shellfish (squid, prawns, mollusks), unit=125 g = 1 serving (4 oz) ALCOHOL_SERV_MEDI serving size alcohol, including Wine, beer, \"light\" beer, liquor, unit= 14 g pure alcohol = 1 serving (12 ounces beer, 5 ounces wine, 1.5 ounces hard liquor, vodka whiskey) SSB_SERV_MEDI serving size dairy, including Milk, yogurt, cheese, custard, milk puddings, milk products, unit=1 serving = 1 cup milk, 1 cup yogurt, 1 ½ ounces hard cheese (cheddar, mozzarella, Swiss, Parmesan), 1/3 cup shredded cheese, 2 ounces processed cheese (American), ½ cup ricotta cheese, 2 cups cottage cheese, 1 cup pudding made milk, 1 cup frozen yogurt, 1 ½ cups ice cream SWEETS_SERV_MEDI serving size sweets, including Candy, chocolate, ice cream, cookies, cakes, pies, pastries, unit= 50 g = 1 serving (1.5 oz ) = 1 piece candy, 1 chocolate bar, 1 scoop ice cream, 1 cookie, 1 cake slice, 1 pie slice, 1 pastry DISCRET_FAT_SERV_MEDI serving size discretionary fats, including Butter, margarine, mayonnaise, salad dressing, unit= 10 g = 1 serving (0.8 tbsp) REDPROC_MEAT_SERV_MEDI serving size red processed meats, including Beef, pork, lamb, goat, veal, sausages, bacon, salami, ham, hot dog, deli meat, unit= 150 g = 1 serving (5 oz)","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI_V2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MEDI_V2 Calculation — MEDI_V2","text":"MEDI index/score component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MEDI_V2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MEDI_V2 Calculation — MEDI_V2","text":"","code":"data(\"PREDIMED_trial\") MEDI_V2(SERV_DATA = PREDIMED_trial, RESPONDENTID = PREDIMED_trial$Diet_Type, OLIVE_OIL_SERV_MEDI = PREDIMED_trial$Virgin_Oliveoil, FRT_SERV_MEDI = PREDIMED_trial$Fruits, VEG_SERV_MEDI = PREDIMED_trial$Vegetables, LEGUMES_SERV_MEDI = PREDIMED_trial$Legumes, NUTS_SERV_MEDI = PREDIMED_trial$Total_nuts, FISH_SEAFOOD_SERV_MEDI = PREDIMED_trial$Fish_Seafood, ALCOHOL_SERV_MEDI = PREDIMED_trial$Alcohol, SSB_SERV_MEDI = PREDIMED_trial$Soda_Drinks, SWEETS_SERV_MEDI = PREDIMED_trial$Sweets, DISCRET_FAT_SERV_MEDI = PREDIMED_trial$Refined_Oliveoil, REDPROC_MEAT_SERV_MEDI = PREDIMED_trial$Meat) #> # A tibble: 3 × 14 #>   RESPONDENTID MEDI_V2_ALL MEDI_V2_NOETOH MEDI_OLIVE_OIL MEDI_FRT MEDI_VEG #>   <chr>              <dbl>          <dbl>          <dbl>    <dbl>    <dbl> #> 1 Med_Oliveoil        42.5           35.0           5        5           5 #> 2 Med_Nuts            36.7           30.8           3.19     5           5 #> 3 Control             33.7           29.1           2.27     4.92        5 #> # ℹ 8 more variables: MEDI_LEGUMES <dbl>, MEDI_NUTS <dbl>, MEDI_FISH <dbl>, #> #   MEDI_ALCOHOL <dbl>, MEDI_SSB <dbl>, MEDI_SWEETS <dbl>, #> #   MEDI_DISCRET_FAT <dbl>, MEDI_REDPROC_MEAT <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_ASA24.html","id":null,"dir":"Reference","previous_headings":"","what":"MED_ASA24 — MED_ASA24","title":"MED_ASA24 — MED_ASA24","text":"Calculate MED ASA24 data within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_ASA24.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MED_ASA24 — MED_ASA24","text":"","code":"MED_ASA24(DATA_PATH, RECALL_SUMMARIZE = TRUE)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_ASA24.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MED_ASA24 — MED_ASA24","text":"DATA_PATH file path data. file name like: Totals.csv. RECALL_SUMMARIZE Whether summarize food group nutrient intake days reported per individual per day. Default TRUE.","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_ASA24.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MED_ASA24 — MED_ASA24","text":"MED component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_ASA24.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MED_ASA24 — MED_ASA24","text":"","code":"data(\"ASA24_exp\") MED_ASA24(ASA24_exp, RECALL_SUMMARIZE = TRUE) #> RECALL_SUMMARIZE = TRUE, summarizing HEI2015 for ASA24 data by averaging over all possible recalls per person per day... #> Reminder: this MED index uses medians to rank participants' food/drink serving sizes and then calculate MED component scores, which may generate results that are specific to your study population but not comparable to other populations. #> # A tibble: 21 × 13 #> # Groups:   UserName, UserID [21] #>    UserName UserID     MED_ALL MED_NOETOH MED_FRT MED_VEG MED_WGRAIN MED_LEGUMES #>       <dbl> <chr>        <dbl>      <dbl>   <dbl>   <dbl>      <dbl>       <dbl> #>  1        1 e6541891-…       7          7       1       1          1           1 #>  2        2 dbb278b0-…       6          6       1       1          1           1 #>  3        3 f0115426-…       5          5       1       1          1           0 #>  4        4 337d84a7-…       6          6       0       1          1           1 #>  5        5 998f098a-…       2          2       0       0          1           0 #>  6        6 aae330db-…       4          4       1       1          0           0 #>  7        7 76e0f3e1-…       5          5       1       1          1           0 #>  8        8 24de994f-…       8          7       1       1          1           1 #>  9        9 8f61ae64-…       6          6       1       1          1           1 #> 10       10 b47ab1b8-…       6          6       1       1          1           1 #> # ℹ 11 more rows #> # ℹ 5 more variables: MED_NUTS <dbl>, MED_FISH <dbl>, MED_REDPROC_MEAT <dbl>, #> #   MED_MONSATFAT <dbl>, MED_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_BLOCK.html","id":null,"dir":"Reference","previous_headings":"","what":"MED_BLOCK Calculation — MED_BLOCK","title":"MED_BLOCK Calculation — MED_BLOCK","text":"Calculate MED dietary index (serving size based) per 1 day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_BLOCK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MED_BLOCK Calculation — MED_BLOCK","text":"","code":"MED_BLOCK(RAW_DATA)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_BLOCK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MED_BLOCK Calculation — MED_BLOCK","text":"RAW_DATA raw data file includes results raw data dietary assessment","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_BLOCK.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MED_BLOCK Calculation — MED_BLOCK","text":"MED index/score components","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_BLOCK.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MED_BLOCK Calculation — MED_BLOCK","text":"","code":"data(\"BLOCK_exp\") MED_BLOCK(BLOCK_exp) #> Reminder: this MED index uses medians to rank participants' food/drink serving sizes and then calculate MED component scores, which may generate results that are specific to your study population but not comparable to other populations. #> # A tibble: 5 × 12 #>   RESPONDENTID MED_ALL MED_NOETOH MED_FRT MED_VEG MED_WGRAIN MED_LEGUMES #>          <dbl>   <dbl>      <dbl>   <dbl>   <dbl>      <dbl>       <dbl> #> 1            1       6          6       1       0          1           1 #> 2            2       4          4       0       0          0           1 #> 3            3       7          6       0       1          1           1 #> 4            4       3          3       1       1          1           0 #> 5            5       4          4       1       1          0           0 #> # ℹ 5 more variables: MED_NUTS <dbl>, MED_FISH <dbl>, MED_REDPROC_MEAT <dbl>, #> #   MED_MONSATFAT <dbl>, MED_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_DHQ3.html","id":null,"dir":"Reference","previous_headings":"","what":"MED_DHQ3 — MED_DHQ3","title":"MED_DHQ3 — MED_DHQ3","text":"Calculate MED DHQ3 data within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_DHQ3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MED_DHQ3 — MED_DHQ3","text":"","code":"MED_DHQ3(DATA_PATH)"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_DHQ3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MED_DHQ3 — MED_DHQ3","text":"DATA_PATH file path data. data Total Daily Results file, ending results.csv","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_DHQ3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MED_DHQ3 — MED_DHQ3","text":"MED component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_DHQ3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MED_DHQ3 — MED_DHQ3","text":"","code":"data(\"DHQ3_exp\") MED_DHQ3(DHQ3_exp) #> # A tibble: 23 × 12 #>    RESPONDENTID MED_ALL MED_NOETOH MED_FRT MED_VEG MED_WGRAIN MED_LEGUMES #>           <dbl>   <dbl>      <dbl>   <dbl>   <dbl>      <dbl>       <dbl> #>  1            1       5          5       1       1          1           1 #>  2            2       7          7       1       1          1           1 #>  3            3       6          6       1       1          1           1 #>  4            4       4          4       1       0          1           0 #>  5            5       2          2       1       0          0           0 #>  6            6       3          3       0       0          1           0 #>  7            7       4          4       1       1          0           1 #>  8            8       4          4       0       1          0           1 #>  9            9       2          1       1       0          0           0 #> 10           10       5          5       0       0          1           1 #> # ℹ 13 more rows #> # ℹ 5 more variables: MED_NUTS <dbl>, MED_FISH <dbl>, MED_REDPROC_MEAT <dbl>, #> #   MED_MONSATFAT <dbl>, MED_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_NHANES_FPED.html","id":null,"dir":"Reference","previous_headings":"","what":"MED_NHANES_FPED — MED_NHANES_FPED","title":"MED_NHANES_FPED — MED_NHANES_FPED","text":"Calculate MED NHANES_FPED data (2005) within 1 step","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_NHANES_FPED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MED_NHANES_FPED — MED_NHANES_FPED","text":"","code":"MED_NHANES_FPED(   FPED_PATH = NULL,   NUTRIENT_PATH = NULL,   DEMO_PATH,   FPED_PATH2 = NULL,   NUTRIENT_PATH2 = NULL )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_NHANES_FPED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MED_NHANES_FPED — MED_NHANES_FPED","text":"FPED_PATH file path FPED data. file name like: fpre_dr1tot_1718.sas7bdat NUTRIENT_PATH file path NUTRIENT data. file name like: DR1TOT_J.XPT DEMO_PATH file path DEMOGRAPHIC data. file name like: DEMO_J.XPT FPED_PATH2 file path FPED data. file name like: fpre_dr2tot_1718.sas7bdat NUTRIENT_PATH2 file path NUTRIENT data. file name like: DR2TOT_J.XPT","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_NHANES_FPED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MED_NHANES_FPED — MED_NHANES_FPED","text":"MED component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_NHANES_FPED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MED_NHANES_FPED — MED_NHANES_FPED","text":"","code":"data(\"NHANES_20172018\") MED_NHANES_FPED(FPED_PATH = NHANES_20172018$FPED, NUTRIENT_PATH = NHANES_20172018$NUTRIENT, DEMO_PATH = NHANES_20172018$DEMO, FPED_PATH2 = NHANES_20172018$FPED2, NUTRIENT_PATH2 = NHANES_20172018$NUTRIENT2) #> Reminder: this MED index uses medians to rank participants' food/drink serving sizes and then calculate MED component scores, which may generate results that are specific to your study population but not comparable to other populations. #> # A tibble: 6,174 × 12 #>     SEQN MED_ALL MED_NOETOH MED_FRT MED_VEG MED_WGRAIN MED_LEGUMES MED_NUTS #>    <dbl>   <dbl>      <dbl>   <dbl>   <dbl>      <dbl>       <dbl>    <dbl> #>  1 93704     3.5        3.5     1       0          0.5         0        0   #>  2 93705     3.5        3.5     0       0.5        0           1        0.5 #>  3 93707     2.5        2.5     0       0.5        1           0.5      0   #>  4 93708     3.5        3.5     0.5     0.5        0.5         0        0.5 #>  5 93711     5.5        5.5     1       1          0.5         1        1   #>  6 93712     3          3       0.5     1          0.5         0.5      0   #>  7 93713     3.5        3.5     1       1          0.5         0.5      0   #>  8 93714     1.5        1.5     0       0          0.5         0        0   #>  9 93715     0.5        0.5     0       0          0           0        0   #> 10 93716     6          6       1       1          0.5         1        1   #> # ℹ 6,164 more rows #> # ℹ 4 more variables: MED_FISH <dbl>, MED_REDPROC_MEAT <dbl>, #> #   MED_MONSATFAT <dbl>, MED_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_NHANES_MPED.html","id":null,"dir":"Reference","previous_headings":"","what":"MED_NHANES_MPED — MED_NHANES_MPED","title":"MED_NHANES_MPED — MED_NHANES_MPED","text":"Calculate MED NHANES_MPED data (2005, 1999-2004) within 1 step day 1, day 2, day 1 2 combined (age >= 2 )","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_NHANES_MPED.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MED_NHANES_MPED — MED_NHANES_MPED","text":"","code":"MED_NHANES_MPED(   MPED_PER_100_GRAM_PATH = NULL,   WJFRT = NULL,   NUTRIENT_PATH = NULL,   NUTRIENT_IND_PATH = NULL,   DEMO_PATH,   NUTRIENT_PATH2 = NULL,   NUTRIENT_IND_PATH2 = NULL )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_NHANES_MPED.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MED_NHANES_MPED — MED_NHANES_MPED","text":"MPED_PER_100_GRAM_PATH file path MPED per 100 gram data day 1 day 2 data. file name like: pyr_tot_d1.sas7bdat WJFRT file path WJFRT data day 1 day2 data. file name like: wjfrt.sas7bdat NUTRIENT_PATH file path NUTRIENT data day 1 data. file name like: DR1TOT_J.XPT DRXTOT_B.XPT NUTRIENT_IND_PATH file path NUTRIENT_IND data day 1 data. file name like: DR1IFF_J.XPT DEMO_PATH file path DEMOGRAPHIC data. file name like: DEMO_J.XPT NUTRIENT_PATH2 file path NUTRIENT2 data day 2 data. file name like: DR2TOT_J.XPT NUTRIENT_IND_PATH2 file path NUTRIENT_IND2 data day 2 data file name like: DR2IFF_J.XPT","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_NHANES_MPED.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MED_NHANES_MPED — MED_NHANES_MPED","text":"MED component scores serving sizes","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/MED_NHANES_MPED.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MED_NHANES_MPED — MED_NHANES_MPED","text":"","code":"data(\"NHANES_20032004\") MED_NHANES_MPED(MPED_PER_100_GRAM_PATH = NHANES_20032004$MPED_PER_100_GRAM, WJFRT = NHANES_20032004$WJFRT, NUTRIENT_PATH = NHANES_20032004$NUTRIENT, NUTRIENT_IND_PATH = NHANES_20032004$NUTRIENT_IND, DEMO_PATH = NHANES_20032004$DEMO, NUTRIENT_PATH2 = NHANES_20032004$NUTRIENT2, NUTRIENT_IND_PATH2 = NHANES_20032004$NUTRIENT_IND2) #> Reminder: this MED index uses medians to rank participants' food/drink serving sizes and then calculate MED component scores, which may generate results that are specific to your study population but not comparable to other populations. #> # A tibble: 7,647 × 12 #>     SEQN MED_ALL MED_NOETOH MED_FRT MED_VEG MED_WGRAIN MED_LEGUMES MED_NUTS #>    <dbl>   <dbl>      <dbl>   <dbl>   <dbl>      <dbl>       <dbl>    <dbl> #>  1 21005     2          2       0       0.5        0.5         0        0.5 #>  2 21006     3.5        3.5     0       0          0.5         0.5      0.5 #>  3 21007     2.5        2.5     0       0.5        0           0        0   #>  4 21008     3.5        3.5     0       1          0.5         1        0   #>  5 21009     4          4       0       0.5        0.5         0.5      0   #>  6 21010     2          1.5     0       0          0           1        0   #>  7 21012     3          3       0       0.5        0.5         1        0   #>  8 21013     2.5        2.5     0       0          0           0.5      0.5 #>  9 21014     5          5       0.5     1          0.5         1        0.5 #> 10 21015     4.5        4.5     0.5     0.5        1           1        0.5 #> # ℹ 7,637 more rows #> # ℹ 4 more variables: MED_FISH <dbl>, MED_REDPROC_MEAT <dbl>, #> #   MED_MONSATFAT <dbl>, MED_ALCOHOL <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/PHDI.html","id":null,"dir":"Reference","previous_headings":"","what":"PHDI Calculation — PHDI","title":"PHDI Calculation — PHDI","text":"Calculate PHDI, Planetary Health Diet Index quantifies adherence reference diet included EAT-Lancet report Willett et al (2019), using serving sizes foods nutrients consumed per 1 day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/PHDI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PHDI Calculation — PHDI","text":"","code":"PHDI(   SERV_DATA,   RESPONDENTID,   GENDER,   TOTALKCAL_PHDI,   WGRAIN_SERV_PHDI,   STARCHY_VEG_SERV_PHDI,   VEG_SERV_PHDI,   FRT_SERV_PHDI,   DAIRY_SERV_PHDI,   REDPROC_MEAT_SERV_PHDI,   POULTRY_SERV_PHDI,   EGG_SERV_PHDI,   FISH_SERV_PHDI,   NUTS_SERV_PHDI,   LEGUMES_SERV_PHDI,   SOY_SERV_PHDI,   ADDED_FAT_UNSAT_SERV_PHDI,   ADDED_FAT_SAT_TRANS_SERV_PHDI,   ADDED_SUGAR_SERV_PHDI )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/PHDI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PHDI Calculation — PHDI","text":"SERV_DATA raw data file includes serving sizes foods nutrients consumed per 1 day RESPONDENTID unique participant ID participant GENDER gender participant. 2 female 1 male. TOTALKCAL_PHDI total kcal WGRAIN_SERV_PHDI serving size whole grains, unit=grams/day STARCHY_VEG_SERV_PHDI serving size starchy vegetables, potatos, cassava, unit=grams/day VEG_SERV_PHDI serving size vegetable except potatoes, starchy vegetables, LEGUMES, unit=grams/day FRT_SERV_PHDI serving size whole fruits fruit juice, unit=grams/day DAIRY_SERV_PHDI serving size dairy products, unit=grams/day REDPROC_MEAT_SERV_PHDI serving size red processed meats, including Beef, pork, lamb, goat, veal, sausages, bacon, salami, ham, hot dog, deli meat, unit=grams/day POULTRY_SERV_PHDI serving size Poultry, including Chicken, turkey, duck, goose, ostrich, unit=grams/day EGG_SERV_PHDI serving size Eggs shell, unit=grams/day FISH_SERV_PHDI serving size Fish shellfish, unit=grams/day NUTS_SERV_PHDI serving size nuts seeds, including peanuts, tree nuts- - walnuts, almond, hazelnuts, pecan, cashew, pistachio, unit=grams/day LEGUMES_SERV_PHDI serving size Nonsoy LEGUMES, including Beans, peas, lentils, chickpeas, unit=grams/day SOY_SERV_PHDI serving size Soy products, including Tofu, tempeh, soy milk, soy yogurt, soy cheese, unit=grams/day ADDED_FAT_UNSAT_SERV_PHDI serving size Added unsaturated fat, e.g. olive soybean, rapeseed, sunflower, peanuts oil, excluding transfat, unit=percent total kcal/day ADDED_FAT_SAT_TRANS_SERV_PHDI serving size Added saturated fats trans fat, e.g. butter, lard, coconuts oil, palm oil, unit=percent total kcal/day ADDED_SUGAR_SERV_PHDI serving size Added sugar, including added sugar sweeteners fruit juice, unit=percent total kcal/day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/PHDI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PHDI Calculation — PHDI","text":"PHDI index/score, PHDI component scores","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/PHDI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PHDI Calculation — PHDI","text":"","code":"data(\"PHDI_VALIDATION\") PHDI(SERV_DATA = PHDI_VALIDATION, PHDI_VALIDATION$id, PHDI_VALIDATION$gender, PHDI_VALIDATION$TOTALKCAL_PHDI, PHDI_VALIDATION$WGRAIN_SERV_PHDI, PHDI_VALIDATION$STARCHY_VEG_SERV_PHDI, PHDI_VALIDATION$VEG_SERV_PHDI, PHDI_VALIDATION$FRT_SERV_PHDI, PHDI_VALIDATION$DAIRY_SERV_PHDI, PHDI_VALIDATION$REDPROC_MEAT_SERV_PHDI, PHDI_VALIDATION$POULTRY_SERV_PHDI, PHDI_VALIDATION$EGG_SERV_PHDI, PHDI_VALIDATION$FISH_SERV_PHDI, PHDI_VALIDATION$NUTS_SERV_PHDI, PHDI_VALIDATION$LEGUMES_SERV_PHDI, PHDI_VALIDATION$SOY_SERV_PHDI, PHDI_VALIDATION$ADDED_FAT_UNSAT_SERV_PHDI, PHDI_VALIDATION$ADDED_FAT_SAT_TRANS_SERV_PHDI, PHDI_VALIDATION$ADDED_SUGAR_SERV_PHDI) #> # A tibble: 26 × 19 #>    RESPONDENTID GENDER PHDI_ALL TOTALKCAL_PHDI PHDI_WGRAIN PHDI_STARCHY_VEG #>           <dbl>  <dbl>    <dbl>          <dbl>       <dbl>            <dbl> #>  1            1      2        0           2000           0                0 #>  2            2      2        0           2000           0                0 #>  3            3      2       14           2000           1                1 #>  4            4      2       28           2000           2                2 #>  5            5      2       42           2000           3                3 #>  6            6      2       56           2000           4                4 #>  7            7      2       70           2000           5                5 #>  8            8      2       84           2000           6                6 #>  9            9      2       98           2000           7                7 #> 10           10      2      112           2000           8                8 #> # ℹ 16 more rows #> # ℹ 13 more variables: PHDI_VEG <dbl>, PHDI_FRT <dbl>, PHDI_DAIRY <dbl>, #> #   PHDI_REDPROC_MEAT <dbl>, PHDI_POULTRY <dbl>, PHDI_EGG <dbl>, #> #   PHDI_FISH <dbl>, PHDI_NUTS <dbl>, PHDI_LEGUMES <dbl>, PHDI_SOY <dbl>, #> #   PHDI_ADDED_FAT_UNSAT <dbl>, PHDI_ADDED_FAT_SAT <dbl>, #> #   PHDI_ADDED_SUGAR <dbl>"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/PHDI_V2.html","id":null,"dir":"Reference","previous_headings":"","what":"PHDI Calculation — PHDI_V2","title":"PHDI Calculation — PHDI_V2","text":"Calculate PHDI gram-based variables (convert ADDED_FAT_UNSAT_SERV_PHDI, ADDED_FAT_SAT_TRANS_SERV_PHDI, ADDED_SUGAR_SERV_PHDI percent kcal automatically using TOTALKCAL_PHDI), Planetary Health Diet Index quantifies adherence reference diet included EAT-Lancet report Willett et al (2019), using serving sizes foods nutrients consumed per 1 day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/PHDI_V2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PHDI Calculation — PHDI_V2","text":"","code":"PHDI_V2(   SERV_DATA,   RESPONDENTID,   GENDER,   TOTALKCAL_PHDI,   WGRAIN_SERV_PHDI,   STARCHY_VEG_SERV_PHDI,   VEG_SERV_PHDI,   FRT_SERV_PHDI,   DAIRY_SERV_PHDI,   REDPROC_MEAT_SERV_PHDI,   POULTRY_SERV_PHDI,   EGG_SERV_PHDI,   FISH_SERV_PHDI,   NUTS_SERV_PHDI,   LEGUMES_SERV_PHDI,   SOY_SERV_PHDI,   ADDED_FAT_UNSAT_SERV_PHDI,   ADDED_FAT_SAT_TRANS_SERV_PHDI,   ADDED_SUGAR_SERV_PHDI )"},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/PHDI_V2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PHDI Calculation — PHDI_V2","text":"SERV_DATA raw data file includes serving sizes foods nutrients consumed per 1 day RESPONDENTID unique participant ID participant GENDER gender participant. 2 female 1 male. TOTALKCAL_PHDI total kcal WGRAIN_SERV_PHDI serving size whole grains, unit=grams/day STARCHY_VEG_SERV_PHDI serving size starchy vegetables, potatos, cassava, unit=grams/day VEG_SERV_PHDI serving size vegetable except potatoes, starchy vegetables, LEGUMES, unit=grams/day FRT_SERV_PHDI serving size whole fruits fruit juice, unit=grams/day DAIRY_SERV_PHDI serving size dairy products, unit=grams/day REDPROC_MEAT_SERV_PHDI serving size red processed meats, including Beef, pork, lamb, goat, veal, sausages, bacon, salami, ham, hot dog, deli meat, unit=grams/day POULTRY_SERV_PHDI serving size Poultry, including Chicken, turkey, duck, goose, ostrich, unit=grams/day EGG_SERV_PHDI serving size Eggs shell, unit=grams/day FISH_SERV_PHDI serving size Fish shellfish, unit=grams/day NUTS_SERV_PHDI serving size nuts seeds, including peanuts, tree nuts- - walnuts, almond, hazelnuts, pecan, cashew, pistachio, unit=grams/day LEGUMES_SERV_PHDI serving size Nonsoy LEGUMES, including Beans, peas, lentils, chickpeas, unit=grams/day SOY_SERV_PHDI serving size Soy products, including Tofu, tempeh, soy milk, soy yogurt, soy cheese, unit=grams/day ADDED_FAT_UNSAT_SERV_PHDI serving size Added unsaturated fat, e.g. olive soybean, rapeseed, sunflower, peanuts oil, excluding transfat, unit=grams/day ADDED_FAT_SAT_TRANS_SERV_PHDI serving size Added saturated fats trans fat, e.g. butter, lard, coconuts oil, palm oil, unit=grams/day ADDED_SUGAR_SERV_PHDI serving size Added sugar, including added sugar sweeteners fruit juice, unit=grams/day","code":""},{"path":"https://jamesjiadazhan.github.io/dietaryindex_manual/reference/PHDI_V2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PHDI Calculation — PHDI_V2","text":"PHDI index/score, PHDI component scores","code":""}]
